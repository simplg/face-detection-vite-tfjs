{
  "version": 3,
  "sources": ["../@tensorflow/tfjs-converter/src/data/compiled_api.ts", "../@tensorflow/tfjs-converter/src/operations/custom_op/register.ts", "../@tensorflow/tfjs-converter/src/operations/executors/utils.ts", "../@tensorflow/tfjs-converter/src/operations/op_list/arithmetic.ts", "../@tensorflow/tfjs-converter/src/operations/op_list/basic_math.ts", "../@tensorflow/tfjs-converter/src/operations/op_list/control.ts", "../@tensorflow/tfjs-converter/src/operations/op_list/convolution.ts", "../@tensorflow/tfjs-converter/src/operations/op_list/creation.ts", "../@tensorflow/tfjs-converter/src/operations/op_list/dynamic.ts", "../@tensorflow/tfjs-converter/src/operations/op_list/evaluation.ts", "../@tensorflow/tfjs-converter/src/operations/op_list/graph.ts", "../@tensorflow/tfjs-converter/src/operations/op_list/hash_table.ts", "../@tensorflow/tfjs-converter/src/operations/op_list/image.ts", "../@tensorflow/tfjs-converter/src/operations/op_list/logical.ts", "../@tensorflow/tfjs-converter/src/operations/op_list/matrices.ts", "../@tensorflow/tfjs-converter/src/operations/op_list/normalization.ts", "../@tensorflow/tfjs-converter/src/operations/op_list/reduction.ts", "../@tensorflow/tfjs-converter/src/operations/op_list/slice_join.ts", "../@tensorflow/tfjs-converter/src/operations/op_list/sparse.ts", "../@tensorflow/tfjs-converter/src/operations/op_list/spectral.ts", "../@tensorflow/tfjs-converter/src/operations/op_list/string.ts", "../@tensorflow/tfjs-converter/src/operations/op_list/transformation.ts", "../@tensorflow/tfjs-converter/src/operations/operation_mapper.ts", "../@tensorflow/tfjs-converter/src/operations/custom_op/node_value_impl.ts", "../../../tfjs-core/src/ops/ops_for_converter.ts", "../@tensorflow/tfjs-converter/src/operations/executors/arithmetic_executor.ts", "../@tensorflow/tfjs-converter/src/operations/executors/basic_math_executor.ts", "../@tensorflow/tfjs-converter/src/executor/tensor_utils.ts", "../@tensorflow/tfjs-converter/src/executor/tensor_array.ts", "../@tensorflow/tfjs-converter/src/executor/tensor_list.ts", "../@tensorflow/tfjs-converter/src/operations/executors/control_executor.ts", "../@tensorflow/tfjs-converter/src/operations/executors/convolution_executor.ts", "../@tensorflow/tfjs-converter/src/operations/executors/creation_executor.ts", "../@tensorflow/tfjs-converter/src/operations/executors/dynamic_executor.ts", "../@tensorflow/tfjs-converter/src/operations/executors/evaluation_executor.ts", "../@tensorflow/tfjs-converter/src/operations/executors/graph_executor.ts", "../@tensorflow/tfjs-converter/src/executor/hash_table.ts", "../@tensorflow/tfjs-converter/src/operations/executors/hash_table_executor.ts", "../@tensorflow/tfjs-converter/src/operations/executors/image_executor.ts", "../@tensorflow/tfjs-converter/src/operations/executors/logical_executor.ts", "../@tensorflow/tfjs-converter/src/operations/executors/matrices_executor.ts", "../@tensorflow/tfjs-converter/src/operations/executors/normalization_executor.ts", "../@tensorflow/tfjs-converter/src/operations/executors/reduction_executor.ts", "../@tensorflow/tfjs-converter/src/operations/executors/slice_join_executor.ts", "../@tensorflow/tfjs-converter/src/operations/executors/sparse_executor.ts", "../@tensorflow/tfjs-converter/src/operations/executors/spectral_executor.ts", "../@tensorflow/tfjs-converter/src/operations/executors/string_executor.ts", "../@tensorflow/tfjs-converter/src/operations/executors/transformation_executor.ts", "../@tensorflow/tfjs-converter/src/operations/operation_executor.ts", "../@tensorflow/tfjs-converter/src/executor/execution_context.ts", "../@tensorflow/tfjs-converter/src/executor/model_analysis.ts", "../@tensorflow/tfjs-converter/src/executor/graph_executor.ts", "../@tensorflow/tfjs-converter/src/executor/resource_manager.ts", "../@tensorflow/tfjs-converter/src/executor/graph_model.ts", "../@tensorflow/tfjs-converter/src/version.ts", "../@tensorflow/tfjs-converter/src/index.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\n/* tslint:disable */\n\n/** Properties of an Any. */\nexport declare interface IAny {\n  /** Any typeUrl */\n  typeUrl?: (string|null);\n\n  /** Any value */\n  value?: (Uint8Array|null);\n}\n\n/** DataType enum. */\nexport enum DataType {\n  'DT_INVALID' = 0,\n  'DT_FLOAT' = 1,\n  'DT_DOUBLE' = 2,\n  'DT_INT32' = 3,\n  'DT_UINT8' = 4,\n  'DT_INT16' = 5,\n  'DT_INT8' = 6,\n  'DT_STRING' = 7,\n  'DT_COMPLEX64' = 8,\n  'DT_INT64' = 9,\n  'DT_BOOL' = 10,\n  'DT_QINT8' = 11,\n  'DT_QUINT8' = 12,\n  'DT_QINT32' = 13,\n  'DT_BFLOAT16' = 14,\n  'DT_FLOAT_REF' = 101,\n  'DT_DOUBLE_REF' = 102,\n  'DT_INT32_REF' = 103,\n  'DT_UINT8_REF' = 104,\n  'DT_INT16_REF' = 105,\n  'DT_INT8_REF' = 106,\n  'DT_STRING_REF' = 107,\n  'DT_COMPLEX64_REF' = 108,\n  'DT_INT64_REF' = 109,\n  'DT_BOOL_REF' = 110,\n  'DT_QINT8_REF' = 111,\n  'DT_QUINT8_REF' = 112,\n  'DT_QINT32_REF' = 113,\n  'DT_BFLOAT16_REF' = 114\n}\n\n/** Properties of a TensorShape. */\nexport declare interface ITensorShape {\n  /** TensorShape dim */\n  dim?: (TensorShape.IDim[]|null);\n\n  /** TensorShape unknownRank */\n  unknownRank?: (boolean|null);\n}\n\nexport namespace TensorShape {\n  /** Properties of a Dim. */\n  export declare interface IDim {\n    /** Dim size */\n    size?: (number|string|null);\n\n    /** Dim name */\n    name?: (string|null);\n  }\n}\n\n/** Properties of a Tensor. */\nexport declare interface ITensor {\n  /** Tensor dtype */\n  dtype?: (DataType|null);\n\n  /** Tensor tensorShape */\n  tensorShape?: (ITensorShape|null);\n\n  /** Tensor versionNumber */\n  versionNumber?: (number|null);\n\n  /** Tensor tensorContent */\n  tensorContent?: (Uint8Array|null);\n\n  /** Tensor floatVal */\n  floatVal?: (number[]|null);\n\n  /** Tensor doubleVal */\n  doubleVal?: (number[]|null);\n\n  /** Tensor intVal */\n  intVal?: (number[]|null);\n\n  /** Tensor stringVal */\n  stringVal?: (Uint8Array[]|null);\n\n  /** Tensor scomplexVal */\n  scomplexVal?: (number[]|null);\n\n  /** Tensor int64Val */\n  int64Val?: ((number | string)[]|null);\n\n  /** Tensor boolVal */\n  boolVal?: (boolean[]|null);\n\n  /** Tensor uint32Val */\n  uint32Val?: (number[]|null);\n\n  /** Tensor uint64Val */\n  uint64Val?: ((number | string)[]|null);\n}\n\n/** Properties of an AttrValue. */\nexport declare interface IAttrValue {\n  /** AttrValue list */\n  list?: (AttrValue.IListValue|null);\n\n  /** AttrValue s */\n  s?: (string|null);\n\n  /** AttrValue i */\n  i?: (number|string|null);\n\n  /** AttrValue f */\n  f?: (number|null);\n\n  /** AttrValue b */\n  b?: (boolean|null);\n\n  /** AttrValue type */\n  type?: (DataType|null);\n\n  /** AttrValue shape */\n  shape?: (ITensorShape|null);\n\n  /** AttrValue tensor */\n  tensor?: (ITensor|null);\n\n  /** AttrValue placeholder */\n  placeholder?: (string|null);\n\n  /** AttrValue func */\n  func?: (INameAttrList|null);\n}\n\nexport namespace AttrValue {\n  /** Properties of a ListValue. */\n  export declare interface IListValue {\n    /** ListValue s */\n    s?: (string[]|null);\n\n    /** ListValue i */\n    i?: ((number | string)[]|null);\n\n    /** ListValue f */\n    f?: (number[]|null);\n\n    /** ListValue b */\n    b?: (boolean[]|null);\n\n    /** ListValue type */\n    type?: (DataType[]|null);\n\n    /** ListValue shape */\n    shape?: (ITensorShape[]|null);\n\n    /** ListValue tensor */\n    tensor?: (ITensor[]|null);\n\n    /** ListValue func */\n    func?: (INameAttrList[]|null);\n  }\n}\n\n/** Properties of a NameAttrList. */\nexport declare interface INameAttrList {\n  /** NameAttrList name */\n  name?: (string|null);\n\n  /** NameAttrList attr */\n  attr?: ({[k: string]: IAttrValue}|null);\n}\n\n/** Properties of a NodeDef. */\nexport declare interface INodeDef {\n  /** NodeDef name */\n  name?: (string|null);\n\n  /** NodeDef op */\n  op?: (string|null);\n\n  /** NodeDef input */\n  input?: (string[]|null);\n\n  /** NodeDef device */\n  device?: (string|null);\n\n  /** NodeDef attr */\n  attr?: ({[k: string]: IAttrValue}|null);\n}\n\n/** Properties of a VersionDef. */\nexport declare interface IVersionDef {\n  /** VersionDef producer */\n  producer?: (number|null);\n\n  /** VersionDef minConsumer */\n  minConsumer?: (number|null);\n\n  /** VersionDef badConsumers */\n  badConsumers?: (number[]|null);\n}\n\n/** Properties of a GraphDef. */\nexport declare interface IGraphDef {\n  /** GraphDef node */\n  node?: (INodeDef[]|null);\n\n  /** GraphDef versions */\n  versions?: (IVersionDef|null);\n\n  /** GraphDef library */\n  library?: (IFunctionDefLibrary|null);\n}\n\n/** Properties of a CollectionDef. */\nexport declare interface ICollectionDef {\n  /** CollectionDef nodeList */\n  nodeList?: (CollectionDef.INodeList|null);\n\n  /** CollectionDef bytesList */\n  bytesList?: (CollectionDef.IBytesList|null);\n\n  /** CollectionDef int64List */\n  int64List?: (CollectionDef.IInt64List|null);\n\n  /** CollectionDef floatList */\n  floatList?: (CollectionDef.IFloatList|null);\n\n  /** CollectionDef anyList */\n  anyList?: (CollectionDef.IAnyList|null);\n}\n\nexport namespace CollectionDef {\n  /** Properties of a NodeList. */\n  export declare interface INodeList {\n    /** NodeList value */\n    value?: (string[]|null);\n  }\n\n  /** Properties of a BytesList. */\n  export declare interface IBytesList {\n    /** BytesList value */\n    value?: (Uint8Array[]|null);\n  }\n\n  /** Properties of an Int64List. */\n  export declare interface IInt64List {\n    /** Int64List value */\n    value?: ((number | string)[]|null);\n  }\n\n  /** Properties of a FloatList. */\n  export declare interface IFloatList {\n    /** FloatList value */\n    value?: (number[]|null);\n  }\n\n  /** Properties of an AnyList. */\n  export declare interface IAnyList {\n    /** AnyList value */\n    value?: (IAny[]|null);\n  }\n}\n\n/** Properties of a SaverDef. */\nexport declare interface ISaverDef {\n  /** SaverDef filenameTensorName */\n  filenameTensorName?: (string|null);\n\n  /** SaverDef saveTensorName */\n  saveTensorName?: (string|null);\n\n  /** SaverDef restoreOpName */\n  restoreOpName?: (string|null);\n\n  /** SaverDef maxToKeep */\n  maxToKeep?: (number|null);\n\n  /** SaverDef sharded */\n  sharded?: (boolean|null);\n\n  /** SaverDef keepCheckpointEveryNHours */\n  keepCheckpointEveryNHours?: (number|null);\n\n  /** SaverDef version */\n  version?: (SaverDef.CheckpointFormatVersion|null);\n}\n\nexport namespace SaverDef {\n  /** CheckpointFormatVersion enum. */\n  export enum CheckpointFormatVersion {'LEGACY' = 0, 'V1' = 1, 'V2' = 2}\n}\n\n/** Properties of a TensorInfo. */\nexport declare interface ITensorInfo {\n  /** TensorInfo name */\n  name?: (string|null);\n\n  /** TensorInfo cooSparse */\n  cooSparse?: (TensorInfo.ICooSparse|null);\n\n  /** TensorInfo dtype */\n  dtype?: (DataType|null);\n\n  /** TensorInfo tensorShape */\n  tensorShape?: (ITensorShape|null);\n}\n\nexport namespace TensorInfo {\n  /** Properties of a CooSparse. */\n  export declare interface ICooSparse {\n    /** CooSparse valuesTensorName */\n    valuesTensorName?: (string|null);\n\n    /** CooSparse indicesTensorName */\n    indicesTensorName?: (string|null);\n\n    /** CooSparse denseShapeTensorName */\n    denseShapeTensorName?: (string|null);\n  }\n}\n\n/** Properties of a SignatureDef. */\nexport declare interface ISignatureDef {\n  /** SignatureDef inputs */\n  inputs?: ({[k: string]: ITensorInfo}|null);\n\n  /** SignatureDef outputs */\n  outputs?: ({[k: string]: ITensorInfo}|null);\n\n  /** SignatureDef methodName */\n  methodName?: (string|null);\n}\n\n/** Properties of an AssetFileDef. */\nexport declare interface IAssetFileDef {\n  /** AssetFileDef tensorInfo */\n  tensorInfo?: (ITensorInfo|null);\n\n  /** AssetFileDef filename */\n  filename?: (string|null);\n}\n\n/** Properties of an OpDef. */\nexport declare interface IOpDef {\n  /** OpDef name */\n  name?: (string|null);\n\n  /** OpDef inputArg */\n  inputArg?: (OpDef.IArgDef[]|null);\n\n  /** OpDef outputArg */\n  outputArg?: (OpDef.IArgDef[]|null);\n\n  /** OpDef attr */\n  attr?: (OpDef.IAttrDef[]|null);\n\n  /** OpDef deprecation */\n  deprecation?: (OpDef.IOpDeprecation|null);\n\n  /** OpDef summary */\n  summary?: (string|null);\n\n  /** OpDef description */\n  description?: (string|null);\n\n  /** OpDef isCommutative */\n  isCommutative?: (boolean|null);\n\n  /** OpDef isAggregate */\n  isAggregate?: (boolean|null);\n\n  /** OpDef isStateful */\n  isStateful?: (boolean|null);\n\n  /** OpDef allowsUninitializedInput */\n  allowsUninitializedInput?: (boolean|null);\n}\n\nexport namespace OpDef {\n  /** Properties of an ArgDef. */\n  export declare interface IArgDef {\n    /** ArgDef name */\n    name?: (string|null);\n\n    /** ArgDef description */\n    description?: (string|null);\n\n    /** ArgDef type */\n    type?: (DataType|null);\n\n    /** ArgDef typeAttr */\n    typeAttr?: (string|null);\n\n    /** ArgDef numberAttr */\n    numberAttr?: (string|null);\n\n    /** ArgDef typeListAttr */\n    typeListAttr?: (string|null);\n\n    /** ArgDef isRef */\n    isRef?: (boolean|null);\n  }\n\n  /** Properties of an AttrDef. */\n  export declare interface IAttrDef {\n    /** AttrDef name */\n    name?: (string|null);\n\n    /** AttrDef type */\n    type?: (string|null);\n\n    /** AttrDef defaultValue */\n    defaultValue?: (IAttrValue|null);\n\n    /** AttrDef description */\n    description?: (string|null);\n\n    /** AttrDef hasMinimum */\n    hasMinimum?: (boolean|null);\n\n    /** AttrDef minimum */\n    minimum?: (number|string|null);\n\n    /** AttrDef allowedValues */\n    allowedValues?: (IAttrValue|null);\n  }\n\n  /** Properties of an OpDeprecation. */\n  export declare interface IOpDeprecation {\n    /** OpDeprecation version */\n    version?: (number|null);\n\n    /** OpDeprecation explanation */\n    explanation?: (string|null);\n  }\n}\n\n/** Properties of an OpList. */\nexport declare interface IOpList {\n  /** OpList op */\n  op?: (IOpDef[]|null);\n}\n\n/** Properties of a MetaGraphDef. */\nexport declare interface IMetaGraphDef {\n  /** MetaGraphDef metaInfoDef */\n  metaInfoDef?: (MetaGraphDef.IMetaInfoDef|null);\n\n  /** MetaGraphDef graphDef */\n  graphDef?: (IGraphDef|null);\n\n  /** MetaGraphDef saverDef */\n  saverDef?: (ISaverDef|null);\n\n  /** MetaGraphDef collectionDef */\n  collectionDef?: ({[k: string]: ICollectionDef}|null);\n\n  /** MetaGraphDef signatureDef */\n  signatureDef?: ({[k: string]: ISignatureDef}|null);\n\n  /** MetaGraphDef assetFileDef */\n  assetFileDef?: (IAssetFileDef[]|null);\n}\n\nexport namespace MetaGraphDef {\n  /** Properties of a MetaInfoDef. */\n  export declare interface IMetaInfoDef {\n    /** MetaInfoDef metaGraphVersion */\n    metaGraphVersion?: (string|null);\n\n    /** MetaInfoDef strippedOpList */\n    strippedOpList?: (IOpList|null);\n\n    /** MetaInfoDef anyInfo */\n    anyInfo?: (IAny|null);\n\n    /** MetaInfoDef tags */\n    tags?: (string[]|null);\n\n    /** MetaInfoDef tensorflowVersion */\n    tensorflowVersion?: (string|null);\n\n    /** MetaInfoDef tensorflowGitVersion */\n    tensorflowGitVersion?: (string|null);\n  }\n}\n\n/** Properties of a SavedModel. */\nexport declare interface ISavedModel {\n  /** SavedModel savedModelSchemaVersion */\n  savedModelSchemaVersion?: (number|string|null);\n\n  /** SavedModel metaGraphs */\n  metaGraphs?: (IMetaGraphDef[]|null);\n}\n\n/** Properties of a FunctionDefLibrary. */\nexport declare interface IFunctionDefLibrary {\n  /** FunctionDefLibrary function */\n  'function'?: (IFunctionDef[]|null);\n\n  /** FunctionDefLibrary gradient */\n  gradient?: (IGradientDef[]|null);\n}\n\n/** Properties of a FunctionDef. */\nexport declare interface IFunctionDef {\n  /** FunctionDef signature */\n  signature?: (IOpDef|null);\n\n  /** FunctionDef attr */\n  attr?: ({[k: string]: IAttrValue}|null);\n\n  /** FunctionDef nodeDef */\n  nodeDef?: (INodeDef[]|null);\n\n  /** FunctionDef ret */\n  ret?: ({[k: string]: string}|null);\n}\n\n/** Properties of a GradientDef. */\nexport declare interface IGradientDef {\n  /** GradientDef functionName */\n  functionName?: (string|null);\n\n  /** GradientDef gradientFunc */\n  gradientFunc?: (string|null);\n}\n", "\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpExecutor, OpMapper} from '../types';\n\nconst CUSTOM_OPS: {[key: string]: OpMapper} = {};\n\n/**\n * Register an Op for graph model executor. This allow you to register\n * TensorFlow custom op or override existing op.\n *\n * Here is an example of registering a new MatMul Op.\n * ```js\n * const customMatmul = (node) =>\n *    tf.matMul(\n *        node.inputs[0], node.inputs[1],\n *        node.attrs['transpose_a'], node.attrs['transpose_b']);\n *\n * tf.registerOp('MatMul', customMatmul);\n * ```\n * The inputs and attrs of the node object is based on the TensorFlow op\n * registry.\n *\n * @param name The Tensorflow Op name.\n * @param opFunc An op function which is called with the current graph node\n * during execution and needs to return a tensor or a list of tensors. The node\n * has the following attributes:\n *    - attr: A map from attribute name to its value\n *    - inputs: A list of input tensors\n *\n * @doc {heading: 'Models', subheading: 'Op Registry'}\n */\nexport function registerOp(name: string, opFunc: OpExecutor) {\n  const opMapper: OpMapper = {\n    tfOpName: name,\n    category: 'custom',\n    inputs: [],\n    attrs: [],\n    customExecutor: opFunc\n  };\n\n  CUSTOM_OPS[name] = opMapper;\n}\n\n/**\n * Retrieve the OpMapper object for the registered op.\n *\n * @param name The Tensorflow Op name.\n *\n * @doc {heading: 'Models', subheading: 'Op Registry'}\n */\nexport function getRegisteredOp(name: string): OpMapper {\n  return CUSTOM_OPS[name];\n}\n\n/**\n * Deregister the Op for graph model executor.\n *\n * @param name The Tensorflow Op name.\n *\n * @doc {heading: 'Models', subheading: 'Op Registry'}\n */\nexport function deregisterOp(name: string) {\n  delete CUSTOM_OPS[name];\n}\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {clone, Tensor, util} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {ResourceManager} from '../../executor/resource_manager';\nimport {Node, ValueType} from '../types';\n\nexport function getParamValue(\n    paramName: string, node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext, resourceManager?: ResourceManager): ValueType {\n  const inputParam = node.inputParams[paramName];\n  if (inputParam && inputParam.inputIndexStart !== undefined) {\n    const start = inputParam.inputIndexStart;\n    const end = inputParam.inputIndexEnd === 0 ?\n        undefined :\n        (inputParam.inputIndexEnd === undefined ? start + 1 :\n                                                  inputParam.inputIndexEnd);\n    if (inputParam.type === 'tensor') {\n      return getTensor(\n          node.inputNames[inputParam.inputIndexStart], tensorMap, context,\n          resourceManager);\n    }\n    if (inputParam.type === 'tensors') {\n      const inputs = node.inputNames.slice(start, end);\n\n      return inputs.map(\n          name => getTensor(name, tensorMap, context, resourceManager));\n    }\n    const tensor = getTensor(\n        node.inputNames.slice(start)[0], tensorMap, context, resourceManager);\n    const data = tensor.dataSync();\n    return inputParam.type === 'number' ?\n        data[0] :\n        util.toNestedArray(tensor.shape, data);\n  }\n  const attrParam = node.attrParams[paramName];\n  return attrParam && attrParam.value;\n}\n\n/**\n * Retrieve the tensor from tensorsMap based on input name.\n * @param name Node input name\n * @param tensorsMap Tensors map keyed by the node\n * @param context contains tensors and information for running the current node.\n * @param resourceManager Optional. Contains global resources of the model.\n */\nexport function getTensor(\n    name: string, tensorsMap: NamedTensorsMap, context: ExecutionContext,\n    resourceManager?: ResourceManager): Tensor {\n  const [nodeName, index] = parseNodeName(name);\n\n  if (resourceManager != null) {\n    const tensor = resourceManager.getHashTableHandleByName(nodeName);\n    if (tensor != null) {\n      return tensor;\n    }\n  }\n\n  const contextId = context.currentContextIds.find(contextId => {\n    return !!tensorsMap[getNodeNameWithContextId(nodeName, contextId)];\n  });\n\n  return contextId !== undefined ?\n      tensorsMap[getNodeNameWithContextId(nodeName, contextId)][index] :\n      undefined;\n}\n\n/**\n * Retrieve the tensors based on input name for current context.\n * @param name Node input name\n * @param tensorsMap Tensors map keyed by the node\n */\nexport function getTensorsForCurrentContenxt(\n    name: string, tensorsMap: NamedTensorsMap,\n    context: ExecutionContext): Tensor[] {\n  return tensorsMap[getNodeNameWithContextId(name, context.currentContextId)];\n}\n\n/**\n * Returns the node name, outputName and index from the Node input name.\n * @param inputName The input name of the node, in format of\n * node_name:output_index, i.e. MatMul:0, if the output_index is not set, it is\n * default to 0.\n * If the input name contains output name i.e. StringSplit:indices:0, it will\n * return ['StringSplit', 0, 'indices'].\n */\nexport function getNodeNameAndIndex(\n    inputName: string, context?: ExecutionContext): [string, number, string] {\n  const [nodeName, index, outputName] = parseNodeName(inputName);\n\n  return [\n    getNodeNameWithContextId(nodeName, context && context.currentContextId),\n    index, outputName\n  ];\n}\n\nfunction getNodeNameWithContextId(name: string, contextId?: string): string {\n  return !!contextId ? `${name}-${contextId}` : name;\n}\n\nexport function parseNodeName(name: string): [string, number, string] {\n  const parts = name.split(':');\n  if (parts.length === 1) {\n    return [name, 0, undefined];\n  }\n\n  const nodeName = parts[0];\n  const outputName = parts.length === 3 ? parts[1] : undefined;\n  const index = Number(parts[parts.length - 1]);\n  return [nodeName, index, outputName];\n}\n\nexport function split(arr: number[], size: number) {\n  const res = [];\n  for (let i = 0; i < arr.length; i += size) {\n    res.push(arr.slice(i, i + size));\n  }\n  return res;\n}\nexport function getPadding(\n    node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext): ValueType {\n  let pad = getParamValue('pad', node, tensorMap, context);\n  if (pad === 'explicit') {\n    // This is 1d array, we need to convert it to 2d array\n    pad = getParamValue('explicitPaddings', node, tensorMap, context);\n    const explicitPadding: [\n      [number, number], [number, number], [number, number], [number, number]\n    ] = [[0, 0], [0, 0], [0, 0], [0, 0]];\n    for (let i = 0; i < 4; i++) {\n      explicitPadding[i][0] = (pad as number[])[i * 2];\n      explicitPadding[i][1] = (pad as number[])[i * 2 + 1];\n    }\n    return explicitPadding;\n  }\n  return pad;\n}\n\n/**\n *  Reuse the tensor if it is marked as keep, otherwise clone the tensor to\n *  avoid disposal. This is important for TensorArray and TensorList ops, since\n *  internally they use a tensor as the id for TensorArray and TensorList, and\n * to simplify lookup, they also use Tensor.id as the key to the internal map.\n * These id tensors have been marked as kept in the backend, we need avoid clone\n * them in order to create new Tensor.id.\n * @param tensor\n */\nexport function cloneTensor(tensor: Tensor): Tensor {\n  return tensor.kept ? tensor : clone(tensor);\n}\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Add',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'AddV2',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'AddN',\n    'category': 'arithmetic',\n    'inputs': [{'start': 0, 'end': 0, 'name': 'tensors', 'type': 'tensors'}]\n  },\n  {\n    'tfOpName': 'BiasAdd',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Sub',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'RealDiv',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Div',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'DivNoNan',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'FloorDiv',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Mul',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Maximum',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'}\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Minimum',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'}\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Pow',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'SquaredDifference',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Mod',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'FloorMod',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'T',\n      'name': 'dtype',\n      'type': 'dtype',\n      'notSupported': true\n    }]\n  }\n];\n", "import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Abs',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Acos',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Asin',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Atan',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Atan2',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'y', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Ceil',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'ClipByValue',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'clipValueMin', 'type': 'number'},\n      {'start': 2, 'name': 'clipValueMax', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Complex',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'real', 'type': 'tensor'},\n      {'start': 1, 'name': 'imag', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'ComplexAbs',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Cos',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Cosh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Elu',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Exp',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Floor',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Log',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Imag',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'Tout',\n        'name': 'outputType',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Neg',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Real',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'Tout',\n        'name': 'outputType',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Prelu',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'alpha', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Relu',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Relu6',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Selu',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sigmoid',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sin',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sinh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sqrt',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Rsqrt',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Square',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Tan',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Tanh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sign',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Round',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Expm1',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Log1p',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Reciprocal',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Softplus',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Asinh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Acosh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Atanh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Erf',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Prod',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axes', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'keep_dims',\n        'name': 'keepDims',\n        'type': 'bool',\n        'notSupported': true\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'LeakyRelu',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'alpha',\n        'name': 'alpha',\n        'type': 'number',\n        'defaultValue': 0.2\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'IsNan',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'T',\n      'name': 'dtype',\n      'type': 'dtype',\n      'notSupported': true\n    }]\n  }\n];\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'EmptyTensorList',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'elementShape', 'type': 'shape'},\n      {'start': 1, 'name': 'maxNumElements', 'type': 'number'},\n    ],\n    'attrs':\n        [{'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'LoopCond',\n    'category': 'control',\n    'inputs': [{'start': 0, 'name': 'pred', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'Switch',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'data', 'type': 'tensor'},\n      {'start': 1, 'name': 'pred', 'type': 'tensor'}\n    ]\n  },\n  {\n    'tfOpName': 'Merge',\n    'category': 'control',\n    'inputs': [{'start': 0, 'end': 0, 'name': 'tensors', 'type': 'tensors'}]\n  },\n  {\n    'tfOpName': 'Enter',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true},\n      {'tfName': 'frame_name', 'name': 'frameName', 'type': 'string'},\n      {'tfName': 'is_constant', 'name': 'isConstant', 'type': 'bool'}\n    ]\n  },\n  {\n    'tfOpName': 'Exit',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'NextIteration',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'size', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'},\n      {'tfName': 'element_shape', 'name': 'elementShape', 'type': 'shape'},\n      {'tfName': 'dynamic_size', 'name': 'dynamicSize', 'type': 'bool'},\n      {'tfName': 'clear_after_read', 'name': 'clearAfterRead', 'type': 'bool'},\n      {\n        'tfName': 'identical_element_shapes',\n        'name': 'identicalElementShapes',\n        'type': 'bool'\n      },\n      {'tfName': 'tensor_array_name', 'name': 'name', 'type': 'string'}\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayWriteV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'tensor'},\n      {'start': 1, 'name': 'index', 'type': 'number'},\n      {'start': 2, 'name': 'tensor', 'type': 'tensor'},\n      {'start': 3, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayReadV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'tensor'},\n      {'start': 1, 'name': 'index', 'type': 'number'},\n      {'start': 2, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [{\n      'tfName': 'dtype',\n      'name': 'dtype',\n      'type': 'dtype',\n      'notSupported': true\n    }]\n  },\n  {\n    'tfOpName': 'TensorArrayGatherV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'tensor'},\n      {'start': 1, 'name': 'indices', 'type': 'number[]'},\n      {'start': 2, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'},\n      {'tfName': 'element_shape', 'name': 'elementShape', 'type': 'shape'}\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayScatterV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'tensor'},\n      {'start': 1, 'name': 'indices', 'type': 'number[]'},\n      {'start': 2, 'name': 'tensor', 'type': 'tensor'},\n      {'start': 3, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorArrayConcatV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'tensor'},\n      {'start': 1, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'}, {\n        'tfName': 'element_shape_except0',\n        'name': 'elementShapeExcept0',\n        'type': 'shape',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'TensorArraySplitV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'tensor'},\n      {'start': 1, 'name': 'tensor', 'type': 'tensor'},\n      {'start': 2, 'name': 'lengths', 'type': 'number[]'},\n      {'start': 3, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorArraySizeV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'tensor'},\n      {'start': 1, 'name': 'flowIn', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayCloseV3',\n    'category': 'control',\n    'inputs': [{'start': 0, 'name': 'tensorArrayId', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'StatelessIf',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'cond', 'type': 'tensor'},\n      {'start': 1, 'end': 0, 'name': 'args', 'type': 'tensors'}\n    ],\n    'attrs': [\n      {'tfName': 'then_branch', 'name': 'thenBranch', 'type': 'func'},\n      {'tfName': 'else_branch', 'name': 'elseBranch', 'type': 'func'}\n    ]\n  },\n  {\n    'tfOpName': 'If',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'cond', 'type': 'tensor'},\n      {'start': 1, 'end': 0, 'name': 'args', 'type': 'tensors'}\n    ],\n    'attrs': [\n      {'tfName': 'then_branch', 'name': 'thenBranch', 'type': 'func'},\n      {'tfName': 'else_branch', 'name': 'elseBranch', 'type': 'func'}\n    ]\n  },\n  {\n    'tfOpName': 'StatelessWhile',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'end': 0, 'name': 'args', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'cond', 'name': 'cond', 'type': 'func'},\n      {'tfName': 'body', 'name': 'body', 'type': 'func'}\n    ]\n  },\n  {\n    'tfOpName': 'While',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'end': 0, 'name': 'args', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'cond', 'name': 'cond', 'type': 'func'},\n      {'tfName': 'body', 'name': 'body', 'type': 'func'}\n    ]\n  },\n  {\n    'tfOpName': 'TensorListScatter',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n      {'start': 1, 'name': 'indices', 'type': 'number[]'},\n      {'start': 2, 'name': 'elementShape', 'type': 'shape'}\n    ],\n    'attrs':\n        [{'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorListScatterV2',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n      {'start': 1, 'name': 'indices', 'type': 'number[]'},\n      {'start': 2, 'name': 'elementShape', 'type': 'shape'},\n      {'start': 3, 'name': 'numElements', 'type': 'number'},\n    ],\n    'attrs':\n        [{'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorListGather',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorListId', 'type': 'tensor'},\n      {'start': 1, 'name': 'indices', 'type': 'number[]'},\n      {'start': 2, 'name': 'elementShape', 'type': 'shape'},\n    ],\n    'attrs':\n        [{'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorListGetItem',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorListId', 'type': 'tensor'},\n      {'start': 1, 'name': 'index', 'type': 'number'},\n      {'start': 2, 'name': 'elementShape', 'type': 'shape'},\n    ],\n    'attrs':\n        [{'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorListSetItem',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorListId', 'type': 'tensor'},\n      {'start': 1, 'name': 'index', 'type': 'number'},\n      {'start': 2, 'name': 'tensor', 'type': 'tensor'},\n    ],\n    'attrs':\n        [{'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorListReserve',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'elementShape', 'type': 'shape'},\n      {'start': 1, 'name': 'numElements', 'type': 'number'},\n    ],\n    'attrs':\n        [{'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorListFromTensor',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n      {'start': 1, 'name': 'elementShape', 'type': 'shape'}\n    ],\n    'attrs':\n        [{'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorListStack',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorListId', 'type': 'tensor'},\n      {'start': 1, 'name': 'elementShape', 'type': 'shape'},\n    ],\n    'attrs': [\n      {'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'},\n      {'tfName': 'num_elements', 'name': 'numElements', 'type': 'dtype'}\n    ]\n  },\n  {\n    'tfOpName': 'TensorListSplit',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n      {'start': 1, 'name': 'elementShape', 'type': 'shape'},\n      {'start': 2, 'name': 'lengths', 'type': 'number[]'},\n    ],\n    'attrs':\n        [{'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorListConcat',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorListId', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'element_shape', 'name': 'elementShape', 'type': 'shape'},\n      {'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'}\n    ]\n  },\n  {\n    'tfOpName': 'TensorListPopBack',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorListId', 'type': 'tensor'},\n      {'start': 1, 'name': 'elementShape', 'type': 'shape'},\n    ],\n    'attrs':\n        [{'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorListPushBack',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorListId', 'type': 'tensor'},\n      {'start': 1, 'name': 'tensor', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'}\n    ]\n  }\n];\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'AvgPool',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      },\n      {'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'MaxPool',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      },\n      {'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]'}, {\n        'tfName': 'explicit_paddings',\n        'name': 'explicitPaddings',\n        'type': 'number[]',\n        'defaultValue': [],\n        'notSupported': true\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'MaxPoolWithArgmax',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'},\n      {'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]'}, {\n        'tfName': 'include_batch_in_index',\n        'name': 'includeBatchInIndex',\n        'type': 'bool'\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'AvgPool3D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      },\n      {'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'MaxPool3D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      },\n      {'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Conv1D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'stride', 'name': 'stride', 'type': 'number'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NWC'\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'dilation',\n        'name': 'dilation',\n        'type': 'number',\n        'defaultValue': 1\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Conv2D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true},\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'},\n      {'tfName': 'useCudnnOnGpu', 'name': 'useCudnnOnGpu', 'type': 'bool'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {\n        'tfName': 'explicit_paddings',\n        'name': 'explicitPaddings',\n        'type': 'number[]',\n        'defaultValue': []\n      },\n      {'tfName': 'dilations', 'name': 'dilations', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': '_FusedConv2D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n      {'start': 2, end: 0, 'name': 'args', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'num_args', 'name': 'numArgs', 'type': 'number'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true},\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'explicit_paddings',\n        'name': 'explicitPaddings',\n        'type': 'number[]',\n        'defaultValue': []\n      },\n      {\n        'tfName': 'use_cudnn_on_gpu',\n        'name': 'useCudnnOnGpu',\n        'type': 'bool',\n        'defaultValue': true\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {\n        'tfName': 'dilations',\n        'name': 'dilations',\n        'type': 'number[]',\n        'defaultValue': [1, 1, 1, 1]\n      },\n      {\n        'tfName': 'fused_ops',\n        'name': 'fusedOps',\n        'type': 'string[]',\n        'defaultValue': []\n      },\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.0001\n      },\n      {\n        'tfName': 'leakyrelu_alpha',\n        'name': 'leakyreluAlpha',\n        'type': 'number'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Conv2DBackpropInput',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 2, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n      {'start': 0, 'name': 'outputShape', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      },\n      {\n        'tfName': 'explicit_paddings',\n        'name': 'explicitPaddings',\n        'type': 'number[]',\n        'defaultValue': []\n      },\n      {\n        'tfName': 'dilations',\n        'name': 'dilations',\n        'type': 'number[]',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'DepthwiseConv2d',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'input', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {\n        'tfName': 'explicit_paddings',\n        'name': 'explicitPaddings',\n        'type': 'number[]',\n        'defaultValue': []\n      },\n      {'tfName': 'dilations', 'name': 'dilations', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'DepthwiseConv2dNative',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'input', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {\n        'tfName': 'explicit_paddings',\n        'name': 'explicitPaddings',\n        'type': 'number[]',\n        'defaultValue': []\n      },\n      {'tfName': 'dilations', 'name': 'dilations', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'FusedDepthwiseConv2dNative',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n      {'start': 2, end: 0, 'name': 'args', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'num_args', 'name': 'numArgs', 'type': 'number'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true},\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {\n        'tfName': 'dilations',\n        'name': 'dilations',\n        'type': 'number[]',\n        'defaultValue': [1, 1, 1, 1]\n      },\n      {\n        'tfName': 'fused_ops',\n        'name': 'fusedOps',\n        'type': 'string[]',\n        'defaultValue': []\n      },\n      {\n        'tfName': 'explicit_paddings',\n        'name': 'explicitPaddings',\n        'type': 'number[]',\n        'defaultValue': []\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Conv3D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {'tfName': 'dilations', 'name': 'dilations', 'type': 'number[]'}\n    ],\n  },\n  {\n    'tfOpName': 'Dilation2D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'rates', 'name': 'dilations', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}\n    ]\n  }\n];\n", "import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Fill',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'shape', 'type': 'number[]'},\n      {'start': 1, 'name': 'value', 'type': 'number'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'LinSpace',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'start', 'type': 'number'},\n      {'start': 1, 'name': 'stop', 'type': 'number'},\n      {'start': 2, 'name': 'num', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'OneHot',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'indices', 'type': 'tensor'},\n      {'start': 1, 'name': 'depth', 'type': 'number'},\n      {'start': 2, 'name': 'onValue', 'type': 'number', 'defaultValue': 1},\n      {'start': 3, 'name': 'offValue', 'type': 'number', 'defaultValue': 0},\n    ],\n    'attrs': [\n      {\n        'tfName': 'axis',\n        'name': 'axis',\n        'type': 'number',\n        'notSupported': true\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Ones',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'shape', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'OnesLike',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [{'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'RandomUniform',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'shape', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'minval',\n        'name': 'minval',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'maxval',\n        'name': 'maxval',\n        'type': 'number',\n        'defaultValue': 1\n      },\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'},\n      {'tfName': 'seed', 'name': 'seed', 'type': 'number', 'defaultValue': 0}, {\n        'tfName': 'seed2',\n        'name': 'seed2',\n        'type': 'number',\n        'defaultValue': 0,\n        'notSupported': true\n      },\n      {'tfName': 'T', 'name': 'T', 'type': 'number', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Range',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'start', 'type': 'number'},\n      {'start': 1, 'name': 'stop', 'type': 'number'},\n      {'start': 2, 'name': 'step', 'type': 'number', 'defaultValue': 0},\n    ],\n    'attrs': [{'tfName': 'Tidx', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TruncatedNormal',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'shape', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'means',\n        'name': 'mean',\n        'type': 'number',\n        'defaultValue': 0.0\n      },\n      {\n        'tfName': 'stddev',\n        'name': 'stdDev',\n        'type': 'number',\n        'defaultValue': 1.0\n      },\n      {'tfName': 'seed', 'name': 'seed', 'type': 'number'}, {\n        'tfName': 'seed2',\n        'name': 'seed2',\n        'type': 'number',\n        'defaultValue': 0,\n        'notSupported': true\n      },\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'},\n      {'tfName': 'T', 'name': 'T', 'type': 'number', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Zeros',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'shape', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'ZerosLike',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'Multinomial',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'logits', 'type': 'tensor'},\n      {'start': 1, 'name': 'numSamples', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'seed', 'name': 'seed', 'type': 'number'},\n      {'tfName': 'seed2', 'name': 'seed2', 'type': 'number'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype'},\n      {'tfName': 'output_dtype', 'name': 'output_dtype', 'type': 'dtype'}\n    ]\n  }\n];\n", "import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'NonMaxSuppressionV2',\n    'category': 'dynamic',\n    'inputs': [\n      {'start': 0, 'name': 'boxes', 'type': 'tensor'},\n      {'start': 1, 'name': 'scores', 'type': 'tensor'},\n      {'start': 2, 'name': 'maxOutputSize', 'type': 'number'},\n      {'start': 3, 'name': 'iouThreshold', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'NonMaxSuppressionV3',\n    'category': 'dynamic',\n    'inputs': [\n      {'start': 0, 'name': 'boxes', 'type': 'tensor'},\n      {'start': 1, 'name': 'scores', 'type': 'tensor'},\n      {'start': 2, 'name': 'maxOutputSize', 'type': 'number'},\n      {'start': 3, 'name': 'iouThreshold', 'type': 'number'},\n      {'start': 4, 'name': 'scoreThreshold', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'NonMaxSuppressionV4',\n    'category': 'dynamic',\n    'inputs': [\n      {'start': 0, 'name': 'boxes', 'type': 'tensor'},\n      {'start': 1, 'name': 'scores', 'type': 'tensor'},\n      {'start': 2, 'name': 'maxOutputSize', 'type': 'number'},\n      {'start': 3, 'name': 'iouThreshold', 'type': 'number'},\n      {'start': 4, 'name': 'scoreThreshold', 'type': 'number'}\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'T_threshold',\n        'name': 'threshold',\n        'type': 'dtype',\n        'notSupported': true\n      },\n      {\n        'tfName': 'pad_to_max_output_size',\n        'name': 'padToMaxOutputSize',\n        'type': 'bool'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'NonMaxSuppressionV5',\n    'category': 'dynamic',\n    'inputs': [\n      {'start': 0, 'name': 'boxes', 'type': 'tensor'},\n      {'start': 1, 'name': 'scores', 'type': 'tensor'},\n      {'start': 2, 'name': 'maxOutputSize', 'type': 'number'},\n      {'start': 3, 'name': 'iouThreshold', 'type': 'number'},\n      {'start': 4, 'name': 'scoreThreshold', 'type': 'number'},\n      {'start': 5, 'name': 'softNmsSigma', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'Where',\n    'category': 'dynamic',\n    'inputs': [\n      {'start': 0, 'name': 'condition', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'ListDiff',\n    'category': 'dynamic',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'y', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'T',\n      'name': 'dtype',\n      'type': 'dtype',\n      'notSupported': true\n    }]\n  }\n];\n", "import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'TopKV2',\n    'category': 'evaluation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'k', 'type': 'number'},\n    ],\n    'attrs': [{'tfName': 'sorted', 'name': 'sorted', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'Unique',\n    'category': 'evaluation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n  },\n  {\n    'tfOpName': 'UniqueV2',\n    'category': 'evaluation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number'},\n    ],\n  },\n];\n", "import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'PlaceholderWithDefault',\n    'category': 'graph',\n    'inputs': [\n      {'start': 0, 'name': 'default', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'shape', 'name': 'shape', 'type': 'shape'},\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'}\n    ]\n  },\n  {\n    'tfOpName': 'Placeholder',\n    'category': 'graph',\n    'attrs': [\n      {'tfName': 'shape', 'name': 'shape', 'type': 'shape'},\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'}\n    ]\n  },\n  {'tfOpName': 'Const', 'category': 'graph'}, {\n    'tfOpName': 'Identity',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'IdentityN',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'end': 0, 'name': 'x', 'type': 'tensors'}]\n  },\n  {\n    'tfOpName': 'Snapshot',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'Rank',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'Size',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'Shape',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'ShapeN',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'end': 0, 'name': 'x', 'type': 'tensors'}]\n  },\n  {\n    'tfOpName': 'Print',\n    'category': 'graph',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'data', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'message', 'name': 'message', 'type': 'string'}, {\n        'tfName': 'first_n',\n        'name': 'firstN',\n        'type': 'number',\n        'notSupported': true\n      },\n      {\n        'tfName': 'summarize',\n        'name': 'summarize',\n        'type': 'number',\n        'defaultValue': 3\n      }\n    ]\n  },\n  {'tfOpName': 'NoOp', 'category': 'graph', 'inputs': []}, {\n    'tfOpName': 'StopGradient',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'FakeQuantWithMinMaxVars',\n    'category': 'graph',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'min', 'name': 'min', 'type': 'number'},\n      {'tfName': 'max', 'name': 'max', 'type': 'number'}\n    ]\n  }\n];\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'HashTable',\n    'category': 'hash_table',\n    'inputs': [],\n    'attrs': [\n      {'tfName': 'shared_name', 'name': 'sharedName', 'type': 'string'},\n      {\n        'tfName': 'use_node_name_sharing',\n        'name': 'useNodeNameSharing',\n        'type': 'bool'\n      },\n      {'tfName': 'key_dtype', 'name': 'keyDType', 'type': 'dtype'},\n      {'tfName': 'value_dtype', 'name': 'valueDType', 'type': 'dtype'},\n    ]\n  },\n  {\n    'tfOpName': 'HashTableV2',\n    'category': 'hash_table',\n    'inputs': [],\n    'attrs': [\n      {'tfName': 'shared_name', 'name': 'sharedName', 'type': 'string'},\n      {\n        'tfName': 'use_node_name_sharing',\n        'name': 'useNodeNameSharing',\n        'type': 'bool'\n      },\n      {'tfName': 'key_dtype', 'name': 'keyDType', 'type': 'dtype'},\n      {'tfName': 'value_dtype', 'name': 'valueDType', 'type': 'dtype'},\n    ]\n  },\n  {\n    'tfOpName': 'LookupTableImport',\n    'category': 'hash_table',\n    'inputs': [\n      {'start': 0, 'name': 'tableHandle', 'type': 'tensor'},\n      {'start': 1, 'name': 'keys', 'type': 'tensor'},\n      {'start': 2, 'name': 'values', 'type': 'tensor'}\n    ],\n    'attrs': [\n      {'tfName': 'Tin', 'name': 'tIn', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'Tout',\n        'name': 'tOut',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'LookupTableImportV2',\n    'category': 'hash_table',\n    'inputs': [\n      {'start': 0, 'name': 'tableHandle', 'type': 'tensor'},\n      {'start': 1, 'name': 'keys', 'type': 'tensor'},\n      {'start': 2, 'name': 'values', 'type': 'tensor'}\n    ],\n    'attrs': [\n      {'tfName': 'Tin', 'name': 'tIn', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'Tout',\n        'name': 'tOut',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'LookupTableFind',\n    'category': 'hash_table',\n    'inputs': [\n      {'start': 0, 'name': 'tableHandle', 'type': 'tensor'},\n      {'start': 1, 'name': 'keys', 'type': 'tensor'},\n      {'start': 2, 'name': 'defaultValue', 'type': 'tensor'}\n    ],\n    'attrs': [\n      {'tfName': 'Tin', 'name': 'tIn', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'Tout',\n        'name': 'tOut',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'LookupTableFindV2',\n    'category': 'hash_table',\n    'inputs': [\n      {'start': 0, 'name': 'tableHandle', 'type': 'tensor'},\n      {'start': 1, 'name': 'keys', 'type': 'tensor'},\n      {'start': 2, 'name': 'defaultValue', 'type': 'tensor'}\n    ],\n    'attrs': [\n      {'tfName': 'Tin', 'name': 'tIn', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'Tout',\n        'name': 'tOut',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'LookupTableSize',\n    'category': 'hash_table',\n    'inputs': [\n      {'start': 0, 'name': 'tableHandle', 'type': 'tensor'}\n    ]\n  },\n  {\n    'tfOpName': 'LookupTableSizeV2',\n    'category': 'hash_table',\n    'inputs': [\n      {'start': 0, 'name': 'tableHandle', 'type': 'tensor'}\n    ]\n  }\n];\n", "import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'ResizeBilinear',\n    'category': 'image',\n    'inputs': [\n      {'start': 0, 'name': 'images', 'type': 'tensor'},\n      {'start': 1, 'name': 'size', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {'tfName': 'align_corners', 'name': 'alignCorners', 'type': 'bool'}, {\n        'tfName': 'half_pixel_centers',\n        'name': 'halfPixelCenters',\n        'type': 'bool'\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'ResizeNearestNeighbor',\n    'category': 'image',\n    'inputs': [\n      {'start': 0, 'name': 'images', 'type': 'tensor'},\n      {'start': 1, 'name': 'size', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {'tfName': 'align_corners', 'name': 'alignCorners', 'type': 'bool'}, {\n        'tfName': 'half_pixel_centers',\n        'name': 'halfPixelCenters',\n        'type': 'bool'\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'CropAndResize',\n    'category': 'image',\n    'inputs': [\n      {'start': 0, 'name': 'image', 'type': 'tensor'},\n      {'start': 1, 'name': 'boxes', 'type': 'tensor'},\n      {'start': 2, 'name': 'boxInd', 'type': 'tensor'},\n      {'start': 3, 'name': 'cropSize', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {'tfName': 'method', 'name': 'method', 'type': 'string'}, {\n        'tfName': 'extrapolation_value',\n        'name': 'extrapolationValue',\n        'type': 'number'\n      }\n    ]\n  }\n];\n", "import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Equal',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'NotEqual',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Greater',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'GreaterEqual',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Less',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'LessEqual',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'LogicalAnd',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'LogicalNot',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'LogicalOr',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Select',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'condition', 'type': 'tensor'},\n      {'start': 1, 'name': 'a', 'type': 'tensor'},\n      {'start': 2, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'SelectV2',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'condition', 'type': 'tensor'},\n      {'start': 1, 'name': 'a', 'type': 'tensor'},\n      {'start': 2, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'T',\n      'name': 'dtype',\n      'type': 'dtype',\n      'notSupported': true\n    }]\n  }\n];\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': '_FusedMatMul',\n    'category': 'matrices',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n      {'start': 2, end: 0, 'name': 'args', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'num_args', 'name': 'numArgs', 'type': 'number'}, {\n        'tfName': 'fused_ops',\n        'name': 'fusedOps',\n        'type': 'string[]',\n        'defaultValue': []\n      },\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.0001\n      },\n      {\n        'tfName': 'transpose_a',\n        'name': 'transposeA',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {\n        'tfName': 'transpose_b',\n        'name': 'transposeB',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'MatMul',\n    'category': 'matrices',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'transpose_a',\n        'name': 'transposeA',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {\n        'tfName': 'transpose_b',\n        'name': 'transposeB',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'BatchMatMul',\n    'category': 'matrices',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'adj_x',\n        'name': 'transposeA',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {\n        'tfName': 'adj_y',\n        'name': 'transposeB',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'BatchMatMulV2',\n    'category': 'matrices',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'adj_x',\n        'name': 'transposeA',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {\n        'tfName': 'adj_y',\n        'name': 'transposeB',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Transpose',\n    'category': 'matrices',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'perm', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Einsum',\n    'category': 'matrices',\n    'inputs': [{'start': 0, 'end': 0, 'name': 'tensors', 'type': 'tensors'}],\n    'attrs': [\n      {'tfName': 'equation', 'name': 'equation', 'type': 'string'},\n      {'tfName': 'N', 'name': 'n', 'type': 'number', 'defaultValue': 2},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}\n    ]\n  }\n];\n", "import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'FusedBatchNorm',\n    'category': 'normalization',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'scale', 'type': 'tensor'},\n      {'start': 2, 'name': 'offset', 'type': 'tensor'},\n      {'start': 3, 'name': 'mean', 'type': 'tensor'},\n      {'start': 4, 'name': 'variance', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.001\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'FusedBatchNormV2',\n    'category': 'normalization',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'scale', 'type': 'tensor'},\n      {'start': 2, 'name': 'offset', 'type': 'tensor'},\n      {'start': 3, 'name': 'mean', 'type': 'tensor'},\n      {'start': 4, 'name': 'variance', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.001\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'FusedBatchNormV3',\n    'category': 'normalization',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'scale', 'type': 'tensor'},\n      {'start': 2, 'name': 'offset', 'type': 'tensor'},\n      {'start': 3, 'name': 'mean', 'type': 'tensor'},\n      {'start': 4, 'name': 'variance', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.001\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'LRN',\n    'category': 'normalization',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'depth_radius',\n        'name': 'radius',\n        'type': 'number',\n        'defaultValue': 5\n      },\n      {'tfName': 'bias', 'name': 'bias', 'type': 'number', 'defaultValue': 1.0},\n      {\n        'tfName': 'alpha',\n        'name': 'alpha',\n        'type': 'number',\n        'defaultValue': 1.0\n      },\n      {\n        'tfName': 'beta',\n        'name': 'beta',\n        'type': 'number',\n        'defaultValue': 0.5\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Softmax',\n    'category': 'normalization',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'LogSoftmax',\n    'category': 'normalization',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'SparseToDense',\n    'category': 'normalization',\n    'inputs': [\n      {'start': 0, 'name': 'sparseIndices', 'type': 'tensor'},\n      {'start': 1, 'name': 'outputShape', 'type': 'number[]'},\n      {'start': 2, 'name': 'sparseValues', 'type': 'tensor'},\n      {'start': 3, 'name': 'defaultValue', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'validate_indices',\n      'name': 'validateIndices',\n      'type': 'bool',\n      'defaultValue': true,\n      'notSupported': true\n    }]\n  }\n];\n", "import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Bincount',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'size', 'type': 'number'},\n      {'start': 2, 'name': 'weights', 'type': 'tensor'}\n    ]\n  },\n  {\n    'tfOpName': 'DenseBincount',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'size', 'type': 'number'},\n      {'start': 2, 'name': 'weights', 'type': 'tensor'}\n    ],\n    'attrs':\n        [{'tfName': 'binary_output', 'name': 'binaryOutput', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'Max',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'Mean',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'Min',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'Sum',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'All',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'Any',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'ArgMax',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'ArgMin',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'Prod',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'Cumsum',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'exclusive', 'name': 'exclusive', 'type': 'bool'},\n      {'tfName': 'reverse', 'name': 'reverse', 'type': 'bool'}\n    ]\n  }\n];\n", "import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'ConcatV2',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'end': -1, 'name': 'tensors', 'type': 'tensors'},\n      {'start': -1, 'name': 'axis', 'type': 'number'}\n    ],\n    'attrs':\n        [{'tfName': 'N', 'name': 'n', 'type': 'number', 'defaultValue': 2}]\n  },\n  {\n    'tfOpName': 'Concat',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 1, 'end': 0, 'name': 'tensors', 'type': 'tensors'},\n      {'start': 0, 'name': 'axis', 'type': 'number'}\n    ],\n    'attrs': [{'tfName': 'N', 'name': 'n', 'type': 'number', 'defaultValue': 2}]\n\n  },\n  {\n    'tfOpName': 'GatherV2',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'indices', 'type': 'tensor'},\n      {'start': 2, 'name': 'axis', 'type': 'number', 'defaultValue': 0}\n    ],\n    'attrs': [{\n      'tfName': 'batch_dims',\n      'name': 'batchDims',\n      'type': 'number',\n      'defaultValue': 0\n    }]\n  },\n  {\n    'tfOpName': 'Gather',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'indices', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'validate_indices',\n      'name': 'validateIndices',\n      'type': 'bool',\n      'notSupported': true\n    }]\n  },\n  {\n    'tfOpName': 'Reverse',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'dims', 'type': 'bool[]'}\n    ]\n  },\n  {\n    'tfOpName': 'ReverseV2',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'Slice',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'begin', 'type': 'number[]'},\n      {'start': 2, 'name': 'size', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'StridedSlice',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'begin', 'type': 'number[]'},\n      {'start': 2, 'name': 'end', 'type': 'number[]'},\n      {'start': 3, 'name': 'strides', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'begin_mask',\n        'name': 'beginMask',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'end_mask',\n        'name': 'endMask',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'new_axis_mask',\n        'name': 'newAxisMask',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'ellipsis_mask',\n        'name': 'ellipsisMask',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'shrink_axis_mask',\n        'name': 'shrinkAxisMask',\n        'type': 'number',\n        'defaultValue': 0\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Pack',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'end': 0, 'name': 'tensors', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'axis', 'name': 'axis', 'type': 'number', 'defaultValue': 0}\n    ]\n  },\n  {\n    'tfOpName': 'Unpack',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'axis', 'name': 'axis', 'type': 'number', 'defaultValue': 0}, {\n        'tfName': 'num',\n        'name': 'num',\n        'type': 'number',\n        'defaultValue': 0,\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Tile',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'reps', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'Split',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'axis', 'type': 'number', 'defaultValue': 0},\n      {'start': 1, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'num_split',\n      'name': 'numOrSizeSplits',\n      'type': 'number',\n      'defaultValue': 1\n    }]\n  },\n  {\n    'tfOpName': 'SplitV',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'numOrSizeSplits', 'type': 'number[]'},\n      {'start': 2, 'name': 'axis', 'type': 'number', 'defaultValue': 0}\n    ]\n  },\n  {\n    'tfOpName': 'ScatterNd',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'indices', 'type': 'tensor'},\n      {'start': 1, 'name': 'values', 'type': 'tensor'},\n      {'start': 2, 'name': 'shape', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'GatherNd',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'indices', 'type': 'tensor'}\n    ]\n  },\n  {\n    'tfOpName': 'SparseToDense',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'sparseIndices', 'type': 'tensor'},\n      {'start': 1, 'name': 'outputShape', 'type': 'number[]'},\n      {'start': 2, 'name': 'sparseValues', 'type': 'tensor'},\n      {'start': 3, 'name': 'defaultValue', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'validate_indices',\n      'name': 'validateIndices',\n      'type': 'bool',\n      'defaultValue': false,\n      'notSupported': true\n    }]\n  }\n];\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'SparseFillEmptyRows',\n    'category': 'sparse',\n    'inputs': [\n      {'start': 0, 'name': 'indices', 'type': 'tensor'},\n      {'start': 1, 'name': 'values', 'type': 'tensor'},\n      {'start': 2, 'name': 'denseShape', 'type': 'tensor'},\n      {'start': 3, 'name': 'defaultValue', 'type': 'tensor'},\n    ]\n  },\n  {\n    'tfOpName': 'SparseReshape',\n    'category': 'sparse',\n    'inputs': [\n      {'start': 0, 'name': 'inputIndices', 'type': 'tensor'},\n      {'start': 1, 'name': 'inputShape', 'type': 'tensor'},\n      {'start': 2, 'name': 'newShape', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'SparseSegmentMean',\n    'category': 'sparse',\n    'inputs': [\n      {'start': 0, 'name': 'data', 'type': 'tensor'},\n      {'start': 1, 'name': 'indices', 'type': 'tensor'},\n      {'start': 2, 'name': 'segmentIds', 'type': 'tensor'},\n    ]\n  },\n  {\n    'tfOpName': 'SparseSegmentSum',\n    'category': 'sparse',\n    'inputs': [\n      {'start': 0, 'name': 'data', 'type': 'tensor'},\n      {'start': 1, 'name': 'indices', 'type': 'tensor'},\n      {'start': 2, 'name': 'segmentIds', 'type': 'tensor'},\n    ]\n  }\n];\n", "import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'FFT',\n    'category': 'spectral',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'IFFT',\n    'category': 'spectral',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'RFFT',\n    'category': 'spectral',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'}, {\n        'start': 1,\n        'name': 'fft_length',\n        'type': 'number',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'IRFFT',\n    'category': 'spectral',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'}, {\n        'start': 1,\n        'name': 'fft_length',\n        'type': 'number',\n        'notSupported': true\n      }\n    ]\n  }\n];\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'StringNGrams',\n    'category': 'string',\n    'inputs': [\n      {'start': 0, 'name': 'data', 'type': 'tensor'},\n      {'start': 1, 'name': 'dataSplits', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'separator', 'name': 'separator', 'type': 'string'},\n      {'tfName': 'ngram_widths', 'name': 'nGramWidths', 'type': 'number[]'},\n      {'tfName': 'left_pad', 'name': 'leftPad', 'type': 'string'},\n      {'tfName': 'right_pad', 'name': 'rightPad', 'type': 'string'},\n      {'tfName': 'pad_width', 'name': 'padWidth', 'type': 'number'}, {\n        'tfName': 'preserve_short_sequences',\n        'name': 'preserveShortSequences',\n        'type': 'bool'\n      }\n    ],\n    'outputs': ['ngrams', 'ngrams_splits']\n  },\n  {\n    'tfOpName': 'StringSplit',\n    'category': 'string',\n    'inputs': [\n      {'start': 0, 'name': 'input', 'type': 'tensor'},\n      {'start': 1, 'name': 'delimiter', 'type': 'tensor'},\n    ],\n    'attrs': [{'tfName': 'skip_empty', 'name': 'skipEmpty', 'type': 'bool'}],\n    'outputs': ['indices', 'values', 'shape']\n  },\n  {\n    'tfOpName': 'StringToHashBucketFast',\n    'category': 'string',\n    'inputs': [\n      {'start': 0, 'name': 'input', 'type': 'tensor'},\n    ],\n    'attrs': [{'tfName': 'num_buckets', 'name': 'numBuckets', 'type': 'number'}]\n  }\n];\n", "import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Cast',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'SrcT',\n        'name': 'sdtype',\n        'type': 'dtype',\n        'notSupported': true\n      },\n      {'tfName': 'DstT', 'name': 'dtype', 'type': 'dtype'}\n    ]\n  },\n  {\n    'tfOpName': 'ExpandDims',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'MirrorPad',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'padding', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'mode', 'name': 'mode', 'type': 'string'}]\n  },\n  {\n    'tfOpName': 'Pad',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'padding', 'type': 'number[]'},\n    ],\n    'attrs': [{\n      'tfName': 'constant_value',\n      'name': 'constantValue',\n      'type': 'number',\n      'defaultValue': 0\n    }]\n  },\n  {\n    'tfOpName': 'PadV2',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'padding', 'type': 'number[]'}, {\n        'start': 2,\n        'name': 'constantValue',\n        'type': 'number',\n        'defaultValue': 0\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Reshape',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'shape', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'Squeeze',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'axis',\n      'tfDeprecatedName': 'squeeze_dims',\n      'name': 'axis',\n      'type': 'number[]'\n    }]\n  },\n  {\n    'tfOpName': 'SpaceToBatchND',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'blockShape', 'type': 'number[]'},\n      {'start': 2, 'name': 'paddings', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'BatchToSpaceND',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'blockShape', 'type': 'number[]'},\n      {'start': 2, 'name': 'crops', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'DepthToSpace',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'block_size', 'name': 'blockSize', 'type': 'number'},\n      {'tfName': 'data_format', 'name': 'dataFormat', 'type': 'string'}\n    ]\n  },\n  {\n    'tfOpName': 'BroadcastTo',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'shape', 'type': 'number[]'},\n    ],\n    'attrs': []\n  },\n  {\n    'tfOpName': 'BroadcastArgs',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 's0', 'type': 'tensor'},\n      {'start': 1, 'name': 's1', 'type': 'tensor'},\n    ],\n    'attrs': []\n  }\n];\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, env} from '@tensorflow/tfjs-core';\n\nimport * as tensorflow from '../data/compiled_api';\n\nimport {getRegisteredOp} from './custom_op/register';\nimport {getNodeNameAndIndex} from './executors/utils';\nimport * as arithmetic from './op_list/arithmetic';\nimport * as basicMath from './op_list/basic_math';\nimport * as control from './op_list/control';\nimport * as convolution from './op_list/convolution';\nimport * as creation from './op_list/creation';\nimport * as dynamic from './op_list/dynamic';\nimport * as evaluation from './op_list/evaluation';\nimport * as graph from './op_list/graph';\nimport * as hashTable from './op_list/hash_table';\nimport * as image from './op_list/image';\nimport * as logical from './op_list/logical';\nimport * as matrices from './op_list/matrices';\nimport * as normalization from './op_list/normalization';\nimport * as reduction from './op_list/reduction';\nimport * as sliceJoin from './op_list/slice_join';\nimport * as sparse from './op_list/sparse';\nimport * as spectral from './op_list/spectral';\nimport * as string from './op_list/string';\nimport * as transformation from './op_list/transformation';\nimport {Graph, InputParamValue, Node, OpMapper, ParamValue} from './types';\n\nexport class OperationMapper {\n  private static _instance: OperationMapper;\n\n  private opMappers: {[key: string]: OpMapper};\n\n  // Singleton instance for the mapper\n  public static get Instance() {\n    return this._instance || (this._instance = new this());\n  }\n\n  // Loads the op mapping from the JSON file.\n  private constructor() {\n    const ops = [\n      arithmetic, basicMath, control, convolution, creation, dynamic,\n      evaluation, graph, hashTable, image, logical, matrices, normalization,\n      reduction, sliceJoin, sparse, spectral, string, transformation\n    ];\n    const mappersJson: OpMapper[] = [].concat(...ops.map(op => op.json));\n\n    this.opMappers = mappersJson.reduce<{[key: string]: OpMapper}>(\n        (map, mapper: OpMapper) => {\n          map[mapper.tfOpName] = mapper;\n          return map;\n        },\n        {});\n  }\n\n  // Converts the model inference graph from Tensorflow GraphDef to local\n  // representation for TensorFlow.js API\n  transformGraph(\n      graph: tensorflow.IGraphDef,\n      signature: tensorflow.ISignatureDef = {}): Graph {\n    const tfNodes = graph.node;\n    const placeholders: Node[] = [];\n    const weights: Node[] = [];\n    const initNodes: Node[] = [];\n    const nodes = tfNodes.reduce<{[key: string]: Node}>((map, node) => {\n      map[node.name] = this.mapNode(node);\n      if (node.op.startsWith('Placeholder')) {\n        placeholders.push(map[node.name]);\n      } else if (node.op === 'Const') {\n        weights.push(map[node.name]);\n      } else if (node.input == null || node.input.length === 0) {\n        initNodes.push(map[node.name]);\n      }\n      return map;\n    }, {});\n\n    let inputs: Node[] = [];\n    const outputs: Node[] = [];\n    let inputNodeNameToKey: {[key: string]: string} = {};\n    let outputNodeNameToKey: {[key: string]: string} = {};\n    if (signature != null) {\n      inputNodeNameToKey = this.mapSignatureEntries(signature.inputs);\n      outputNodeNameToKey = this.mapSignatureEntries(signature.outputs);\n    }\n    const allNodes = Object.keys(nodes);\n    allNodes.forEach(key => {\n      const node = nodes[key];\n      node.inputNames.forEach((name, index) => {\n        const [nodeName, , outputName] = getNodeNameAndIndex(name);\n        const inputNode = nodes[nodeName];\n        if (inputNode.outputs != null) {\n          const outputIndex = inputNode.outputs.indexOf(outputName);\n          if (outputIndex !== -1) {\n            const inputName = `${nodeName}:${outputIndex}`;\n            // update the input name to use the mapped output index directly.\n            node.inputNames[index] = inputName;\n          }\n        }\n        node.inputs.push(inputNode);\n        inputNode.children.push(node);\n      });\n    });\n\n    // if signature has not outputs set, add any node that does not have\n    // outputs.\n    if (Object.keys(outputNodeNameToKey).length === 0) {\n      allNodes.forEach(key => {\n        const node = nodes[key];\n        if (node.children.length === 0) {\n          outputs.push(node);\n        }\n      });\n    } else {\n      Object.keys(outputNodeNameToKey).forEach(name => {\n        const [nodeName, ] = getNodeNameAndIndex(name);\n        const node = nodes[nodeName];\n        if (node != null) {\n          node.signatureKey = outputNodeNameToKey[name];\n          outputs.push(node);\n        }\n      });\n    }\n\n    if (Object.keys(inputNodeNameToKey).length > 0) {\n      Object.keys(inputNodeNameToKey).forEach(name => {\n        const [nodeName, ] = getNodeNameAndIndex(name);\n        const node = nodes[nodeName];\n        if (node) {\n          node.signatureKey = inputNodeNameToKey[name];\n          inputs.push(node);\n        }\n      });\n    } else {\n      inputs = placeholders;\n    }\n\n    let functions = {};\n    if (graph.library != null && graph.library.function != null) {\n      functions = graph.library.function.reduce((functions, func) => {\n        functions[func.signature.name] = this.mapFunction(func);\n        return functions;\n      }, {} as {[key: string]: Graph});\n    }\n\n    const result: Graph =\n        {nodes, inputs, outputs, weights, placeholders, signature, functions};\n\n    if (initNodes.length > 0) {\n      result.initNodes = initNodes;\n    }\n\n    return result;\n  }\n\n  private mapSignatureEntries(entries: {[k: string]: tensorflow.ITensorInfo}) {\n    return Object.keys(entries || {})\n        .reduce<{[key: string]: string}>((prev, curr) => {\n          prev[entries[curr].name] = curr;\n          return prev;\n        }, {});\n  }\n\n  private mapNode(node: tensorflow.INodeDef): Node {\n    // Unsupported ops will cause an error at run-time (not parse time), since\n    // they may not be used by the actual execution subgraph.\n    const mapper =\n        getRegisteredOp(node.op) || this.opMappers[node.op] || {} as OpMapper;\n    if (node.attr == null) {\n      node.attr = {};\n    }\n\n    const newNode: Node = {\n      name: node.name,\n      op: node.op,\n      category: mapper.category,\n      inputNames:\n          (node.input ||\n           []).map(input => input.startsWith('^') ? input.substr(1) : input),\n      inputs: [],\n      children: [],\n      inputParams: {},\n      attrParams: {},\n      rawAttrs: node.attr,\n      outputs: mapper.outputs\n    };\n\n    if (mapper.inputs != null) {\n      newNode.inputParams =\n          mapper.inputs.reduce<{[key: string]: InputParamValue}>(\n              (map, param) => {\n                map[param.name] = {\n                  type: param.type,\n                  inputIndexStart: param.start,\n                  inputIndexEnd: param.end\n                };\n                return map;\n              },\n              {});\n    }\n    if (mapper.attrs != null) {\n      newNode.attrParams =\n          mapper.attrs.reduce<{[key: string]: ParamValue}>((map, param) => {\n            const type = param.type;\n            let value = undefined;\n            switch (param.type) {\n              case 'string':\n                value = getStringParam(\n                    node.attr, param.tfName, param.defaultValue as string);\n\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getStringParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as string);\n                }\n                break;\n              case 'string[]':\n                value = getStringArrayParam(\n                    node.attr, param.tfName, param.defaultValue as string[]);\n\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getStringArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as string[]);\n                }\n                break;\n              case 'number':\n                value = getNumberParam(\n                    node.attr, param.tfName,\n                    (param.defaultValue || 0) as number);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getNumberParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number);\n                }\n                break;\n              case 'number[]':\n                value = getNumericArrayParam(\n                    node.attr, param.tfName, param.defaultValue as number[]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getNumericArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number[]);\n                }\n                break;\n              case 'bool':\n                value = getBoolParam(\n                    node.attr, param.tfName, param.defaultValue as boolean);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getBoolParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as boolean);\n                }\n                break;\n              case 'bool[]':\n                value = getBoolArrayParam(\n                    node.attr, param.tfName, param.defaultValue as boolean[]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getBoolArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as boolean[]);\n                }\n                break;\n              case 'shape':\n                value = getTensorShapeParam(\n                    node.attr, param.tfName, param.defaultValue as number[]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getTensorShapeParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number[]);\n                }\n                break;\n              case 'shape[]':\n                value = getTensorShapeArrayParam(\n                    node.attr, param.tfName, param.defaultValue as number[][]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getTensorShapeArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number[][]);\n                }\n                break;\n              case 'dtype':\n                value = getDtypeParam(\n                    node.attr, param.tfName, param.defaultValue as DataType);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getDtypeParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as DataType);\n                }\n                break;\n              case 'dtype[]':\n                value = getDtypeArrayParam(\n                    node.attr, param.tfName, param.defaultValue as DataType[]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getDtypeArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as DataType[]);\n                }\n                break;\n              case 'func':\n                value = getFuncParam(\n                    node.attr, param.tfName, param.defaultValue as string);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getFuncParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as string);\n                }\n                break;\n              case 'tensor':\n              case 'tensors':\n                break;\n              default:\n                throw new Error(\n                    `Unsupported param type: ${param.type} for op: ${node.op}`);\n            }\n            map[param.name] = {value, type};\n            return map;\n          }, {});\n    }\n    return newNode;\n  }\n\n  // map the TFunctionDef to TFJS graph object\n  private mapFunction(functionDef: tensorflow.IFunctionDef): Graph {\n    const tfNodes = functionDef.nodeDef;\n    const placeholders: Node[] = [];\n    const weights: Node[] = [];\n    let nodes: {[key: string]: Node} = {};\n    if (tfNodes != null) {\n      nodes = tfNodes.reduce<{[key: string]: Node}>((map, node) => {\n        map[node.name] = this.mapNode(node);\n        if (node.op === 'Const') {\n          weights.push(map[node.name]);\n        }\n        return map;\n      }, {});\n    }\n    const inputs: Node[] = [];\n    const outputs: Node[] = [];\n\n    functionDef.signature.inputArg.forEach(arg => {\n      const [nodeName, ] = getNodeNameAndIndex(arg.name);\n      const node: Node = {\n        name: nodeName,\n        op: 'Placeholder',\n        inputs: [],\n        inputNames: [],\n        category: 'graph',\n        inputParams: {},\n        attrParams: {dtype: {value: parseDtypeParam(arg.type), type: 'dtype'}},\n        children: []\n      };\n      node.signatureKey = arg.name;\n      inputs.push(node);\n      nodes[nodeName] = node;\n    });\n\n    const allNodes = Object.keys(nodes);\n    allNodes.forEach(key => {\n      const node = nodes[key];\n      node.inputNames.forEach((name, index) => {\n        const [nodeName, , outputName] = getNodeNameAndIndex(name);\n        const inputNode = nodes[nodeName];\n        if (inputNode.outputs != null) {\n          const outputIndex = inputNode.outputs.indexOf(outputName);\n          if (outputIndex !== -1) {\n            const inputName = `${nodeName}:${outputIndex}`;\n            // update the input name to use the mapped output index directly.\n            node.inputNames[index] = inputName;\n          }\n        }\n        node.inputs.push(inputNode);\n        inputNode.children.push(node);\n      });\n    });\n\n    const returnNodeMap = functionDef.ret;\n\n    functionDef.signature.outputArg.forEach(output => {\n      const [nodeName, index] = getNodeNameAndIndex(returnNodeMap[output.name]);\n      const node = nodes[nodeName];\n      if (node != null) {\n        node.defaultOutput = index;\n        outputs.push(node);\n      }\n    });\n\n    const signature = this.mapArgsToSignature(functionDef);\n    return {nodes, inputs, outputs, weights, placeholders, signature};\n  }\n\n  private mapArgsToSignature(functionDef: tensorflow.IFunctionDef):\n      tensorflow.ISignatureDef {\n    return {\n      methodName: functionDef.signature.name,\n      inputs: functionDef.signature.inputArg.reduce(\n          (map, arg) => {\n            map[arg.name] = this.mapArgToTensorInfo(arg);\n            return map;\n          },\n          {} as {[key: string]: tensorflow.ITensorInfo}),\n      outputs: functionDef.signature.outputArg.reduce(\n          (map, arg) => {\n            map[arg.name] = this.mapArgToTensorInfo(arg, functionDef.ret);\n            return map;\n          },\n          {} as {[key: string]: tensorflow.ITensorInfo}),\n    };\n  }\n\n  private mapArgToTensorInfo(\n      arg: tensorflow.OpDef.IArgDef,\n      nameMap?: {[key: string]: string}): tensorflow.ITensorInfo {\n    let name = arg.name;\n    if (nameMap != null) {\n      name = nameMap[name];\n    }\n    return {name, dtype: arg.type};\n  }\n}\n\nexport function decodeBase64(text: string): string {\n  const global = env().global;\n  if (typeof global.atob !== 'undefined') {\n    return global.atob(text);\n  } else if (typeof Buffer !== 'undefined') {\n    return new Buffer(text, 'base64').toString();\n  } else {\n    throw new Error(\n        'Unable to decode base64 in this environment. ' +\n        'Missing built-in atob() or Buffer()');\n  }\n}\n\nexport function parseStringParam(s: []|string, keepCase: boolean): string {\n  const value =\n      Array.isArray(s) ? String.fromCharCode.apply(null, s) : decodeBase64(s);\n  return keepCase ? value : value.toLowerCase();\n}\n\nexport function getStringParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string, def: string,\n    keepCase = false): string {\n  const param = attrs[name];\n  if (param != null) {\n    return parseStringParam(param.s, keepCase);\n  }\n  return def;\n}\n\nexport function getBoolParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: boolean): boolean {\n  const param = attrs[name];\n  return param ? param.b : def;\n}\n\nexport function getNumberParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: number): number {\n  const param = attrs[name] || {};\n  const value =\n      param['i'] != null ? param['i'] : (param['f'] != null ? param['f'] : def);\n  return (typeof value === 'number') ? value : parseInt(value, 10);\n}\n\nexport function parseDtypeParam(value: string|tensorflow.DataType): DataType {\n  if (typeof (value) === 'string') {\n    // tslint:disable-next-line:no-any\n    value = tensorflow.DataType[value as any];\n  }\n  switch (value) {\n    case tensorflow.DataType.DT_FLOAT:\n      return 'float32';\n    case tensorflow.DataType.DT_INT32:\n    case tensorflow.DataType.DT_INT64:\n    case tensorflow.DataType.DT_INT8:\n    case tensorflow.DataType.DT_UINT8:\n      return 'int32';\n    case tensorflow.DataType.DT_BOOL:\n      return 'bool';\n    case tensorflow.DataType.DT_DOUBLE:\n      return 'float32';\n    case tensorflow.DataType.DT_STRING:\n      return 'string';\n    default:\n      // Unknown dtype error will happen at runtime (instead of parse time),\n      // since these nodes might not be used by the actual subgraph execution.\n      return null;\n  }\n}\n\nexport function getFuncParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: string): string {\n  const param = attrs[name];\n  if (param && param.func) {\n    return param.func.name;\n  }\n  return def;\n}\n\nexport function getDtypeParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: DataType): DataType {\n  const param = attrs[name];\n  if (param && param.type) {\n    return parseDtypeParam(param.type);\n  }\n  return def;\n}\n\nexport function getDtypeArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: DataType[]): DataType[] {\n  const param = attrs[name];\n  if (param && param.list && param.list.type) {\n    return param.list.type.map(v => parseDtypeParam(v));\n  }\n  return def;\n}\n\nexport function parseTensorShapeParam(shape: tensorflow.ITensorShape): number[]|\n    undefined {\n  if (shape.unknownRank) {\n    return undefined;\n  }\n  if (shape.dim != null) {\n    return shape.dim.map(\n        dim =>\n            (typeof dim.size === 'number') ? dim.size : parseInt(dim.size, 10));\n  }\n  return [];\n}\n\nexport function getTensorShapeParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def?: number[]): number[]|undefined {\n  const param = attrs[name];\n  if (param && param.shape) {\n    return parseTensorShapeParam(param.shape);\n  }\n  return def;\n}\n\nexport function getNumericArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: number[]): number[] {\n  const param = attrs[name];\n  if (param) {\n    return ((param.list.f && param.list.f.length ? param.list.f :\n                                                   param.list.i) ||\n            [])\n        .map(v => (typeof v === 'number') ? v : parseInt(v, 10));\n  }\n  return def;\n}\n\nexport function getStringArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string, def: string[],\n    keepCase = false): string[] {\n  const param = attrs[name];\n  if (param && param.list && param.list.s) {\n    return param.list.s.map((v) => {\n      return parseStringParam(v, keepCase);\n    });\n  }\n  return def;\n}\n\nexport function getTensorShapeArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: number[][]): number[][] {\n  const param = attrs[name];\n  if (param && param.list && param.list.shape) {\n    return param.list.shape.map((v) => {\n      return parseTensorShapeParam(v);\n    });\n  }\n  return def;\n}\n\nexport function getBoolArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: boolean[]): boolean[] {\n  const param = attrs[name];\n  if (param && param.list && param.list.b) {\n    return param.list.b;\n  }\n  return def;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, Tensor} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {getTensor} from '../executors/utils';\nimport {getBoolArrayParam, getBoolParam, getDtypeArrayParam, getDtypeParam, getNumberParam, getNumericArrayParam, getStringArrayParam, getStringParam, getTensorShapeArrayParam, getTensorShapeParam} from '../operation_mapper';\nimport {GraphNode, Node, ValueType} from '../types';\n\n/**\n * Helper class for lookup inputs and params for nodes in the model graph.\n */\nexport class NodeValueImpl implements GraphNode {\n  public readonly inputs: Tensor[] = [];\n  public readonly attrs: {[key: string]: ValueType} = {};\n  constructor(\n      private node: Node, private tensorMap: NamedTensorsMap,\n      private context: ExecutionContext) {\n    this.inputs = node.inputNames.map(name => this.getInput(name));\n    if (node.rawAttrs != null) {\n      this.attrs = Object.keys(node.rawAttrs)\n                       .reduce((attrs: {[key: string]: ValueType}, key) => {\n                         attrs[key] = this.getAttr(key);\n                         return attrs;\n                       }, {});\n    }\n  }\n\n  /**\n   * Return the value of the attribute or input param.\n   * @param name String: name of attribute or input param.\n   */\n  private getInput(name: string): Tensor {\n    return getTensor(name, this.tensorMap, this.context);\n  }\n\n  /**\n   * Return the value of the attribute or input param.\n   * @param name String: name of attribute or input param.\n   */\n  private getAttr(name: string, defaultValue?: ValueType): ValueType {\n    const value = this.node.rawAttrs[name];\n    if (value.tensor != null) {\n      return getTensor(name, this.tensorMap, this.context);\n    }\n    if (value.i != null || value.f != null) {\n      return getNumberParam(this.node.rawAttrs, name, defaultValue as number);\n    }\n    if (value.s != null) {\n      return getStringParam(this.node.rawAttrs, name, defaultValue as string);\n    }\n    if (value.b != null) {\n      return getBoolParam(this.node.rawAttrs, name, defaultValue as boolean);\n    }\n    if (value.shape != null) {\n      return getTensorShapeParam(\n          this.node.rawAttrs, name, defaultValue as number[]);\n    }\n    if (value.type != null) {\n      return getDtypeParam(this.node.rawAttrs, name, defaultValue as DataType);\n    }\n    if (value.list != null) {\n      if (value.list.i != null || value.list.f != null) {\n        return getNumericArrayParam(\n            this.node.rawAttrs, name, defaultValue as number[]);\n      }\n      if (value.list.s != null) {\n        return getStringArrayParam(\n            this.node.rawAttrs, name, defaultValue as string[]);\n      }\n      if (value.list.shape != null) {\n        return getTensorShapeArrayParam(\n            this.node.rawAttrs, name, defaultValue as number[][]);\n      }\n      if (value.list.b != null) {\n        return getBoolArrayParam(\n            this.node.rawAttrs, name, defaultValue as boolean[]);\n      }\n      if (value.list.type != null) {\n        return getDtypeArrayParam(\n            this.node.rawAttrs, name, defaultValue as DataType[]);\n      }\n    }\n\n    return defaultValue;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * This file exports ops used by the converters executors. By default it\n * re-exports all ops. In a custom build this is aliased to a file that will\n * only exports ops for a given model.json.\n */\nexport * from './ops';\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'BiasAdd':\n        case 'AddV2':\n        case 'Add': {\n          return [tfOps.add(\n              (getParamValue('a', node, tensorMap, context) as Tensor),\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'AddN': {\n          return [tfOps.addN((\n              getParamValue('tensors', node, tensorMap, context) as Tensor[]))];\n        }\n        case 'FloorMod':\n        case 'Mod':\n          return [tfOps.mod(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        case 'Mul':\n          return [tfOps.mul(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        case 'RealDiv':\n        case 'Div': {\n          return [tfOps.div(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'DivNoNan': {\n          return [tfOps.divNoNan(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'FloorDiv': {\n          return [tfOps.floorDiv(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'Sub': {\n          return [tfOps.sub(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'Minimum': {\n          return [tfOps.minimum(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'Maximum': {\n          return [tfOps.maximum(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'Pow': {\n          return [tfOps.pow(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'SquaredDifference': {\n          return [tfOps.squaredDifference(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'arithmetic';\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue, getTensor} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'Abs':\n        case 'ComplexAbs':\n          return [tfOps.abs(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Acos':\n          return [tfOps.acos(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Acosh':\n          return [tfOps.acosh(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Asin':\n          return [tfOps.asin(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Asinh':\n          return [tfOps.asinh(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Atan':\n          return [tfOps.atan(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Atan2':\n          return [tfOps.atan2(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('y', node, tensorMap, context) as Tensor)];\n        case 'Atanh':\n          return [tfOps.atanh(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Ceil':\n          return [tfOps.ceil(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Complex':\n          return [tfOps.complex(\n              getParamValue('real', node, tensorMap, context) as Tensor,\n              getParamValue('imag', node, tensorMap, context) as Tensor)];\n        case 'Cos':\n          return [tfOps.cos(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Cosh':\n          return [tfOps.cosh(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Elu':\n          return [tfOps.elu(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Erf':\n          return [tfOps.erf(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Exp':\n          return [tfOps.exp(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Expm1': {\n          return [tfOps.expm1(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Floor':\n          return [tfOps.floor(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Log':\n          return [tfOps.log(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Log1p': {\n          return [tfOps.log1p(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Imag':\n          return [tfOps.imag(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n\n        case 'Neg':\n          return [tfOps.neg(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Reciprocal': {\n          return [tfOps.reciprocal(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Real':\n          return [tfOps.real(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Relu':\n          return [tfOps.relu(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Round': {\n          return [tfOps.round(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Selu':\n          return [tfOps.selu(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Sigmoid':\n          return [tfOps.sigmoid(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Sin':\n          return [tfOps.sin(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Sign': {\n          return [tfOps.sign(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Sinh': {\n          return [tfOps.sinh(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Softplus': {\n          return [tfOps.softplus(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Sqrt': {\n          return [tfOps.sqrt(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Square': {\n          return [tfOps.square(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Tanh': {\n          return [tfOps.tanh(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Tan':\n          return [tfOps.tan(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'ClipByValue':\n          return [tfOps.clipByValue(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('clipValueMin', node, tensorMap, context) as number,\n              getParamValue('clipValueMax', node, tensorMap, context) as\n                  number)];\n        case 'Relu6':\n          return [tfOps.relu6(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Rsqrt':\n          return [tfOps.rsqrt(\n              getTensor(node.inputNames[0], tensorMap, context))];\n        case 'Prod':\n          return [tfOps.prod(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('axes', node, tensorMap, context) as number[])];\n        case 'LeakyRelu':\n          return [tfOps.leakyRelu(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('alpha', node, tensorMap, context) as number)];\n        case 'Prelu':\n          return [tfOps.prelu(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('alpha', node, tensorMap, context) as Tensor)];\n        case 'IsNan':\n          return [tfOps.isNaN(\n              getTensor(node.inputNames[0], tensorMap, context))];\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'basic_math';\n", "\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * This differs from util.assertShapesMatch in that it allows values of\n * negative one, an undefined size of a dimensinon, in a shape to match\n * anything.\n */\n\nimport {Tensor, util} from '@tensorflow/tfjs-core';\n\n/**\n * Used by TensorList and TensorArray to verify if elementShape matches, support\n * negative value as the dim shape.\n * @param shapeA\n * @param shapeB\n * @param errorMessagePrefix\n */\nexport function assertShapesMatchAllowUndefinedSize(\n    shapeA: number|number[], shapeB: number|number[],\n    errorMessagePrefix = ''): void {\n  // constant shape means unknown rank\n  if (typeof shapeA === 'number' || typeof shapeB === 'number') {\n    return;\n  }\n  util.assert(\n      shapeA.length === shapeB.length,\n      () => errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);\n  for (let i = 0; i < shapeA.length; i++) {\n    const dim0 = shapeA[i];\n    const dim1 = shapeB[i];\n    util.assert(\n        dim0 < 0 || dim1 < 0 || dim0 === dim1,\n        () =>\n            errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);\n  }\n}\n\nexport function fullDefinedShape(elementShape: number|number[]): boolean {\n  if (typeof elementShape === 'number' || elementShape.some(dim => dim < 0)) {\n    return false;\n  }\n  return true;\n}\n/**\n * Generate the output element shape from the list elementShape, list tensors\n * and input param.\n * @param listElementShape\n * @param tensors\n * @param elementShape\n */\nexport function inferElementShape(\n    listElementShape: number|number[], tensors: Tensor[],\n    elementShape: number|number[]): number[] {\n  let partialShape = mergeElementShape(listElementShape, elementShape);\n  const notfullDefinedShape = !fullDefinedShape(partialShape);\n  if (notfullDefinedShape && tensors.length === 0) {\n    throw new Error(\n        `Tried to calculate elements of an empty list` +\n        ` with non-fully-defined elementShape: ${partialShape}`);\n  }\n  if (notfullDefinedShape) {\n    tensors.forEach(tensor => {\n      partialShape = mergeElementShape(tensor.shape, partialShape);\n    });\n  }\n  if (!fullDefinedShape(partialShape)) {\n    throw new Error(`Non-fully-defined elementShape: ${partialShape}`);\n  }\n  return partialShape as number[];\n}\n\nexport function mergeElementShape(\n    elementShapeA: number|number[], elementShapeB: number|number[]): number|\n    number[] {\n  if (typeof elementShapeA === 'number') {\n    return elementShapeB;\n  }\n  if (typeof elementShapeB === 'number') {\n    return elementShapeA;\n  }\n\n  if (elementShapeA.length !== elementShapeB.length) {\n    throw new Error(`Incompatible ranks during merge: ${elementShapeA} vs. ${\n        elementShapeB}`);\n  }\n\n  const result: number[] = [];\n  for (let i = 0; i < elementShapeA.length; ++i) {\n    const dim0 = elementShapeA[i];\n    const dim1 = elementShapeB[i];\n    if (dim0 >= 0 && dim1 >= 0 && dim0 !== dim1) {\n      throw new Error(`Incompatible shape during merge: ${elementShapeA} vs. ${\n          elementShapeB}`);\n    }\n    result[i] = dim0 >= 0 ? dim0 : dim1;\n  }\n  return result;\n}\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {concat, DataType, keep, reshape, scalar, slice, stack, Tensor, tensor, tidy, unstack} from '@tensorflow/tfjs-core';\n\nimport {assertShapesMatchAllowUndefinedSize} from './tensor_utils';\n\nexport interface TensorWithState {\n  tensor?: Tensor;\n  written?: boolean;\n  read?: boolean;\n  cleared?: boolean;\n}\n/**\n * The TensorArray object keeps an array of Tensors.  It\n * allows reading from the array and writing to the array.\n */\nexport class TensorArray {\n  private tensors: TensorWithState[] = [];\n  private closed_ = false;\n  readonly idTensor: Tensor;\n  constructor(\n      readonly name: string, readonly dtype: DataType, private maxSize: number,\n      private elementShape: number[], readonly identicalElementShapes: boolean,\n      readonly dynamicSize: boolean, readonly clearAfterRead: boolean) {\n    this.idTensor = scalar(0);\n    keep(this.idTensor);\n  }\n\n  get id() {\n    return this.idTensor.id;\n  }\n\n  get closed() {\n    return this.closed_;\n  }\n\n  /**\n   * Dispose the tensors and idTensor and mark the TensoryArray as closed.\n   */\n  clearAndClose(keepIds?: Set<number>) {\n    this.tensors.forEach(tensor => {\n      if (keepIds == null || !keepIds.has(tensor.tensor.id)) {\n        tensor.tensor.dispose();\n      }\n    });\n    this.tensors = [];\n    this.closed_ = true;\n    this.idTensor.dispose();\n  }\n\n  size(): number {\n    return this.tensors.length;\n  }\n\n  /**\n   * Read the value at location index in the TensorArray.\n   * @param index Number the index to read from.\n   */\n  read(index: number): Tensor {\n    if (this.closed_) {\n      throw new Error(`TensorArray ${this.name} has already been closed.`);\n    }\n\n    if (index < 0 || index >= this.size()) {\n      throw new Error(`Tried to read from index ${index}, but array size is: ${\n          this.size()}`);\n    }\n\n    const tensorWithState = this.tensors[index];\n    if (tensorWithState.cleared) {\n      throw new Error(\n          `TensorArray ${this.name}: Could not read index ${\n              index} twice because it was cleared after a previous read ` +\n          `(perhaps try setting clear_after_read = false?).`);\n    }\n\n    if (this.clearAfterRead) {\n      tensorWithState.cleared = true;\n    }\n\n    tensorWithState.read = true;\n    return tensorWithState.tensor;\n  }\n\n  /**\n   * Helper method to read multiple tensors from the specified indices.\n   */\n  readMany(indices: number[]): Tensor[] {\n    return indices.map(index => this.read(index));\n  }\n\n  /**\n   * Write value into the index of the TensorArray.\n   * @param index number the index to write to.\n   * @param tensor\n   */\n  write(index: number, tensor: Tensor) {\n    if (this.closed_) {\n      throw new Error(`TensorArray ${this.name} has already been closed.`);\n    }\n\n    if (index < 0 || !this.dynamicSize && index >= this.maxSize) {\n      throw new Error(`Tried to write to index ${\n          index}, but array is not resizeable and size is: ${this.maxSize}`);\n    }\n\n    const t = this.tensors[index] || {};\n\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray ${\n          this.name}: Could not write to TensorArray index ${index},\n          because the value dtype is ${\n          tensor.dtype}, but TensorArray dtype is ${this.dtype}.`);\n    }\n\n    // Set the shape for the first time write to unknow shape tensor array\n    if (this.size() === 0 &&\n        (this.elementShape == null || this.elementShape.length === 0)) {\n      this.elementShape = tensor.shape;\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, tensor.shape,\n        `TensorArray ${this.name}: Could not write to TensorArray index ${\n            index}.`);\n\n    if (t.read) {\n      throw new Error(\n          `TensorArray ${this.name}: Could not write to TensorArray index ${\n              index}, because it has already been read.`);\n    }\n\n    if (t.written) {\n      throw new Error(\n          `TensorArray ${this.name}: Could not write to TensorArray index ${\n              index}, because it has already been written.`);\n    }\n\n    t.tensor = tensor;\n    keep(tensor);\n    t.written = true;\n\n    this.tensors[index] = t;\n  }\n\n  /**\n   * Helper method to write multiple tensors to the specified indices.\n   */\n  writeMany(indices: number[], tensors: Tensor[]) {\n    if (indices.length !== tensors.length) {\n      throw new Error(\n          `TensorArray ${this.name}: could not write multiple tensors,` +\n          `because the index size: ${\n              indices.length} is not the same as tensors size: ${\n              tensors.length}.`);\n    }\n\n    indices.forEach((i, index) => this.write(i, tensors[index]));\n  }\n\n  /**\n   * Return selected values in the TensorArray as a packed Tensor. All of\n   * selected values must have been written and their shapes must all match.\n   * @param [indices] number[] Optional. Taking values in [0, max_value). If the\n   *    TensorArray is not dynamic, max_value=size(). If not specified returns\n   *    all tensors in the original order.\n   * @param [dtype]\n   */\n  gather(indices?: number[], dtype?: DataType): Tensor {\n    if (!!dtype && dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but gather requested dtype ${dtype}`);\n    }\n\n    if (!indices) {\n      indices = [];\n      for (let i = 0; i < this.size(); i++) {\n        indices.push(i);\n      }\n    } else {\n      indices = indices.slice(0, this.size());\n    }\n\n    if (indices.length === 0) {\n      return tensor([], [0].concat(this.elementShape));\n    }\n\n    // Read all the PersistentTensors into a vector to keep track of\n    // their memory.\n    const tensors = this.readMany(indices);\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, tensors[0].shape, 'TensorArray shape mismatch: ');\n\n    return stack(tensors, 0);\n  }\n\n  /**\n   * Return the values in the TensorArray as a concatenated Tensor.\n   */\n  concat(dtype?: DataType): Tensor {\n    if (!!dtype && dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but concat requested dtype ${dtype}`);\n    }\n\n    if (this.size() === 0) {\n      return tensor([], [0].concat(this.elementShape));\n    }\n\n    const indices = [];\n    for (let i = 0; i < this.size(); i++) {\n      indices.push(i);\n    }\n    // Collect all the tensors from the tensors array.\n    const tensors = this.readMany(indices);\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, tensors[0].shape,\n        `TensorArray shape mismatch: tensor array shape (${\n            this.elementShape}) vs first tensor shape (${tensors[0].shape})`);\n\n    return concat(tensors, 0);\n  }\n\n  /**\n   * Scatter the values of a Tensor in specific indices of a TensorArray.\n   * @param indices nummber[] values in [0, max_value). If the\n   *    TensorArray is not dynamic, max_value=size().\n   * @param tensor Tensor input tensor.\n   */\n  scatter(indices: number[], tensor: Tensor) {\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but tensor has dtype ${tensor.dtype}`);\n    }\n\n    if (indices.length !== tensor.shape[0]) {\n      throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${\n          indices.length} vs. ${tensor.shape[0]}`);\n    }\n\n    const maxIndex = Math.max(...indices);\n\n    if (!this.dynamicSize && maxIndex >= this.maxSize) {\n      throw new Error(\n          `Max index must be < array size (${maxIndex}  vs. ${this.maxSize})`);\n    }\n\n    this.writeMany(indices, unstack(tensor, 0));\n  }\n\n  /**\n   * Split the values of a Tensor into the TensorArray.\n   * @param length number[] with the lengths to use when splitting value along\n   *    its first dimension.\n   * @param tensor Tensor, the tensor to split.\n   */\n  split(length: number[], tensor: Tensor) {\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but tensor has dtype ${tensor.dtype}`);\n    }\n    let totalLength = 0;\n    const cumulativeLengths = length.map(len => {\n      totalLength += len;\n      return totalLength;\n    });\n\n    if (totalLength !== tensor.shape[0]) {\n      throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${totalLength}, and tensor's shape is: ${tensor.shape}`);\n    }\n\n    if (!this.dynamicSize && length.length !== this.maxSize) {\n      throw new Error(\n          `TensorArray's size is not equal to the size of lengths (${\n              this.maxSize} vs. ${length.length}), ` +\n          'and the TensorArray is not marked as dynamically resizeable');\n    }\n\n    const elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;\n    const tensors: Tensor[] = [];\n    tidy(() => {\n      tensor = reshape(tensor, [1, totalLength, elementPerRow]);\n      for (let i = 0; i < length.length; ++i) {\n        const previousLength = (i === 0) ? 0 : cumulativeLengths[i - 1];\n        const indices = [0, previousLength, 0];\n        const sizes = [1, length[i], elementPerRow];\n        tensors[i] = reshape(slice(tensor, indices, sizes), this.elementShape);\n      }\n      return tensors;\n    });\n    const indices = [];\n    for (let i = 0; i < length.length; i++) {\n      indices[i] = i;\n    }\n    this.writeMany(indices, tensors);\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {concat, DataType, keep, reshape, scalar, slice, stack, Tensor, tensor, tidy, unstack} from '@tensorflow/tfjs-core';\n\nimport {assertShapesMatchAllowUndefinedSize, inferElementShape, mergeElementShape} from './tensor_utils';\n\n/**\n * TensorList stores a container of `tf.Tensor` objects, which are accessible\n * via tensors field.\n *\n * In order to get a copy of the underlying list, use the copy method:\n * ```\n *    TensorList b = a.copy();\n *    b.tensors().pushBack(t);  // This does not modify a.tensors().\n * ```\n *\n * Note that this is not a deep copy: the memory locations of the underlying\n * tensors will still point to the same locations of the corresponding tensors\n * in the original.\n */\n\nexport class TensorList {\n  readonly idTensor: Tensor;\n  maxNumElements: number;\n\n  get id() {\n    return this.idTensor.id;\n  }\n  /**\n   *\n   * @param tensors list of tensors\n   * @param elementShape shape of each tensor, this can be a single number (any\n   * shape is allowed) or partial shape (dim = -1).\n   * @param elementDtype data type of each tensor\n   * @param maxNumElements The maximum allowed size of `tensors`. Defaults to -1\n   *   meaning that the size of `tensors` is unbounded.\n   */\n  constructor(\n      readonly tensors: Tensor[], readonly elementShape: number|number[],\n      readonly elementDtype: DataType, maxNumElements = -1) {\n    if (tensors != null) {\n      tensors.forEach(tensor => {\n        if (elementDtype !== tensor.dtype) {\n          throw new Error(`Invalid data types; op elements ${\n              elementDtype}, but list elements ${tensor.dtype}`);\n        }\n        assertShapesMatchAllowUndefinedSize(\n            elementShape, tensor.shape, 'TensorList shape mismatch: ');\n\n        keep(tensor);\n      });\n    }\n    this.idTensor = scalar(0);\n    this.maxNumElements = maxNumElements;\n    keep(this.idTensor);\n  }\n\n  /**\n   * Get a new TensorList containing a copy of the underlying tensor container.\n   */\n  copy(): TensorList {\n    return new TensorList(\n        [...this.tensors], this.elementShape, this.elementDtype);\n  }\n\n  /**\n   * Dispose the tensors and idTensor and clear the tensor list.\n   */\n  clearAndClose(keepIds?: Set<number>) {\n    this.tensors.forEach(tensor => {\n      if (keepIds == null || !keepIds.has(tensor.id)) {\n        tensor.dispose();\n      }\n    });\n    this.tensors.length = 0;\n    this.idTensor.dispose();\n  }\n  /**\n   * The size of the tensors in the tensor list.\n   */\n  size() {\n    return this.tensors.length;\n  }\n\n  /**\n   * Return a tensor that stacks a list of rank-R tf.Tensors into one rank-(R+1)\n   * tf.Tensor.\n   * @param elementShape shape of each tensor\n   * @param elementDtype data type of each tensor\n   * @param numElements the number of elements to stack\n   */\n  stack(elementShape: number[], elementDtype: DataType, numElements = -1):\n      Tensor {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          elementDtype}, but list elements ${this.elementDtype}`);\n    }\n    if (numElements !== -1 && this.tensors.length !== numElements) {\n      throw new Error(`Operation expected a list with ${\n          numElements} elements but got a list with ${\n          this.tensors.length} elements.`);\n    }\n    assertShapesMatchAllowUndefinedSize(\n        elementShape, this.elementShape, 'TensorList shape mismatch: ');\n    const outputElementShape =\n        inferElementShape(this.elementShape, this.tensors, elementShape);\n    return tidy(() => {\n      const reshapedTensors =\n          this.tensors.map(tensor => reshape(tensor, outputElementShape));\n      return stack(reshapedTensors, 0);\n    });\n  }\n\n  /**\n   * Pop a tensor from the end of the list.\n   * @param elementShape shape of the tensor\n   * @param elementDtype data type of the tensor\n   */\n  popBack(elementShape: number[], elementDtype: DataType): Tensor {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          elementDtype}, but list elements ${this.elementDtype}`);\n    }\n\n    if (this.size() === 0) {\n      throw new Error('Trying to pop from an empty list.');\n    }\n    const outputElementShape =\n        inferElementShape(this.elementShape, this.tensors, elementShape);\n    const tensor = this.tensors.pop();\n\n    assertShapesMatchAllowUndefinedSize(\n        tensor.shape, elementShape, 'TensorList shape mismatch: ');\n\n    return reshape(tensor, outputElementShape);\n  }\n\n  /**\n   * Push a tensor to the end of the list.\n   * @param tensor Tensor to be pushed.\n   */\n  pushBack(tensor: Tensor) {\n    if (tensor.dtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          tensor.dtype}, but list elements ${this.elementDtype}`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        tensor.shape, this.elementShape, 'TensorList shape mismatch: ');\n\n    if (this.maxNumElements === this.size()) {\n      throw new Error(`Trying to push element into a full list.`);\n    }\n    keep(tensor);\n    this.tensors.push(tensor);\n  }\n\n  /**\n   * Update the size of the list.\n   * @param size the new size of the list.\n   */\n  resize(size: number) {\n    if (size < 0) {\n      throw new Error(\n          `TensorListResize expects size to be non-negative. Got: ${size}`);\n    }\n\n    if (this.maxNumElements !== -1 && size > this.maxNumElements) {\n      throw new Error(`TensorListResize input size ${\n          size} is greater maxNumElement ${this.maxNumElements}.`);\n    }\n    this.tensors.length = size;\n  }\n\n  /**\n   * Retrieve the element at the provided index\n   * @param elementShape shape of the tensor\n   * @param elementDtype dtype of the tensor\n   * @param elementIndex index of the tensor\n   */\n  getItem(elementIndex: number, elementShape: number[], elementDtype: DataType):\n      Tensor {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          elementDtype}, but list elements ${this.elementDtype}`);\n    }\n    if (elementIndex < 0 || elementIndex > this.tensors.length) {\n      throw new Error(`Trying to access element ${\n          elementIndex} in a list with ${this.tensors.length} elements.`);\n    }\n\n    if (this.tensors[elementIndex] == null) {\n      throw new Error(`element at index ${elementIndex} is null.`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        this.tensors[elementIndex].shape, elementShape,\n        'TensorList shape mismatch: ');\n    const outputElementShape =\n        inferElementShape(this.elementShape, this.tensors, elementShape);\n    return reshape(this.tensors[elementIndex], outputElementShape);\n  }\n\n  /**\n   * Set the tensor at the index\n   * @param elementIndex index of the tensor\n   * @param tensor the tensor to be inserted into the list\n   */\n  setItem(elementIndex: number, tensor: Tensor) {\n    if (tensor.dtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          tensor.dtype}, but list elements ${this.elementDtype}`);\n    }\n\n    if (elementIndex < 0 ||\n        this.maxNumElements !== -1 && elementIndex >= this.maxNumElements) {\n      throw new Error(`Trying to set element ${\n          elementIndex} in a list with max ${this.maxNumElements} elements.`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, tensor.shape, 'TensorList shape mismatch: ');\n    keep(tensor);\n    this.tensors[elementIndex] = tensor;\n  }\n\n  /**\n   * Return selected values in the TensorList as a stacked Tensor. All of\n   * selected values must have been written and their shapes must all match.\n   * @param indices indices of tensors to gather\n   * @param elementDtype output tensor dtype\n   * @param elementShape output tensor element shape\n   */\n  gather(indices: number[], elementDtype: DataType, elementShape: number[]):\n      Tensor {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          elementDtype}, but list elements ${this.elementDtype}`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, elementShape, 'TensorList shape mismatch: ');\n\n    // When indices is greater than the size of the list, indices beyond the\n    // size of the list are ignored.\n    indices = indices.slice(0, this.size());\n    const outputElementShape =\n        inferElementShape(this.elementShape, this.tensors, elementShape);\n    if (indices.length === 0) {\n      return tensor([], [0].concat(outputElementShape));\n    }\n\n    return tidy(() => {\n      const tensors =\n          indices.map(i => reshape(this.tensors[i], outputElementShape));\n      return stack(tensors, 0);\n    });\n  }\n\n  /**\n   * Return the values in the TensorList as a concatenated Tensor.\n   * @param elementDtype output tensor dtype\n   * @param elementShape output tensor element shape\n   */\n  concat(elementDtype: DataType, elementShape: number[]): Tensor {\n    if (!!elementDtype && elementDtype !== this.elementDtype) {\n      throw new Error(`TensorList dtype is ${\n          this.elementDtype} but concat requested dtype ${elementDtype}`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, elementShape, 'TensorList shape mismatch: ');\n    const outputElementShape =\n        inferElementShape(this.elementShape, this.tensors, elementShape);\n\n    if (this.size() === 0) {\n      return tensor([], [0].concat(outputElementShape));\n    }\n    return tidy(() => {\n      const tensors = this.tensors.map(t => reshape(t, outputElementShape));\n      return concat(tensors, 0);\n    });\n  }\n}\n\n/**\n * Creates a TensorList which, when stacked, has the value of tensor.\n * @param tensor from tensor\n * @param elementShape output tensor element shape\n */\nexport function fromTensor(\n    tensor: Tensor, elementShape: number[], elementDtype: DataType) {\n  const dtype = tensor.dtype;\n  if (tensor.shape.length < 1) {\n    throw new Error(\n        `Tensor must be at least a vector, but saw shape: ${tensor.shape}`);\n  }\n  if (tensor.dtype !== elementDtype) {\n    throw new Error(`Invalid data types; op elements ${\n        tensor.dtype}, but list elements ${elementDtype}`);\n  }\n  const tensorElementShape = tensor.shape.slice(1);\n  assertShapesMatchAllowUndefinedSize(\n      tensorElementShape, elementShape, 'TensorList shape mismatch: ');\n  const tensorList: Tensor[] = unstack(tensor);\n  return new TensorList(tensorList, elementShape, dtype);\n}\n\n/**\n * Return a TensorList of the given size with empty elements.\n * @param elementShape the shape of the future elements of the list\n * @param elementDtype the desired type of elements in the list\n * @param numElements the number of elements to reserve\n */\nexport function reserve(\n    elementShape: number[], elementDtype: DataType, numElements: number) {\n  return new TensorList([], elementShape, elementDtype, numElements);\n}\n\n/**\n * Put tensors at specific indices of a stacked tensor into a TensorList.\n * @param indices list of indices on how to scatter the tensor.\n * @param tensor input tensor.\n * @param elementShape the shape of the future elements of the list\n * @param numElements the number of elements to scatter\n */\nexport function scatter(\n    tensor: Tensor, indices: number[], elementShape: number[],\n    numElements?: number): TensorList {\n  if (indices.length !== tensor.shape[0]) {\n    throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${\n        indices.length} vs. ${tensor.shape[0]}`);\n  }\n\n  const maxIndex = Math.max(...indices);\n\n  if (numElements != null && numElements !== -1 && maxIndex >= numElements) {\n    throw new Error(\n        `Max index must be < array size (${maxIndex}  vs. ${numElements})`);\n  }\n\n  const list = new TensorList([], elementShape, tensor.dtype, numElements);\n  const tensors = unstack(tensor, 0);\n  indices.forEach((value, index) => {\n    list.setItem(value, tensors[index]);\n  });\n  return list;\n}\n\n/**\n * Split the values of a Tensor into a TensorList.\n * @param length the lengths to use when splitting value along\n *    its first dimension.\n * @param tensor the tensor to split.\n * @param elementShape the shape of the future elements of the list\n */\nexport function split(\n    tensor: Tensor, length: number[], elementShape: number[]) {\n  let totalLength = 0;\n  const cumulativeLengths = length.map(len => {\n    totalLength += len;\n    return totalLength;\n  });\n\n  if (totalLength !== tensor.shape[0]) {\n    throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${totalLength}, and tensor's shape is: ${tensor.shape}`);\n  }\n\n  const shapeWithoutFirstDim = tensor.shape.slice(1);\n  const outputElementShape =\n      mergeElementShape(shapeWithoutFirstDim, elementShape);\n  const elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;\n  const tensors: Tensor[] = tidy(() => {\n    const tensors = [];\n    tensor = reshape(tensor, [1, totalLength, elementPerRow]);\n    for (let i = 0; i < length.length; ++i) {\n      const previousLength = (i === 0) ? 0 : cumulativeLengths[i - 1];\n      const indices = [0, previousLength, 0];\n      const sizes = [1, length[i], elementPerRow];\n      tensors[i] = reshape(\n          slice(tensor, indices, sizes), outputElementShape as number[]);\n    }\n    tensor.dispose();\n    return tensors;\n  });\n\n  const list = new TensorList([], elementShape, tensor.dtype, length.length);\n\n  for (let i = 0; i < tensors.length; i++) {\n    list.setItem(i, tensors[i]);\n  }\n  return list;\n}\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, scalar, Tensor} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {TensorArray} from '../../executor/tensor_array';\nimport {fromTensor, reserve, scatter, split} from '../../executor/tensor_list';\nimport {InternalOpAsyncExecutor, Node} from '../types';\n\nimport {cloneTensor, getParamValue, getTensor} from './utils';\n\nexport const executeOp: InternalOpAsyncExecutor = async(\n    node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext): Promise<Tensor[]> => {\n  switch (node.op) {\n    case 'If':\n    case 'StatelessIf': {\n      const thenFunc =\n          getParamValue('thenBranch', node, tensorMap, context) as string;\n      const elseFunc =\n          getParamValue('elseBranch', node, tensorMap, context) as string;\n      const cond = getParamValue('cond', node, tensorMap, context) as Tensor;\n      const args = getParamValue('args', node, tensorMap, context) as Tensor[];\n      const condValue = await cond.data();\n      if (condValue[0]) {\n        return context.functionMap[thenFunc].executeFunctionAsync(\n            args, context.tensorArrayMap, context.tensorListMap);\n      } else {\n        return context.functionMap[elseFunc].executeFunctionAsync(\n            args, context.tensorArrayMap, context.tensorListMap);\n      }\n    }\n    case 'While':\n    case 'StatelessWhile': {\n      const bodyFunc =\n          getParamValue('body', node, tensorMap, context) as string;\n      const condFunc =\n          getParamValue('cond', node, tensorMap, context) as string;\n      const args = getParamValue('args', node, tensorMap, context) as Tensor[];\n\n      // Calculate the condition of the loop\n      const condResult =\n          (await context.functionMap[condFunc].executeFunctionAsync(\n              args, context.tensorArrayMap, context.tensorListMap));\n      const argIds = args.map(tensor => tensor.id);\n      let condValue = await condResult[0].data();\n      // Dispose the intermediate tensors for condition function\n      condResult.forEach(tensor => {\n        if (!tensor.kept && argIds.indexOf(tensor.id) === -1) {\n          tensor.dispose();\n        }\n      });\n\n      let result: Tensor[] = args;\n\n      while (condValue[0]) {\n        // Record the previous result for intermediate tensor tracking\n        const origResult = result;\n        // Execution the body of the loop\n        result = await context.functionMap[bodyFunc].executeFunctionAsync(\n            result, context.tensorArrayMap, context.tensorListMap);\n        const resultIds = result.map(tensor => tensor.id);\n\n        // Dispose the intermediate tensor for body function that is not global\n        // kept, not input/output of the body function\n        origResult.forEach(tensor => {\n          if (!tensor.kept && argIds.indexOf(tensor.id) === -1 &&\n              resultIds.indexOf(tensor.id) === -1) {\n            tensor.dispose();\n          }\n        });\n\n        // Recalcuate the condition of the loop using the latest results.\n        const condResult =\n            (await context.functionMap[condFunc].executeFunctionAsync(\n                result, context.tensorArrayMap, context.tensorListMap));\n        condValue = await condResult[0].data();\n        // Dispose the intermediate tensors for condition function\n        condResult.forEach(tensor => {\n          if (!tensor.kept && argIds.indexOf(tensor.id) === -1 &&\n              resultIds.indexOf(tensor.id) === -1) {\n            tensor.dispose();\n          }\n        });\n      }\n      return result;\n    }\n    case 'LoopCond': {\n      const pred = getParamValue('pred', node, tensorMap, context) as Tensor;\n      return [cloneTensor(pred)];\n    }\n    case 'Switch': {\n      const pred = getParamValue('pred', node, tensorMap, context) as Tensor;\n      let data = getParamValue('data', node, tensorMap, context) as Tensor;\n      if (!data.kept) {\n        data = cloneTensor(data);\n      }\n      // Outputs nodes :0 => false, :1 => true\n      return (await pred.data())[0] ? [undefined, data] : [data, undefined];\n    }\n    case 'Merge': {\n      const inputName = node.inputNames.find(\n          name => getTensor(name, tensorMap, context) !== undefined);\n      if (inputName) {\n        const data = getTensor(inputName, tensorMap, context);\n        return [cloneTensor(data)];\n      }\n      return undefined;\n    }\n    case 'Enter': {\n      const frameId =\n          getParamValue('frameName', node, tensorMap, context) as string;\n      const data = getParamValue('tensor', node, tensorMap, context) as Tensor;\n      context.enterFrame(frameId);\n      return [cloneTensor(data)];\n    }\n    case 'Exit': {\n      const data = getParamValue('tensor', node, tensorMap, context) as Tensor;\n      context.exitFrame();\n      return [cloneTensor(data)];\n    }\n    case 'NextIteration': {\n      const data = getParamValue('tensor', node, tensorMap, context) as Tensor;\n      context.nextIteration();\n      return [cloneTensor(data)];\n    }\n    case 'TensorArrayV3': {\n      const size = getParamValue('size', node, tensorMap, context) as number;\n      const dtype =\n          getParamValue('dtype', node, tensorMap, context) as DataType;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const dynamicSize =\n          getParamValue('dynamicSize', node, tensorMap, context) as boolean;\n      const clearAfterRead =\n          getParamValue('clearAfterRead', node, tensorMap, context) as boolean;\n      const identicalElementShapes =\n          getParamValue('identicalElementShapes', node, tensorMap, context) as\n          boolean;\n      const name = getParamValue('name', node, tensorMap, context) as string;\n      const tensorArray = new TensorArray(\n          name, dtype, size, elementShape, identicalElementShapes, dynamicSize,\n          clearAfterRead);\n      context.addTensorArray(tensorArray);\n      return [tensorArray.idTensor, scalar(1.0)];\n    }\n    case 'TensorArrayWriteV3': {\n      const id =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const index = getParamValue('index', node, tensorMap, context) as number;\n      const writeTensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const writeTensorArray = context.getTensorArray(id.id);\n      writeTensorArray.write(index, writeTensor);\n      return [writeTensorArray.idTensor];\n    }\n    case 'TensorArrayReadV3': {\n      const readId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const readIndex =\n          getParamValue('index', node, tensorMap, context) as number;\n      const readTensorArray = context.getTensorArray(readId.id);\n      return [readTensorArray.read(readIndex)];\n    }\n    case 'TensorArrayGatherV3': {\n      const gatherId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const gatherIndices =\n          getParamValue('indices', node, tensorMap, context) as number[];\n      const gatherDtype =\n          getParamValue('dtype', node, tensorMap, context) as DataType;\n      const gatherTensorArray = context.getTensorArray(gatherId.id);\n      return [gatherTensorArray.gather(gatherIndices, gatherDtype)];\n    }\n    case 'TensorArrayScatterV3': {\n      const scatterId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const scatterIndices =\n          getParamValue('indices', node, tensorMap, context) as number[];\n      const scatterTensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const scatterTensorArray = context.getTensorArray(scatterId.id);\n      scatterTensorArray.scatter(scatterIndices, scatterTensor);\n      return [scatterTensorArray.idTensor];\n    }\n    case 'TensorArrayConcatV3': {\n      const concatId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const concatTensorArray = context.getTensorArray(concatId.id);\n      const concatDtype =\n          getParamValue('dtype', node, tensorMap, context) as DataType;\n      return [concatTensorArray.concat(concatDtype)];\n    }\n    case 'TensorArraySplitV3': {\n      const splitId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const splitTensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const lengths =\n          getParamValue('lengths', node, tensorMap, context) as number[];\n      const splitTensorArray = context.getTensorArray(splitId.id);\n      splitTensorArray.split(lengths, splitTensor);\n      return [splitTensorArray.idTensor];\n    }\n    case 'TensorArraySizeV3': {\n      const sizeId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const sizeTensorArray = context.getTensorArray(sizeId.id);\n      return [scalar(sizeTensorArray.size(), 'int32')];\n    }\n    case 'TensorArrayCloseV3': {\n      const closeId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const closeTensorArray = context.getTensorArray(closeId.id);\n      closeTensorArray.clearAndClose();\n      return [closeTensorArray.idTensor];\n    }\n    case 'TensorListSetItem': {\n      const idTensor =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const index = getParamValue('index', node, tensorMap, context) as number;\n      const writeTensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const tensorList = context.getTensorList(idTensor.id);\n      tensorList.setItem(index, writeTensor);\n      return [tensorList.idTensor];\n    }\n    case 'TensorListGetItem': {\n      const idTensor =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const readIndex =\n          getParamValue('index', node, tensorMap, context) as number;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n\n      const elementDType =\n          getParamValue('elementDType', node, tensorMap, context) as DataType;\n      const tensorList = context.getTensorList(idTensor.id);\n      return [tensorList.getItem(readIndex, elementShape, elementDType)];\n    }\n    case 'TensorListScatterV2':\n    case 'TensorListScatter': {\n      const scatterIndices =\n          getParamValue('indices', node, tensorMap, context) as number[];\n      const scatterTensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const numElements =\n          getParamValue('numElements', node, tensorMap, context) as number;\n      const tensorList =\n          scatter(scatterTensor, scatterIndices, elementShape, numElements);\n      context.addTensorList(tensorList);\n      return [tensorList.idTensor];\n    }\n    case 'TensorListReserve':\n    case 'EmptyTensorList': {\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const elementDtype =\n          getParamValue('elementDType', node, tensorMap, context) as DataType;\n      let numElementsParam;\n\n      if (node.op === 'TensorListReserve') {\n        numElementsParam = 'numElements';\n      } else {\n        numElementsParam = 'maxNumElements';\n      }\n\n      const numElements =\n          getParamValue(numElementsParam, node, tensorMap, context) as number;\n\n      const tensorList = reserve(elementShape, elementDtype, numElements);\n      context.addTensorList(tensorList);\n      return [tensorList.idTensor];\n    }\n    case 'TensorListGather': {\n      const gatherId =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const gatherIndices =\n          getParamValue('indices', node, tensorMap, context) as number[];\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const elementDtype =\n          getParamValue('elementDType', node, tensorMap, context) as DataType;\n      const tensorList = context.getTensorList(gatherId.id);\n      return [tensorList.gather(gatherIndices, elementDtype, elementShape)];\n    }\n    case 'TensorListStack': {\n      const idTensor =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const elementDtype =\n          getParamValue('elementDType', node, tensorMap, context) as DataType;\n      const numElements =\n          getParamValue('numElements', node, tensorMap, context) as number;\n      const tensorList = context.getTensorList(idTensor.id);\n      return [tensorList.stack(elementShape, elementDtype, numElements)];\n    }\n    case 'TensorListFromTensor': {\n      const tensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const elementDtype =\n          getParamValue('elementDType', node, tensorMap, context) as DataType;\n      const tensorList = fromTensor(tensor, elementShape, elementDtype);\n      context.addTensorList(tensorList);\n      return [tensorList.idTensor];\n    }\n    case 'TensorListConcat': {\n      const concatId =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const tensorList = context.getTensorList(concatId.id);\n      const concatDtype =\n          getParamValue('dtype', node, tensorMap, context) as DataType;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      return [tensorList.concat(concatDtype, elementShape)];\n    }\n    case 'TensorListPushBack': {\n      const idTensor =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const writeTensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const tensorList = context.getTensorList(idTensor.id);\n      tensorList.pushBack(writeTensor);\n      return [tensorList.idTensor];\n    }\n    case 'TensorListPopBack': {\n      const idTensor =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const elementDType =\n          getParamValue('elementDType', node, tensorMap, context) as DataType;\n      const tensorList = context.getTensorList(idTensor.id);\n      return [tensorList.popBack(elementShape, elementDType)];\n    }\n    case 'TensorListSplit': {\n      const splitTensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const lengths =\n          getParamValue('lengths', node, tensorMap, context) as number[];\n\n      const tensorList = split(splitTensor, lengths, elementShape);\n      context.addTensorList(tensorList);\n      return [tensorList.idTensor];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'control';\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Rank, Tensor, Tensor3D, Tensor4D, Tensor5D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getPadding, getParamValue} from './utils';\n\nfunction fusedConvAndDepthWiseParams(\n    node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext) {\n  const [extraOp, activationFunc] =\n      (getParamValue('fusedOps', node, tensorMap, context) as string[]);\n\n  const isBiasAdd = extraOp === 'biasadd';\n  const noBiasAdd = !isBiasAdd;\n  const isPrelu = activationFunc === 'prelu';\n  const isBatchNorm = extraOp === 'fusedbatchnorm';\n\n  const numArgs =\n      (getParamValue('numArgs', node, tensorMap, context) as number);\n  if (isBiasAdd) {\n    if (isPrelu && numArgs !== 2) {\n      throw new Error(\n          'FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu ' +\n          'must have two extra arguments: bias and alpha.');\n    }\n    if (!isPrelu && isBiasAdd && numArgs !== 1) {\n      throw new Error(\n          'FusedConv2d and DepthwiseConv2d with BiasAdd must have ' +\n          'one extra argument: bias.');\n    }\n  }\n  if (isBatchNorm) {\n    throw new Error(\n        'FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported');\n  }\n  const stride = getParamValue('strides', node, tensorMap, context) as number[];\n  const pad = getPadding(node, tensorMap, context);\n  const dataFormat =\n      (getParamValue('dataFormat', node, tensorMap, context) as string)\n          .toUpperCase();\n  const dilations =\n      getParamValue('dilations', node, tensorMap, context) as number[];\n  let [biasArg, preluArg] =\n      getParamValue('args', node, tensorMap, context) as Tensor[];\n  if (noBiasAdd) {\n    preluArg = biasArg;\n    biasArg = undefined;\n  }\n  const leakyreluAlpha =\n      getParamValue('leakyreluAlpha', node, tensorMap, context) as number;\n\n  return {\n    stride,\n    pad,\n    dataFormat,\n    dilations,\n    biasArg,\n    preluArg,\n    activationFunc,\n    leakyreluAlpha\n  };\n}\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'Conv1D': {\n          const stride =\n              getParamValue('stride', node, tensorMap, context) as number;\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const dataFormat =\n              (getParamValue('dataFormat', node, tensorMap, context) as string)\n                  .toUpperCase();\n          const dilation =\n              getParamValue('dilation', node, tensorMap, context) as number;\n          return [tfOps.conv1d(\n              getParamValue('x', node, tensorMap, context) as Tensor3D,\n              getParamValue('filter', node, tensorMap, context) as Tensor3D,\n              stride, pad as 'valid' | 'same', dataFormat as 'NWC' | 'NCW',\n              dilation)];\n        }\n        case 'Conv2D': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getPadding(node, tensorMap, context);\n          const dataFormat =\n              (getParamValue('dataFormat', node, tensorMap, context) as string)\n                  .toUpperCase();\n          const dilations =\n              getParamValue('dilations', node, tensorMap, context) as number[];\n          return [tfOps.conv2d(\n              getParamValue('x', node, tensorMap, context) as Tensor3D |\n                  Tensor4D,\n              getParamValue('filter', node, tensorMap, context) as Tensor4D,\n              [stride[1], stride[2]], pad as 'valid' | 'same',\n              dataFormat as 'NHWC' | 'NCHW', [dilations[1], dilations[2]])];\n        }\n        case '_FusedConv2D': {\n          const {\n            stride,\n            pad,\n            dataFormat,\n            dilations,\n            biasArg,\n            preluArg,\n            activationFunc,\n            leakyreluAlpha\n          } = fusedConvAndDepthWiseParams(node, tensorMap, context);\n\n          return [tfOps.fused.conv2d({\n            x: getParamValue('x', node, tensorMap, context) as Tensor3D |\n                Tensor4D,\n            filter: getParamValue('filter', node, tensorMap, context) as\n                Tensor4D,\n            strides: [stride[1], stride[2]],\n            pad: pad as 'valid' | 'same',\n            dataFormat: dataFormat as 'NHWC' | 'NCHW',\n            dilations: [dilations[1], dilations[2]],\n            bias: biasArg,\n            activation: activationFunc as tfOps.fused.Activation,\n            preluActivationWeights: preluArg,\n            leakyreluAlpha\n          })];\n        }\n\n        case 'FusedDepthwiseConv2dNative': {\n          const {\n            stride,\n            pad,\n            dataFormat,\n            dilations,\n            biasArg,\n            preluArg,\n            activationFunc,\n            leakyreluAlpha,\n          } = fusedConvAndDepthWiseParams(node, tensorMap, context);\n\n          return [tfOps.fused.depthwiseConv2d({\n            x: getParamValue('x', node, tensorMap, context) as Tensor3D |\n                Tensor4D,\n            filter: getParamValue('filter', node, tensorMap, context) as\n                Tensor4D,\n            strides: [stride[1], stride[2]],\n            pad: pad as 'valid' | 'same',\n            dataFormat: dataFormat as 'NHWC' | 'NCHW',\n            dilations: [dilations[1], dilations[2]],\n            bias: biasArg,\n            activation: activationFunc as tfOps.fused.Activation,\n            preluActivationWeights: preluArg,\n            leakyreluAlpha\n          })];\n        }\n        case 'Conv2DBackpropInput':\n        case 'Conv2dTranspose': {\n          const shape = getParamValue(\n                            'outputShape', node, tensorMap,\n                            context) as [number, number, number] |\n              [number, number, number, number];\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getPadding(node, tensorMap, context);\n          return [tfOps.conv2dTranspose(\n              getParamValue('x', node, tensorMap, context) as Tensor3D |\n                  Tensor4D,\n              getParamValue('filter', node, tensorMap, context) as Tensor4D,\n              shape, [stride[1], stride[2]], pad as 'valid' | 'same')];\n        }\n        case 'DepthwiseConv2dNative':\n        case 'DepthwiseConv2d': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getPadding(node, tensorMap, context);\n          const dilations =\n              getParamValue('dilations', node, tensorMap, context) as number[];\n          const dataFormat =\n              (getParamValue('dataFormat', node, tensorMap, context) as string)\n                  .toUpperCase();\n\n          return [tfOps.depthwiseConv2d(\n              getParamValue('input', node, tensorMap, context) as Tensor3D |\n                  Tensor4D,\n              getParamValue('filter', node, tensorMap, context) as Tensor4D,\n              [stride[1], stride[2]], pad as 'valid' | 'same',\n              dataFormat as 'NHWC' | 'NCHW', [dilations[1], dilations[2]])];\n        }\n        case 'Conv3D': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const dataFormat =\n              (getParamValue('dataFormat', node, tensorMap, context) as string)\n                  .toUpperCase();\n          const dilations =\n              getParamValue('dilations', node, tensorMap, context) as number[];\n          return [tfOps.conv3d(\n              getParamValue('x', node, tensorMap, context) as Tensor4D |\n                  Tensor<Rank.R5>,\n              getParamValue('filter', node, tensorMap, context) as\n                  Tensor<Rank.R5>,\n              [stride[1], stride[2], stride[3]], pad as 'valid' | 'same',\n              dataFormat as 'NDHWC' | 'NCDHW',\n              [dilations[1], dilations[2], dilations[3]])];\n        }\n        case 'AvgPool': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const kernelSize =\n              getParamValue('kernelSize', node, tensorMap, context) as number[];\n\n          return [tfOps.avgPool(\n              getParamValue('x', node, tensorMap, context) as Tensor3D |\n                  Tensor4D,\n              [kernelSize[1], kernelSize[2]], [stride[1], stride[2]],\n              pad as 'valid' | 'same')];\n        }\n        case 'MaxPool': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const kernelSize =\n              getParamValue('kernelSize', node, tensorMap, context) as number[];\n\n          return [tfOps.maxPool(\n              getParamValue('x', node, tensorMap, context) as Tensor3D |\n                  Tensor4D,\n              [kernelSize[1], kernelSize[2]], [stride[1], stride[2]],\n              pad as 'valid' | 'same')];\n        }\n        case 'MaxPoolWithArgmax': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const kernelSize =\n              getParamValue('kernelSize', node, tensorMap, context) as number[];\n          const includeBatchInIndex =\n              getParamValue('includeBatchInIndex', node, tensorMap, context) as\n              boolean;\n          const {result, indexes} = tfOps.maxPoolWithArgmax(\n              getParamValue('x', node, tensorMap, context) as Tensor4D,\n              [kernelSize[1], kernelSize[2]], [stride[1], stride[2]],\n              pad as 'valid' | 'same', includeBatchInIndex);\n          return [result, indexes];\n        }\n        case 'AvgPool3D': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const kernelSize =\n              getParamValue('kernelSize', node, tensorMap, context) as number[];\n\n          return [tfOps.avgPool3d(\n              getParamValue('x', node, tensorMap, context) as Tensor5D,\n              [kernelSize[1], kernelSize[2], kernelSize[3]],\n              [stride[1], stride[2], stride[3]], pad as 'valid' | 'same')];\n        }\n\n        case 'MaxPool3D': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const kernelSize =\n              getParamValue('kernelSize', node, tensorMap, context) as number[];\n\n          return [tfOps.maxPool3d(\n              getParamValue('x', node, tensorMap, context) as Tensor5D,\n              [kernelSize[1], kernelSize[2], kernelSize[3]],\n              [stride[1], stride[2], stride[3]], pad as 'valid' | 'same')];\n        }\n\n        case 'Dilation2D': {\n          const strides =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const dilations =\n              getParamValue('dilations', node, tensorMap, context) as number[];\n\n          // strides: [1, stride_height, stride_width, 1].\n          const strideHeight = strides[1];\n          const strideWidth = strides[2];\n\n          // dilations: [1, dilation_height, dilation_width, 1].\n          const dilationHeight = dilations[1];\n          const dilationWidth = dilations[2];\n\n          return [tfOps.dilation2d(\n              getParamValue('x', node, tensorMap, context) as Tensor3D |\n                  Tensor4D,\n              getParamValue('filter', node, tensorMap, context) as Tensor3D,\n              [strideHeight, strideWidth], pad as 'valid' | 'same',\n              [dilationHeight, dilationWidth], 'NHWC' /* dataFormat */)];\n        }\n\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'convolution';\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, Tensor, Tensor1D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'Fill': {\n          const shape =\n              getParamValue('shape', node, tensorMap, context) as number[];\n          const dtype =\n              getParamValue('dtype', node, tensorMap, context) as DataType;\n          const value =\n              getParamValue('value', node, tensorMap, context) as number;\n          return [tfOps.fill(shape, value, dtype)];\n        }\n        case 'LinSpace': {\n          const start =\n              getParamValue('start', node, tensorMap, context) as number;\n          const stop =\n              getParamValue('stop', node, tensorMap, context) as number;\n          const num = getParamValue('num', node, tensorMap, context) as number;\n          return [tfOps.linspace(start, stop, num)];\n        }\n        case 'Multinomial': {\n          const logits =\n              getParamValue('logits', node, tensorMap, context) as Tensor1D;\n          const numSamples =\n              getParamValue('numSamples', node, tensorMap, context) as number;\n          const seed =\n              getParamValue('seed', node, tensorMap, context) as number;\n          return [tfOps.multinomial(logits, numSamples, seed)];\n        }\n        case 'OneHot': {\n          const indices =\n              getParamValue('indices', node, tensorMap, context) as Tensor1D;\n          const depth =\n              getParamValue('depth', node, tensorMap, context) as number;\n          const onValue =\n              getParamValue('onValue', node, tensorMap, context) as number;\n          const offValue =\n              getParamValue('offValue', node, tensorMap, context) as number;\n          return [tfOps.oneHot(indices, depth, onValue, offValue)];\n        }\n        case 'Ones': {\n          return [tfOps.ones(\n              getParamValue('shape', node, tensorMap, context) as number[],\n              getParamValue('dtype', node, tensorMap, context) as DataType)];\n        }\n        case 'OnesLike': {\n          return [tfOps.onesLike(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'RandomUniform': {\n          return [tfOps.randomUniform(\n              // tslint:disable-next-line:no-any\n              getParamValue('shape', node, tensorMap, context) as any,\n              getParamValue('minval', node, tensorMap, context) as number,\n              getParamValue('maxval', node, tensorMap, context) as number,\n              getParamValue('dtype', node, tensorMap, context) as DataType)];\n        }\n        case 'Range': {\n          const start =\n              getParamValue('start', node, tensorMap, context) as number;\n          const stop =\n              getParamValue('stop', node, tensorMap, context) as number;\n          const step =\n              getParamValue('step', node, tensorMap, context) as number;\n          return [tfOps.range(\n              start, stop, step,\n              getParamValue('dtype', node, tensorMap, context) as 'float32' |\n                  'int32')];\n        }\n        case 'TruncatedNormal': {\n          const shape =\n              getParamValue('shape', node, tensorMap, context) as number[];\n          const mean =\n              getParamValue('mean', node, tensorMap, context) as number;\n          const stdDev =\n              getParamValue('stdDev', node, tensorMap, context) as number;\n          const seed =\n              getParamValue('seed', node, tensorMap, context) as number;\n          return [tfOps.truncatedNormal(\n              shape, mean, stdDev,\n              getParamValue('dtype', node, tensorMap, context) as 'float32' |\n                  'int32',\n              seed)];\n        }\n        case 'Zeros': {\n          return [tfOps.zeros(\n              getParamValue('shape', node, tensorMap, context) as number[],\n              getParamValue('dtype', node, tensorMap, context) as DataType)];\n        }\n        case 'ZerosLike': {\n          return [tfOps.zerosLike(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'creation';\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor, Tensor1D, Tensor2D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpAsyncExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nfunction nmsParams(\n    node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext) {\n  const boxes = getParamValue('boxes', node, tensorMap, context) as Tensor;\n  const scores = getParamValue('scores', node, tensorMap, context) as Tensor;\n  const maxOutputSize =\n      getParamValue('maxOutputSize', node, tensorMap, context) as number;\n  const iouThreshold =\n      getParamValue('iouThreshold', node, tensorMap, context) as number;\n  const scoreThreshold =\n      getParamValue('scoreThreshold', node, tensorMap, context) as number;\n  const softNmsSigma =\n      getParamValue('softNmsSigma', node, tensorMap, context) as number;\n\n  return {\n    boxes,\n    scores,\n    maxOutputSize,\n    iouThreshold,\n    scoreThreshold,\n    softNmsSigma\n  };\n}\n\nexport const executeOp: InternalOpAsyncExecutor = async(\n    node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext): Promise<Tensor[]> => {\n  switch (node.op) {\n    case 'NonMaxSuppressionV5': {\n      const {\n        boxes,\n        scores,\n        maxOutputSize,\n        iouThreshold,\n        scoreThreshold,\n        softNmsSigma\n      } = nmsParams(node, tensorMap, context);\n\n      const result = await tfOps.image.nonMaxSuppressionWithScoreAsync(\n          boxes as Tensor2D, scores as Tensor1D, maxOutputSize, iouThreshold,\n          scoreThreshold, softNmsSigma);\n\n      return [result.selectedIndices, result.selectedScores];\n    }\n    case 'NonMaxSuppressionV4': {\n      const {boxes, scores, maxOutputSize, iouThreshold, scoreThreshold} =\n          nmsParams(node, tensorMap, context);\n\n      const padToMaxOutputSize =\n          getParamValue('padToMaxOutputSize', node, tensorMap, context) as\n          boolean;\n\n      const result = await tfOps.image.nonMaxSuppressionPaddedAsync(\n          boxes as Tensor2D, scores as Tensor1D, maxOutputSize, iouThreshold,\n          scoreThreshold, padToMaxOutputSize);\n\n      return [result.selectedIndices, result.validOutputs];\n    }\n    case 'NonMaxSuppressionV3':\n    case 'NonMaxSuppressionV2': {\n      const {boxes, scores, maxOutputSize, iouThreshold, scoreThreshold} =\n          nmsParams(node, tensorMap, context);\n\n      return [await tfOps.image.nonMaxSuppressionAsync(\n          boxes as Tensor2D, scores as Tensor1D, maxOutputSize, iouThreshold,\n          scoreThreshold)];\n    }\n    case 'Where': {\n      const condition = tfOps.cast(\n          (getParamValue('condition', node, tensorMap, context) as Tensor),\n          'bool');\n      const result = [await tfOps.whereAsync(condition)];\n      condition.dispose();\n      return result;\n    }\n    case 'ListDiff': {\n      return tfOps.setdiff1dAsync(\n          getParamValue('x', node, tensorMap, context) as Tensor,\n          getParamValue('y', node, tensorMap, context) as Tensor);\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'dynamic';\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext):\n        Tensor[] => {\n          switch (node.op) {\n            case 'TopKV2': {\n              const x = getParamValue('x', node, tensorMap, context) as Tensor;\n              const k = getParamValue('k', node, tensorMap, context) as number;\n              const sorted =\n                  getParamValue('sorted', node, tensorMap, context) as boolean;\n              const result = tfOps.topk(x, k, sorted);\n              return [result.values, result.indices];\n            }\n            case 'Unique': {\n              const x = getParamValue('x', node, tensorMap, context) as Tensor;\n              const result = tfOps.unique(x);\n              return [result.values, result.indices];\n            }\n            case 'UniqueV2': {\n              const x = getParamValue('x', node, tensorMap, context) as Tensor;\n              const axis =\n                  getParamValue('axis', node, tensorMap, context) as number;\n              const result = tfOps.unique(x, axis);\n              return [result.values, result.indices];\n            }\n            default:\n              throw TypeError(`Node type ${node.op} is not implemented`);\n          }\n        };\n\nexport const CATEGORY = 'evaluation';\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {cloneTensor, getParamValue, getTensor} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'Const': {\n          return tensorMap[node.name];\n        }\n        case 'PlaceholderWithDefault':\n          const def =\n              getParamValue('default', node, tensorMap, context) as Tensor;\n          return [getTensor(node.name, tensorMap, context) || def];\n        case 'Placeholder':\n          return [getTensor(node.name, tensorMap, context)];\n        case 'Identity':\n        case 'StopGradient':\n        case 'FakeQuantWithMinMaxVars': {  // This op is currently ignored.\n          const data = getParamValue('x', node, tensorMap, context) as Tensor;\n          return [cloneTensor(data)];\n        }\n        case 'IdentityN':\n          return (getParamValue('x', node, tensorMap, context) as Tensor[])\n              .map((t: Tensor) => cloneTensor(t));\n        case 'Snapshot':\n          const snapshot =\n              (getParamValue('x', node, tensorMap, context) as Tensor);\n          return [cloneTensor(snapshot)];\n        case 'Shape':\n          return [tfOps.tensor1d(\n              (getParamValue('x', node, tensorMap, context) as Tensor).shape,\n              'int32')];\n        case 'ShapeN':\n          return (getParamValue('x', node, tensorMap, context) as Tensor[])\n              .map((t: Tensor) => tfOps.tensor1d(t.shape));\n        case 'Size':\n          return [tfOps.scalar(\n              (getParamValue('x', node, tensorMap, context) as Tensor).size,\n              'int32')];\n        case 'Rank':\n          return [tfOps.scalar(\n              (getParamValue('x', node, tensorMap, context) as Tensor).rank,\n              'int32')];\n        case 'NoOp':\n          return [tfOps.scalar(1)];\n        case 'Print':\n          const input = getParamValue('x', node, tensorMap, context) as Tensor;\n          const data =\n              getParamValue('data', node, tensorMap, context) as Tensor[];\n          const message =\n              getParamValue('message', node, tensorMap, context) as string;\n          const summarize =\n              getParamValue('summarize', node, tensorMap, context) as number;\n          console.warn(\n              'The graph has a tf.print() operation,' +\n              'usually used for debugging, which slows down performance.');\n          console.log(message);\n          for (let i = 0; i < data.length; i++) {\n            console.log(Array.prototype.slice.call(data[i].dataSync())\n                            .slice(0, summarize));\n          }\n          return [input];\n\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'graph';\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {DataType, keep, scalar, stack, Tensor, tidy, unstack, util} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\n/**\n * Hashtable contains a set of tensors, which can be accessed by key.\n */\nexport class HashTable {\n  readonly handle: Tensor;\n\n  // tslint:disable-next-line: no-any\n  private tensorMap: Map<any, Tensor>;\n\n  get id() {\n    return this.handle.id;\n  }\n\n  /**\n   * Constructor of HashTable. Creates a hash table.\n   *\n   * @param keyDType `dtype` of the table keys.\n   * @param valueDType `dtype` of the table values.\n   */\n  constructor(readonly keyDType: DataType, readonly valueDType: DataType) {\n    this.handle = scalar(0);\n    // tslint:disable-next-line: no-any\n    this.tensorMap = new Map<any, Tensor>();\n\n    keep(this.handle);\n  }\n\n  /**\n   * Dispose the tensors and handle and clear the hashtable.\n   */\n  clearAndClose() {\n    this.tensorMap.forEach(value => value.dispose());\n    this.tensorMap.clear();\n    this.handle.dispose();\n  }\n\n  /**\n   * The number of items in the hash table.\n   */\n  size(): number {\n    return this.tensorMap.size;\n  }\n\n  /**\n   * The number of items in the hash table as a rank-0 tensor.\n   */\n  tensorSize(): Tensor {\n    return tfOps.scalar(this.size(), 'int32');\n  }\n\n  /**\n   * Replaces the contents of the table with the specified keys and values.\n   * @param keys Keys to store in the hashtable.\n   * @param values Values to store in the hashtable.\n   */\n  async import(keys: Tensor, values: Tensor): Promise<Tensor> {\n    this.checkKeyAndValueTensor(keys, values);\n\n    // We only store the primitive values of the keys, this allows lookup\n    // to be O(1).\n    const $keys = await keys.data();\n\n    // Clear the hashTable before inserting new values.\n    this.tensorMap.forEach(value => value.dispose());\n    this.tensorMap.clear();\n\n    return tidy(() => {\n      const $values = unstack(values);\n\n      const keysLength = $keys.length;\n      const valuesLength = $values.length;\n\n      util.assert(\n          keysLength === valuesLength,\n          () => `The number of elements doesn't match, keys has ` +\n              `${keysLength} elements, the values has ${valuesLength} ` +\n              `elements.`);\n\n      for (let i = 0; i < keysLength; i++) {\n        const key = $keys[i];\n        const value = $values[i];\n\n        keep(value);\n        this.tensorMap.set(key, value);\n      }\n\n      return this.handle;\n    });\n  }\n\n  /**\n   * Looks up keys in a hash table, outputs the corresponding values.\n   *\n   * Performs batch lookups, for every element in the key tensor, `find`\n   * stacks the corresponding value into the return tensor.\n   *\n   * If an element is not present in the table, the given `defaultValue` is\n   * used.\n   *\n   * @param keys Keys to look up. Must have the same type as the keys of the\n   *     table.\n   * @param defaultValue The scalar `defaultValue` is the value output for keys\n   *     not present in the table. It must also be of the same type as the\n   *     table values.\n   */\n  async find(keys: Tensor, defaultValue: Tensor): Promise<Tensor> {\n    this.checkKeyAndValueTensor(keys, defaultValue);\n\n    const $keys = await keys.data();\n\n    return tidy(() => {\n      const result: Tensor[] = [];\n\n      for (let i = 0; i < $keys.length; i++) {\n        const key = $keys[i];\n\n        const value = this.findWithDefault(key, defaultValue);\n        result.push(value);\n      }\n\n      return stack(result);\n    });\n  }\n\n  // tslint:disable-next-line: no-any\n  private findWithDefault(key: any, defaultValue: Tensor): Tensor {\n    const result = this.tensorMap.get(key);\n\n    return result != null ? result : defaultValue;\n  }\n\n  private checkKeyAndValueTensor(key: Tensor, value: Tensor) {\n    if (key.dtype !== this.keyDType) {\n      throw new Error(\n          `Expect key dtype ${this.keyDType}, but got ` +\n          `${key.dtype}`);\n    }\n\n    if (value.dtype !== this.valueDType) {\n      throw new Error(\n          `Expect value dtype ${this.valueDType}, but got ` +\n          `${value.dtype}`);\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, Tensor} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {HashTable} from '../../executor/hash_table';\nimport {ResourceManager} from '../../executor/resource_manager';\nimport {InternalOpAsyncExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpAsyncExecutor = async(\n    node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext,\n    resourceManager: ResourceManager): Promise<Tensor[]> => {\n  switch (node.op) {\n    case 'HashTable':\n    case 'HashTableV2': {\n      const keyDType =\n          getParamValue('keyDType', node, tensorMap, context) as DataType;\n      const valueDType =\n          getParamValue('valueDType', node, tensorMap, context) as DataType;\n\n      const hashTable = new HashTable(keyDType, valueDType);\n      resourceManager.addHashTable(node.name, hashTable);\n      return [hashTable.handle];\n    }\n    case 'LookupTableImport':\n    case 'LookupTableImportV2': {\n      const handle = getParamValue(\n                         'tableHandle', node, tensorMap, context,\n                         resourceManager) as Tensor;\n      const keys = getParamValue('keys', node, tensorMap, context) as Tensor;\n      const values =\n          getParamValue('values', node, tensorMap, context) as Tensor;\n\n      const hashTable = resourceManager.getHashTableById(handle.id);\n\n      return [await hashTable.import(keys, values)];\n    }\n    case 'LookupTableFind':\n    case 'LookupTableFindV2': {\n      const handle = getParamValue(\n                         'tableHandle', node, tensorMap, context,\n                         resourceManager) as Tensor;\n      const keys = getParamValue('keys', node, tensorMap, context) as Tensor;\n      const defaultValue =\n          getParamValue('defaultValue', node, tensorMap, context) as Tensor;\n\n      const hashTable = resourceManager.getHashTableById(handle.id);\n      return [await hashTable.find(keys, defaultValue)];\n    }\n    case 'LookupTableSize':\n    case 'LookupTableSizeV2': {\n      const handle = getParamValue(\n                         'tableHandle', node, tensorMap, context,\n                         resourceManager) as Tensor;\n\n      const hashTable = resourceManager.getHashTableById(handle.id);\n      return [hashTable.tensorSize()];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'hash_table';\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor, Tensor1D, Tensor2D, Tensor3D, Tensor4D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'ResizeBilinear': {\n          const images =\n              getParamValue('images', node, tensorMap, context) as Tensor;\n          const size =\n              getParamValue('size', node, tensorMap, context) as number[];\n          const alignCorners =\n              getParamValue('alignCorners', node, tensorMap, context) as\n              boolean;\n          const halfPixelCenters =\n              getParamValue('halfPixelCenters', node, tensorMap, context) as\n              boolean;\n          return [tfOps.image.resizeBilinear(\n              images as Tensor3D | Tensor4D, [size[0], size[1]], alignCorners,\n              halfPixelCenters)];\n        }\n        case 'ResizeNearestNeighbor': {\n          const images =\n              getParamValue('images', node, tensorMap, context) as Tensor;\n          const size =\n              getParamValue('size', node, tensorMap, context) as number[];\n          const alignCorners =\n              getParamValue('alignCorners', node, tensorMap, context) as\n              boolean;\n          const halfPixelCenters =\n              getParamValue('halfPixelCenters', node, tensorMap, context) as\n              boolean;\n          return [tfOps.image.resizeNearestNeighbor(\n              images as Tensor3D | Tensor4D, [size[0], size[1]], alignCorners,\n              halfPixelCenters)];\n        }\n        case 'CropAndResize': {\n          const image =\n              getParamValue('image', node, tensorMap, context) as Tensor;\n          const boxes =\n              getParamValue('boxes', node, tensorMap, context) as Tensor;\n          const boxInd =\n              getParamValue('boxInd', node, tensorMap, context) as Tensor;\n          const cropSize =\n              getParamValue('cropSize', node, tensorMap, context) as number[];\n          const method =\n              getParamValue('method', node, tensorMap, context) as string;\n          const extrapolationValue =\n              getParamValue('extrapolationValue', node, tensorMap, context) as\n              number;\n          return [tfOps.image.cropAndResize(\n              image as Tensor4D, boxes as Tensor2D, boxInd as Tensor1D,\n              cropSize as [number, number], method as 'bilinear' | 'nearest',\n              extrapolationValue)];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'image';\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'Equal': {\n          return [tfOps.equal(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'NotEqual': {\n          return [tfOps.notEqual(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'Greater': {\n          return [tfOps.greater(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'GreaterEqual': {\n          return [tfOps.greaterEqual(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'Less': {\n          return [tfOps.less(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'LessEqual': {\n          return [tfOps.lessEqual(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'LogicalAnd': {\n          return [tfOps.logicalAnd(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'LogicalNot': {\n          return [tfOps.logicalNot(\n              getParamValue('a', node, tensorMap, context) as Tensor)];\n        }\n        case 'LogicalOr': {\n          return [tfOps.logicalOr(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'Select':\n        case 'SelectV2': {\n          return [tfOps.where(\n              getParamValue('condition', node, tensorMap, context) as Tensor,\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'logical';\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor, Tensor2D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'BatchMatMul':\n        case 'BatchMatMulV2':\n        case 'MatMul':\n          return [tfOps.matMul(\n              getParamValue('a', node, tensorMap, context) as Tensor2D,\n              getParamValue('b', node, tensorMap, context) as Tensor2D,\n              getParamValue('transposeA', node, tensorMap, context) as boolean,\n              getParamValue('transposeB', node, tensorMap, context) as\n                  boolean)];\n\n        case 'Einsum':\n          return [tfOps.einsum(\n              getParamValue('equation', node, tensorMap, context) as string,\n              ...getParamValue('tensors', node, tensorMap, context) as\n                  Tensor[])];\n\n        case 'Transpose':\n          return [tfOps.transpose(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('perm', node, tensorMap, context) as number[])];\n\n        case '_FusedMatMul':\n          const [extraOp, activationFunc] =\n              (getParamValue('fusedOps', node, tensorMap, context) as string[]);\n\n          const isBiasAdd = extraOp === 'biasadd';\n          const isPrelu = activationFunc === 'prelu';\n\n          const numArgs =\n              (getParamValue('numArgs', node, tensorMap, context) as number);\n          const leakyreluAlpha =\n              getParamValue('leakyreluAlpha', node, tensorMap, context) as\n              number;\n\n          if (isBiasAdd) {\n            if (isPrelu && numArgs !== 2) {\n              throw new Error(\n                  'Fused MatMul with BiasAdd and Prelu must have two ' +\n                  'extra arguments: bias and alpha.');\n            }\n            if (!isPrelu && numArgs !== 1) {\n              throw new Error(\n                  'Fused MatMul with BiasAdd must have one extra argument: bias.');\n            }\n          }\n          const [biasArg, preluArg] =\n              getParamValue('args', node, tensorMap, context) as Tensor[];\n          return [tfOps.fused.matMul({\n            a: getParamValue('a', node, tensorMap, context) as Tensor2D,\n            b: getParamValue('b', node, tensorMap, context) as Tensor2D,\n            transposeA: getParamValue('transposeA', node, tensorMap, context) as\n                boolean,\n            transposeB: getParamValue('transposeB', node, tensorMap, context) as\n                boolean,\n            bias: biasArg,\n            activation: activationFunc as tfOps.fused.Activation,\n            preluActivationWeights: preluArg,\n            leakyreluAlpha\n          })];\n\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'matrices';\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Scalar, Tensor, Tensor3D, Tensor4D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'FusedBatchNorm':\n        case 'FusedBatchNormV2': {\n          return [tfOps.batchNorm(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('mean', node, tensorMap, context) as Tensor,\n              getParamValue('variance', node, tensorMap, context) as Tensor,\n              getParamValue('offset', node, tensorMap, context) as Tensor,\n              getParamValue('scale', node, tensorMap, context) as Tensor,\n              getParamValue('epsilon', node, tensorMap, context) as number)];\n        }\n        case 'FusedBatchNormV3': {\n          return [tfOps.batchNorm(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('mean', node, tensorMap, context) as Tensor,\n              getParamValue('variance', node, tensorMap, context) as Tensor,\n              getParamValue('offset', node, tensorMap, context) as Tensor,\n              getParamValue('scale', node, tensorMap, context) as Tensor,\n              getParamValue('epsilon', node, tensorMap, context) as number)];\n        }\n        case 'LRN': {\n          return [tfOps.localResponseNormalization(\n              getParamValue('x', node, tensorMap, context) as Tensor3D |\n                  Tensor4D,\n              getParamValue('radius', node, tensorMap, context) as number,\n              getParamValue('bias', node, tensorMap, context) as number,\n              getParamValue('alpha', node, tensorMap, context) as number,\n              getParamValue('beta', node, tensorMap, context) as number)];\n        }\n        case 'Softmax': {\n          return [tfOps.softmax(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'LogSoftmax': {\n          return [tfOps.logSoftmax(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'SparseToDense': {\n          return [tfOps.sparseToDense(\n              getParamValue('sparseIndices', node, tensorMap, context) as\n                  Tensor,\n              getParamValue('outputShape', node, tensorMap, context) as Tensor,\n              getParamValue('sparseValues', node, tensorMap, context) as\n                  number[],\n              getParamValue('defaultValue', node, tensorMap, context) as\n                  Scalar)];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'normalization';\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor, Tensor1D, Tensor2D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'Max': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number[];\n          const keepDims =\n              getParamValue('keepDims', node, tensorMap, context) as boolean;\n          return [tfOps.max(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis,\n              keepDims)];\n        }\n        case 'Mean': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number[];\n          const keepDims =\n              getParamValue('keepDims', node, tensorMap, context) as boolean;\n          return [tfOps.mean(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis,\n              keepDims)];\n        }\n        case 'Min': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number[];\n          const keepDims =\n              getParamValue('keepDims', node, tensorMap, context) as boolean;\n          return [tfOps.min(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis,\n              keepDims)];\n        }\n        case 'Sum': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number[];\n          const keepDims =\n              getParamValue('keepDims', node, tensorMap, context) as boolean;\n          return [tfOps.sum(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis,\n              keepDims)];\n        }\n        case 'All': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number[];\n          const keepDims =\n              getParamValue('keepDims', node, tensorMap, context) as boolean;\n          return [tfOps.all(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis,\n              keepDims)];\n        }\n        case 'Any': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number[];\n          const keepDims =\n              getParamValue('keepDims', node, tensorMap, context) as boolean;\n          return [tfOps.any(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis,\n              keepDims)];\n        }\n        case 'ArgMax': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number;\n          return [tfOps.argMax(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis)];\n        }\n        case 'ArgMin': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number;\n          return [tfOps.argMin(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis)];\n        }\n        case 'Prod': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number[];\n          const keepDims =\n              getParamValue('keepDims', node, tensorMap, context) as boolean;\n          return [tfOps.prod(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis,\n              keepDims)];\n        }\n        case 'Cumsum': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number;\n          const exclusive =\n              getParamValue('exclusive', node, tensorMap, context) as boolean;\n          const reverse =\n              getParamValue('reverse', node, tensorMap, context) as boolean;\n          return [tfOps.cumsum(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis,\n              exclusive, reverse)];\n        }\n        case 'Bincount':\n          const x = getParamValue('x', node, tensorMap, context) as Tensor1D;\n          const weights =\n              getParamValue('weights', node, tensorMap, context) as Tensor1D;\n          const size =\n              getParamValue('size', node, tensorMap, context) as number;\n\n          return [tfOps.bincount(x, weights, size)];\n        case 'DenseBincount': {\n          const x = getParamValue('x', node, tensorMap, context) as Tensor1D |\n              Tensor2D;\n          const weights =\n              getParamValue('weights', node, tensorMap, context) as Tensor1D |\n              Tensor2D;\n          const size =\n              getParamValue('size', node, tensorMap, context) as number;\n\n          const binaryOutput =\n              getParamValue('binaryOutput', node, tensorMap, context) as\n              boolean;\n\n          return [tfOps.denseBincount(x, weights, size, binaryOutput)];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'reduction';\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Scalar, Tensor, Tensor1D, tidy, util} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'ConcatV2':\n        case 'Concat': {\n          const n = getParamValue('n', node, tensorMap, context) as number;\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number;\n          let inputs =\n              getParamValue('tensors', node, tensorMap, context) as Tensor[];\n          inputs = inputs.slice(0, n);\n          return [tfOps.concat(inputs, axis)];\n        }\n        case 'Gather': {\n          const input = getParamValue('x', node, tensorMap, context) as Tensor;\n          const indices =\n              getParamValue('indices', node, tensorMap, context) as Tensor1D;\n          return [tfOps.gather(input, tfOps.cast(indices, 'int32'), 0)];\n        }\n        case 'GatherV2': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number;\n          const batchDims =\n              getParamValue('batchDims', node, tensorMap, context) as number;\n          const input = getParamValue('x', node, tensorMap, context) as Tensor;\n          const indices =\n              getParamValue('indices', node, tensorMap, context) as Tensor1D;\n          return [tfOps.gather(\n              input, tfOps.cast(indices, 'int32'), axis, batchDims)];\n        }\n        case 'Reverse': {\n          const dims =\n              getParamValue('dims', node, tensorMap, context) as boolean[];\n          const axis = [];\n          for (let i = 0; i < dims.length; i++) {\n            if (dims[i]) {\n              axis.push(i);\n            }\n          }\n          const input = getParamValue('x', node, tensorMap, context) as Tensor;\n          return [tfOps.reverse(input, axis)];\n        }\n        case 'ReverseV2': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number[];\n          const input = getParamValue('x', node, tensorMap, context) as Tensor;\n          return [tfOps.reverse(input, axis)];\n        }\n        case 'Slice': {\n          // tslint:disable-next-line:no-any\n          const begin = getParamValue('begin', node, tensorMap, context) as any;\n          // tslint:disable-next-line:no-any\n          const size = getParamValue('size', node, tensorMap, context) as any;\n          return [tfOps.slice(\n              getParamValue('x', node, tensorMap, context) as Tensor, begin,\n              size)];\n        }\n        case 'StridedSlice': {\n          const begin =\n              getParamValue('begin', node, tensorMap, context) as number[];\n          const end =\n              getParamValue('end', node, tensorMap, context) as number[];\n          const strides =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const beginMask =\n              getParamValue('beginMask', node, tensorMap, context) as number;\n          const endMask =\n              getParamValue('endMask', node, tensorMap, context) as number;\n          const ellipsisMask =\n              getParamValue('ellipsisMask', node, tensorMap, context) as number;\n          const newAxisMask =\n              getParamValue('newAxisMask', node, tensorMap, context) as number;\n          const shrinkAxisMask =\n              getParamValue('shrinkAxisMask', node, tensorMap, context) as\n              number;\n          const tensor = getParamValue('x', node, tensorMap, context) as Tensor;\n\n          return [tfOps.stridedSlice(\n              tensor, begin, end, strides, beginMask, endMask, ellipsisMask,\n              newAxisMask, shrinkAxisMask)];\n        }\n        case 'Pack': {\n          return tidy(() => {\n            const axis =\n                getParamValue('axis', node, tensorMap, context) as number;\n            const tensors =\n                getParamValue('tensors', node, tensorMap, context) as Tensor[];\n            // Reshape the tensors to the first tensor's shape if they don't\n            // match.\n            const shape = tensors[0].shape;\n            const squeezedShape = tfOps.squeeze(tensors[0]).shape;\n            const mapped = tensors.map(tensor => {\n              const sameShape = util.arraysEqual(tensor.shape, shape);\n              if (!sameShape &&\n                  !util.arraysEqual(\n                      tfOps.squeeze(tensor).shape, squeezedShape)) {\n                throw new Error('the input tensors shape does not match');\n              }\n              return sameShape ? tensor : tfOps.reshape(tensor, shape);\n            });\n            return [tfOps.stack(mapped, axis)];\n          });\n        }\n        case 'Unpack': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number;\n          const tensor =\n              getParamValue('tensor', node, tensorMap, context) as Tensor;\n          return tfOps.unstack(tensor, axis);\n        }\n        case 'Tile': {\n          const reps =\n              getParamValue('reps', node, tensorMap, context) as number[];\n          return [tfOps.tile(\n              getParamValue('x', node, tensorMap, context) as Tensor, reps)];\n        }\n        case 'Split':\n        case 'SplitV': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number;\n          const numOrSizeSplits =\n              getParamValue('numOrSizeSplits', node, tensorMap, context) as\n                  number |\n              number[];\n          const tensor = getParamValue('x', node, tensorMap, context) as Tensor;\n\n          return tfOps.split(tensor, numOrSizeSplits, axis);\n        }\n        case 'ScatterNd': {\n          const indices =\n              getParamValue('indices', node, tensorMap, context) as Tensor;\n          const values =\n              getParamValue('values', node, tensorMap, context) as Tensor;\n          const shape =\n              getParamValue('shape', node, tensorMap, context) as number[];\n          return [tfOps.scatterND(indices, values, shape)];\n        }\n        case 'GatherNd': {\n          const x = getParamValue('x', node, tensorMap, context) as Tensor;\n          const indices =\n              getParamValue('indices', node, tensorMap, context) as Tensor;\n          return [tfOps.gatherND(x, indices)];\n        }\n        case 'SparseToDense': {\n          const indices =\n              getParamValue('sparseIndices', node, tensorMap, context) as\n              Tensor;\n          const shape =\n              getParamValue('outputShape', node, tensorMap, context) as\n              number[];\n          const sparseValues =\n              getParamValue('sparseValues', node, tensorMap, context) as Tensor;\n          const defaultValue =\n              getParamValue('defaultValue', node, tensorMap, context) as Scalar;\n          return [tfOps.sparseToDense(\n              indices, sparseValues, shape,\n              sparseValues.dtype === defaultValue.dtype ?\n                  defaultValue :\n                  tfOps.cast(defaultValue, sparseValues.dtype))];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'slice_join';\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Scalar, Tensor, Tensor1D, Tensor2D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'SparseFillEmptyRows': {\n          const {\n            outputIndices,\n            outputValues,\n            emptyRowIndicator,\n            reverseIndexMap\n          } =\n              tfOps.sparse.sparseFillEmptyRows(\n                  getParamValue('indices', node, tensorMap, context) as\n                      Tensor2D,\n                  getParamValue('values', node, tensorMap, context) as Tensor1D,\n                  getParamValue('denseShape', node, tensorMap, context) as\n                      Tensor1D,\n                  getParamValue('defaultValue', node, tensorMap, context) as\n                      Scalar);\n          return [\n            outputIndices, outputValues, emptyRowIndicator, reverseIndexMap\n          ];\n        }\n        case 'SparseReshape': {\n          const {outputIndices, outputShape} = tfOps.sparse.sparseReshape(\n              getParamValue('inputIndices', node, tensorMap, context) as\n                  Tensor2D,\n              getParamValue('inputShape', node, tensorMap, context) as Tensor1D,\n              getParamValue('newShape', node, tensorMap, context) as Tensor1D);\n          return [outputIndices, outputShape];\n        }\n        case 'SparseSegmentMean': {\n          const outputData = tfOps.sparse.sparseSegmentMean(\n              getParamValue('data', node, tensorMap, context) as Tensor,\n              getParamValue('indices', node, tensorMap, context) as Tensor1D,\n              getParamValue('segmentIds', node, tensorMap, context) as\n                  Tensor1D);\n          return [outputData];\n        }\n        case 'SparseSegmentSum': {\n          const outputData = tfOps.sparse.sparseSegmentSum(\n              getParamValue('data', node, tensorMap, context) as Tensor,\n              getParamValue('indices', node, tensorMap, context) as Tensor1D,\n              getParamValue('segmentIds', node, tensorMap, context) as\n                  Tensor1D);\n          return [outputData];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'sparse';\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext):\n        Tensor[] => {\n          switch (node.op) {\n            case 'FFT': {\n              return [tfOps.fft(\n                  getParamValue('x', node, tensorMap, context) as Tensor)];\n            }\n            case 'IFFT': {\n              return [tfOps.ifft(\n                  getParamValue('x', node, tensorMap, context) as Tensor)];\n            }\n            case 'RFFT': {\n              return [tfOps.rfft(\n                  getParamValue('x', node, tensorMap, context) as Tensor)];\n            }\n            case 'IRFFT': {\n              return [tfOps.irfft(\n                  getParamValue('x', node, tensorMap, context) as Tensor)];\n            }\n            default:\n              throw TypeError(`Node type ${node.op} is not implemented`);\n          }\n        };\n\nexport const CATEGORY = 'spectral';\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Scalar, Tensor, Tensor1D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'StringNGrams': {\n          const {nGrams, nGramsSplits} = tfOps.string.stringNGrams(\n              getParamValue('data', node, tensorMap, context) as Tensor1D,\n              getParamValue('dataSplits', node, tensorMap, context) as Tensor,\n              getParamValue('separator', node, tensorMap, context) as string,\n              getParamValue('nGramWidths', node, tensorMap, context) as\n                  number[],\n              getParamValue('leftPad', node, tensorMap, context) as string,\n              getParamValue('rightPad', node, tensorMap, context) as string,\n              getParamValue('padWidth', node, tensorMap, context) as number,\n              getParamValue(\n                  'preserveShortSequences', node, tensorMap, context) as\n                  boolean);\n          return [nGrams, nGramsSplits];\n        }\n        case 'StringSplit': {\n          const {indices, values, shape} = tfOps.string.stringSplit(\n              getParamValue('input', node, tensorMap, context) as Tensor1D,\n              getParamValue('delimiter', node, tensorMap, context) as Scalar,\n              getParamValue('skipEmpty', node, tensorMap, context) as boolean);\n          return [indices, values, shape];\n        }\n        case 'StringToHashBucketFast': {\n          const output = tfOps.string.stringToHashBucketFast(\n              getParamValue('input', node, tensorMap, context) as Tensor,\n              getParamValue('numBuckets', node, tensorMap, context) as number);\n          return [output];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'string';\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor, Tensor4D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'Cast': {\n          return [tfOps.cast(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('dtype', node, tensorMap, context) as 'int32' |\n                  'float32' | 'bool')];\n        }\n        case 'ExpandDims': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number;\n          return [tfOps.expandDims(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis)];\n        }\n        case 'Squeeze': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number[];\n          return [tfOps.squeeze(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis)];\n        }\n\n        case 'Reshape': {\n          return [tfOps.reshape(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('shape', node, tensorMap, context) as number[])];\n        }\n        case 'MirrorPad': {\n          return [tfOps.mirrorPad(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('padding', node, tensorMap, context) as\n                  Array<[number, number]>,\n              getParamValue('mode', node, tensorMap, context) as 'reflect' |\n                  'symmetric')];\n        }\n        case 'PadV2':\n        case 'Pad': {\n          return [tfOps.pad(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('padding', node, tensorMap, context) as\n                  Array<[number, number]>,\n              getParamValue('constantValue', node, tensorMap, context) as\n                  number)];\n        }\n        case 'SpaceToBatchND': {\n          const blockShape =\n              getParamValue('blockShape', node, tensorMap, context) as number[];\n          const paddings =\n              getParamValue('paddings', node, tensorMap, context) as number[][];\n          return [tfOps.spaceToBatchND(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              blockShape, paddings)];\n        }\n        case 'BatchToSpaceND': {\n          const blockShape =\n              getParamValue('blockShape', node, tensorMap, context) as number[];\n          const crops =\n              getParamValue('crops', node, tensorMap, context) as number[][];\n          return [tfOps.batchToSpaceND(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              blockShape, crops)];\n        }\n        case 'DepthToSpace': {\n          const blockSize =\n              getParamValue('blockSize', node, tensorMap, context) as number;\n          const dataFormat =\n              (getParamValue('dataFormat', node, tensorMap, context) as\n               string).toUpperCase() as 'NHWC' |\n              'NCHW';\n          return [tfOps.depthToSpace(\n              getParamValue('x', node, tensorMap, context) as Tensor4D,\n              blockSize, dataFormat)];\n        }\n        case 'BroadcastTo': {\n          return [tfOps.broadcastTo(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('shape', node, tensorMap, context) as number[])];\n        }\n        case 'BroadcastArgs': {\n          return [tfOps.broadcastArgs(\n              getParamValue('s0', node, tensorMap, context) as Tensor,\n              getParamValue('s1', node, tensorMap, context) as Tensor)];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'transformation';\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../data/types';\nimport {ExecutionContext} from '../executor/execution_context';\nimport {ResourceManager} from '../executor/resource_manager';\n\nimport {NodeValueImpl} from './custom_op/node_value_impl';\nimport {getRegisteredOp} from './custom_op/register';\nimport * as arithmetic from './executors/arithmetic_executor';\nimport * as basicMath from './executors/basic_math_executor';\nimport * as control from './executors/control_executor';\nimport * as convolution from './executors/convolution_executor';\nimport * as creation from './executors/creation_executor';\nimport * as dynamic from './executors/dynamic_executor';\nimport * as evaluation from './executors/evaluation_executor';\nimport * as graph from './executors/graph_executor';\nimport * as hashTable from './executors/hash_table_executor';\nimport * as image from './executors/image_executor';\nimport * as logical from './executors/logical_executor';\nimport * as matrices from './executors/matrices_executor';\nimport * as normalization from './executors/normalization_executor';\nimport * as reduction from './executors/reduction_executor';\nimport * as sliceJoin from './executors/slice_join_executor';\nimport * as sparse from './executors/sparse_executor';\nimport * as spectral from './executors/spectral_executor';\nimport * as string from './executors/string_executor';\nimport * as transformation from './executors/transformation_executor';\nimport {Node} from './types';\n\n/**\n * Executes the op defined by the node object.\n * @param node\n * @param tensorMap contains tensors for executed nodes and weights\n * @param context contains tensors and information for running the current node.\n * @param resourceManager Optional. Contains global resources of the model.\n */\nexport function executeOp(\n    node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext,\n    resourceManager?: ResourceManager): tfc.Tensor[]|Promise<tfc.Tensor[]> {\n  const value =\n      ((node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext) => {\n        switch (node.category) {\n          case 'arithmetic':\n            return tfc.tidy(\n                () => arithmetic.executeOp(node, tensorMap, context));\n          case 'basic_math':\n            return tfc.tidy(\n                () => basicMath.executeOp(node, tensorMap, context));\n          case 'control':\n            return control.executeOp(node, tensorMap, context);\n          case 'convolution':\n            return tfc.tidy(\n                () => convolution.executeOp(node, tensorMap, context));\n          case 'creation':\n            return tfc.tidy(() => creation.executeOp(node, tensorMap, context));\n          case 'dynamic':\n            return dynamic.executeOp(node, tensorMap, context);\n          case 'evaluation':\n            return tfc.tidy(\n                () => evaluation.executeOp(node, tensorMap, context));\n          case 'image':\n            return tfc.tidy(() => image.executeOp(node, tensorMap, context));\n          case 'graph':\n            return tfc.tidy(() => graph.executeOp(node, tensorMap, context));\n          case 'logical':\n            return tfc.tidy(() => logical.executeOp(node, tensorMap, context));\n          case 'matrices':\n            return tfc.tidy(() => matrices.executeOp(node, tensorMap, context));\n          case 'normalization':\n            return tfc.tidy(\n                () => normalization.executeOp(node, tensorMap, context));\n          case 'reduction':\n            return tfc.tidy(\n                () => reduction.executeOp(node, tensorMap, context));\n          case 'slice_join':\n            return tfc.tidy(\n                () => sliceJoin.executeOp(node, tensorMap, context));\n          case 'sparse':\n            return tfc.tidy(() => sparse.executeOp(node, tensorMap, context));\n          case 'spectral':\n            return tfc.tidy(() => spectral.executeOp(node, tensorMap, context));\n          case 'string':\n            return tfc.tidy(() => string.executeOp(node, tensorMap, context));\n          case 'transformation':\n            return tfc.tidy(\n                () => transformation.executeOp(node, tensorMap, context));\n          case 'hash_table':\n            return hashTable.executeOp(\n                node, tensorMap, context, resourceManager);\n          case 'custom':\n            const opMapper = getRegisteredOp(node.op);\n            if (opMapper && opMapper.customExecutor) {\n              return opMapper.customExecutor(\n                  new NodeValueImpl(node, tensorMap, context));\n            } else {\n              throw TypeError(`Custom op ${node.op} is not registered.`);\n            }\n          default:\n            throw TypeError(\n                `Unknown op '${node.op}'. File an issue at ` +\n                `https://github.com/tensorflow/tfjs/issues so we can add it` +\n                `, or register a custom execution with tf.registerOp()`);\n        }\n      })(node, tensorMap, context);\n  if (tfc.util.isPromise(value)) {\n    return (value as Promise<tfc.Tensor>).then((data) => [].concat(data));\n  }\n  return [].concat(value);\n}\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap, TensorArrayMap, TensorListMap} from '../data/types';\n\nimport {TensorArray} from './tensor_array';\nimport {TensorList} from './tensor_list';\nimport {FunctionExecutor} from './types';\n\nexport interface ExecutionContextInfo {\n  id: number;           // the unique id of the context info\n  frameName: string;    // The frame name of the loop, this comes from\n                        // the TensorFlow NodeDef.\n  iterationId: number;  // The iteration id of the loop\n}\n\n/**\n * ExecutionContext captures the runtime environment of the node. It keeps\n * track of the current frame and iteration for the control flow ops.\n *\n * For example, typical Dynamic RNN model may contain loops, for which\n * TensorFlow will generate graphs with Enter/Exit nodes to control the\n * current execution frame, and NextIteration Nodes for iteration id increment.\n * For model with branch logic, TensorFLow will generate Switch/Merge ops.\n */\nexport class ExecutionContext {\n  private rootContext = {id: 0, frameName: '', iterationId: 0};\n  private contexts: ExecutionContextInfo[] = [this.rootContext];\n  private lastId = 0;\n  private _currentContextIds: string[];\n\n  constructor(\n      readonly weightMap: NamedTensorsMap = {},\n      readonly tensorArrayMap: TensorArrayMap = {},\n      readonly tensorListMap: TensorListMap = {},\n      readonly functionMap: {[key: string]: FunctionExecutor} = {}) {\n    this.generateCurrentContextIds();\n  }\n\n  private newFrame(id: number, frameName: string) {\n    return {id, frameName, iterationId: 0};\n  }\n\n  /**\n   * Set the current context\n   * @param contexts: ExecutionContextInfo[] the current path of execution\n   * frames\n   */\n  set currentContext(contexts: ExecutionContextInfo[]) {\n    if (this.contexts !== contexts) {\n      this.contexts = contexts;\n      this.generateCurrentContextIds();\n    }\n  }\n\n  get currentContext(): ExecutionContextInfo[] {\n    return this.contexts;\n  }\n\n  /**\n   * Returns the current context in string format.\n   */\n  get currentContextId(): string {\n    return this._currentContextIds[0];\n  }\n\n  /**\n   * Returns the current context and all parent contexts in string format.\n   * This allow access to the nodes in the current and parent frames.\n   */\n  get currentContextIds(): string[] {\n    return this._currentContextIds;\n  }\n\n  private generateCurrentContextIds() {\n    const names = [];\n    for (let i = 0; i < this.contexts.length - 1; i++) {\n      const contexts = this.contexts.slice(0, this.contexts.length - i);\n      names.push(this.contextIdforContexts(contexts));\n    }\n    names.push('');\n    this._currentContextIds = names;\n  }\n\n  private contextIdforContexts(contexts: ExecutionContextInfo[]) {\n    return contexts ?\n        contexts\n            .map(\n                context => (context.id === 0 && context.iterationId === 0) ?\n                    '' :\n                    `${context.frameName}-${context.iterationId}`)\n            .join('/') :\n        '';\n  }\n\n  /**\n   * Enter a new frame, a new context is pushed on the current context list.\n   * @param frameId new frame id\n   */\n  enterFrame(frameId: string) {\n    if (this.contexts) {\n      this.lastId++;\n      this.contexts = this.contexts.slice();\n      this.contexts.push(this.newFrame(this.lastId, frameId));\n      this._currentContextIds.unshift(this.contextIdforContexts(this.contexts));\n    }\n  }\n\n  /**\n   * Exit the current frame, the last context is removed from the current\n   * context list.\n   */\n  exitFrame() {\n    if (this.contexts && this.contexts.length > 1) {\n      this.contexts = this.contexts.slice();\n      this.contexts.splice(-1);\n      this.currentContextIds.shift();\n    } else {\n      throw new Error('Cannot exit frame, the context is empty');\n    }\n  }\n\n  /**\n   * Enter the next iteration of a loop, the iteration id of last context is\n   * increased.\n   */\n  nextIteration() {\n    if (this.contexts && this.contexts.length > 0) {\n      this.contexts = this.contexts.slice();\n      this.lastId++;\n      const context =\n          Object.assign({}, this.contexts[this.contexts.length - 1]);\n      context.iterationId += 1;\n      context.id = this.lastId;\n      this.contexts.splice(-1, 1, context);\n      this._currentContextIds.splice(\n          0, 1, this.contextIdforContexts(this.contexts));\n    } else {\n      throw new Error('Cannot increase frame iteration, the context is empty');\n    }\n  }\n\n  getWeight(name: string): Tensor[] {\n    return this.weightMap[name];\n  }\n\n  addTensorArray(tensorArray: TensorArray) {\n    this.tensorArrayMap[tensorArray.id] = tensorArray;\n  }\n\n  getTensorArray(id: number): TensorArray {\n    return this.tensorArrayMap[id];\n  }\n\n  addTensorList(tensorList: TensorList) {\n    this.tensorListMap[tensorList.id] = tensorList;\n  }\n\n  getTensorList(id: number): TensorList {\n    return this.tensorListMap[id];\n  }\n\n  dispose(keepIds: Set<number>) {\n    for (const key in this.tensorArrayMap) {\n      this.tensorArrayMap[key].clearAndClose(keepIds);\n    }\n\n    for (const key in this.tensorListMap) {\n      this.tensorListMap[key].clearAndClose(keepIds);\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {NamedTensorMap} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../data/types';\nimport {parseNodeName} from '../operations/executors/utils';\nimport {Graph, Node} from '../operations/types';\n\nexport interface ExecutionInfo {\n  inputs: NamedTensorMap;\n  outputs: Node[];\n  usedNodes: Set<string>;\n  missingInputs: string[];\n  dynamicNode: Node;\n  syncInputs: string[];\n}\n\n/**\n * Given graph inputs and desired outputs, find the minimal set of nodes\n * to execute in order to compute the outputs. In addition return other useful\n * info such:\n * - Missing inputs needed to compute the output.\n * - Whether the subgraph contains dynamic ops (control flow, dynamic shape).\n * - Alternative inputs in order to avoid async (dynamic op) execution.\n */\nexport function getExecutionSubgraph(\n    inputs: NamedTensorMap, outputs: Node[], weightMap: NamedTensorsMap,\n    initNodes?: Node[]): ExecutionInfo {\n  const usedNodes = new Set<string>();\n  const missingInputs: string[] = [];\n  let dynamicNode: Node = null;\n  let syncInputs: string[] = null;\n\n  // Start with the outputs, going backwards and find all the nodes that are\n  // needed to compute those outputs.\n  const seen = new Set<string>();\n  const inputNodeNames =\n      Object.keys(inputs).map(name => parseNodeName(name)[0]);\n\n  let initNodeNames: string[] = [];\n  if (initNodes != null) {\n    initNodeNames = initNodes.map(node => parseNodeName(node.name)[0]);\n  }\n\n  const frontier = [...outputs];\n  while (frontier.length > 0) {\n    const node = frontier.pop();\n    if (isControlFlow(node) || isDynamicShape(node) || isHashTable(node)) {\n      if (dynamicNode == null) {\n        dynamicNode = node;\n        syncInputs = dynamicNode.children.map(child => child.name)\n                         .filter(name => usedNodes.has(name));\n      }\n    }\n    usedNodes.add(node.name);\n\n    // Weights are dead end since we already have their values.\n    if (weightMap[node.name] != null) {\n      continue;\n    }\n    // This node is a dead end since it's one of the user-provided inputs.\n    if (inputNodeNames.indexOf(node.name) !== -1) {\n      continue;\n    }\n    // This node is a dead end since it doesn't have any inputs.\n    if (initNodeNames.indexOf(node.name) !== -1) {\n      continue;\n    }\n    if (node.inputs.length === 0) {\n      missingInputs.push(node.name);\n      continue;\n    }\n    node.inputs.forEach(input => {\n      // Don't add to the frontier if it is already there.\n      if (seen.has(input.name)) {\n        return;\n      }\n      seen.add(input.name);\n      frontier.push(input);\n    });\n  }\n  return {inputs, outputs, usedNodes, missingInputs, dynamicNode, syncInputs};\n}\n\n/**\n * Given the execution info, return a list of nodes in topological order that\n * need to be executed to compute the output.\n */\nexport function getNodesInTopologicalOrder(\n    graph: Graph, weightMap: NamedTensorsMap,\n    executionInfo: ExecutionInfo): Node[] {\n  const {usedNodes, inputs} = executionInfo;\n  const frontier: Node[] = [];\n  const inputNodes = Object.keys(inputs)\n                         .map(name => parseNodeName(name)[0])\n                         .map(name => graph.nodes[name]);\n  const initNodes = graph.initNodes;\n\n  inputNodes.forEach(input => {\n    if (usedNodes.has(input.name)) {\n      frontier.push(input);\n    }\n  });\n  graph.weights.forEach(weight => {\n    if (usedNodes.has(weight.name)) {\n      frontier.push(weight);\n    }\n  });\n  if (initNodes != null) {\n    initNodes.forEach(node => {\n      if (usedNodes.has(node.name)) {\n        frontier.push(node);\n      }\n    });\n  }\n  const seen = new Set<string>();\n  const orderedNodes: Node[] = [];\n  while (frontier.length > 0) {\n    const node = frontier.pop();\n    seen.add(node.name);\n    if (!weightMap[node.name]) {\n      orderedNodes.push(node);\n    }\n    node.children.forEach(child => {\n      if (!seen.has(child.name) && usedNodes.has(child.name) &&\n          child.inputs.every(input => seen.has(input.name))) {\n        frontier.push(child);\n      }\n    });\n  }\n  return orderedNodes;\n}\n\nconst CONTROL_FLOW_OPS = [\n  'Switch', 'Merge', 'Enter', 'Exit', 'NextIteration', 'StatelessIf',\n  'StatelessWhile', 'if', 'While'\n];\nconst DYNAMIC_SHAPE_OPS = [\n  'NonMaxSuppressionV2', 'NonMaxSuppressionV3', 'NonMaxSuppressionV5', 'Where'\n];\nconst HASH_TABLE_OPS = [\n  'HashTable', 'HashTableV2', 'LookupTableImport', 'LookupTableImportV2',\n  'LookupTableFind', 'LookupTableFindV2', 'LookupTableSize', 'LookupTableSizeV2'\n];\n\nexport function isControlFlow(node: Node) {\n  return CONTROL_FLOW_OPS.indexOf(node.op) >= 0;\n}\n\nexport function isDynamicShape(node: Node) {\n  return DYNAMIC_SHAPE_OPS.indexOf(node.op) >= 0;\n}\n\nexport function isHashTable(node: Node) {\n  return HASH_TABLE_OPS.indexOf(node.op) >= 0;\n}\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NamedTensorMap, Tensor, tidy, util} from '@tensorflow/tfjs-core';\n\nimport {ISignatureDef} from '../data/compiled_api';\nimport {NamedTensorsMap, TensorArrayMap, TensorInfo, TensorListMap} from '../data/types';\nimport {getNodeNameAndIndex, getParamValue, getTensor, getTensorsForCurrentContenxt, parseNodeName} from '../operations/executors/utils';\nimport {executeOp} from '../operations/operation_executor';\nimport {Graph, Node} from '../operations/types';\n\nimport {ExecutionContext, ExecutionContextInfo} from './execution_context';\nimport {getExecutionSubgraph, getNodesInTopologicalOrder, isControlFlow} from './model_analysis';\nimport {ResourceManager} from './resource_manager';\nimport {FunctionExecutor} from './types';\n\ninterface NodeWithContexts {\n  contexts: ExecutionContextInfo[];\n  node: Node;\n}\n\nexport class GraphExecutor implements FunctionExecutor {\n  private compiledMap: Map<string, Node[]> = new Map();\n  private _weightMap: NamedTensorsMap = {};\n  private _weightIds: number[];\n  private _signature: ISignatureDef;\n  private _inputs: Node[];\n  private _outputs: Node[];\n  private _initNodes: Node[];  // Internal init nodes to start initialization.\n  private SEPERATOR = ',';\n  private _functions: {[key: string]: Graph} = {};\n  private _functionExecutorMap: {[key: string]: FunctionExecutor} = {};\n  private _resourceManager: ResourceManager;\n\n  get weightIds(): number[] {\n    return this.parent ? this.parent.weightIds : this._weightIds;\n  }\n\n  get functionExecutorMap(): {[key: string]: FunctionExecutor} {\n    return this.parent ? this.parent.functionExecutorMap :\n                         this._functionExecutorMap;\n  }\n\n  get weightMap(): NamedTensorsMap {\n    return this.parent ? this.parent.weightMap : this._weightMap;\n  }\n\n  set weightMap(weightMap: NamedTensorsMap) {\n    const weightIds = Object.keys(weightMap).map(\n        key => weightMap[key].map(tensor => tensor.id));\n    this._weightIds = [].concat(...weightIds);\n    this._weightMap = weightMap;\n  }\n\n  /**\n   * Set `ResourceManager` shared by executors of a model.\n   * @param resourceManager: `ResourceManager` of the `GraphModel`.\n   */\n  set resourceManager(resourceManager: ResourceManager) {\n    this._resourceManager = resourceManager;\n  }\n\n  get inputs(): TensorInfo[] {\n    return this._inputs.map(node => {\n      return {\n        name: node.name,\n        shape: node.attrParams['shape'] ?\n            node.attrParams['shape'].value as number[] :\n            undefined,\n        dtype: node.attrParams['dtype'] ?\n            node.attrParams['dtype'].value as DataType :\n            undefined\n      };\n    });\n  }\n\n  get outputs(): TensorInfo[] {\n    return this._outputs.map(node => {\n      return {\n        name: node.name,\n        shape: node.attrParams['shape'] ?\n            node.attrParams['shape'].value as number[] :\n            undefined,\n        dtype: node.attrParams['dtype'] ?\n            node.attrParams['dtype'].value as DataType :\n            undefined\n      };\n    });\n  }\n\n  get inputNodes(): string[] {\n    return this._inputs.map(node => node.signatureKey || node.name);\n  }\n\n  get outputNodes(): string[] {\n    return this._outputs.map((node) => {\n      const name = node.signatureKey || node.name;\n      return node.defaultOutput ? (`${name}:${node.defaultOutput}`) : name;\n    });\n  }\n\n  get functions(): {[key: string]: ISignatureDef} {\n    return Object.keys(this._functions).reduce((map, key) => {\n      map[key] = this._functions[key].signature;\n      return map;\n    }, {} as {[key: string]: ISignatureDef});\n  }\n\n  /**\n   *\n   * @param graph Graph the model or function graph to be executed.\n   * @param parent When building function exector you need to set the parent\n   * executor. Since the weights and function executor maps are set at parant\n   * level, that function executor can access the function maps and weight maps\n   * through the parent.\n   */\n  constructor(private graph: Graph, private parent?: GraphExecutor) {\n    this._outputs = graph.outputs;\n    this._inputs = graph.inputs;\n    this._initNodes = graph.initNodes;\n    this._signature = graph.signature;\n    this._functions = graph.functions;\n    // create sub-graph executors\n    if (graph.functions != null) {\n      Object.keys(graph.functions).forEach(name => {\n        this._functionExecutorMap[name] =\n            new GraphExecutor(graph.functions[name], this);\n      });\n    }\n  }\n\n  private getCompilationKey(inputs: Node[], outputs: Node[]): string {\n    const sortedInputs = inputs.map(node => node.name).sort();\n    const sortedOutputs = outputs.map(node => node.name).sort();\n    return sortedInputs.join(this.SEPERATOR) + '--' +\n        sortedOutputs.join(this.SEPERATOR);\n  }\n\n  /**\n   * Compiles the inference graph and returns the minimal set of nodes that are\n   * required for execution, in the correct execution order.\n   */\n  private compile(inputs: NamedTensorMap, outputs: Node[]): Node[] {\n    const executionInfo =\n        getExecutionSubgraph(inputs, outputs, this.weightMap, this._initNodes);\n    const {missingInputs, dynamicNode, syncInputs} = executionInfo;\n    if (dynamicNode != null) {\n      throw new Error(\n          `This execution contains the node '${dynamicNode.name}', which has ` +\n          `the dynamic op '${dynamicNode.op}'. Please use ` +\n          `model.executeAsync() instead. Alternatively, to avoid the ` +\n          `dynamic ops, specify the inputs [${syncInputs}]`);\n    }\n\n    if (missingInputs.length > 0) {\n      const outNames = outputs.map(n => n.name);\n      const inNames = Object.keys(inputs);\n      throw new Error(\n          `Cannot compute the outputs [${outNames}] from the provided inputs ` +\n          `[${inNames}]. Missing the following inputs: [${missingInputs}]`);\n    }\n\n    return getNodesInTopologicalOrder(\n        this.graph, this.weightMap, executionInfo);\n  }\n\n  /**\n   * Executes the inference for given input tensors.\n   * @param inputs Tensor map for the model inputs, keyed by the input node\n   * names.\n   * @param outputs Optional. output node name from the Tensorflow model, if\n   * no outputs are specified, the default outputs of the model would be used.\n   * You can inspect intermediate nodes of the model by adding them to the\n   * outputs array.\n   */\n  execute(inputs: NamedTensorMap, outputs?: string[]): Tensor[] {\n    inputs = this.mapInputs(inputs);\n    const names = Object.keys(inputs).sort();\n    this.checkInputs(inputs);\n    this.checkInputShapeAndType(inputs);\n    outputs = this.mapOutputs(outputs);\n    this.checkOutputs(outputs);\n    const inputNodes =\n        names.map(name => this.graph.nodes[parseNodeName(name)[0]]);\n    const outputNodeNames = outputs.map(name => parseNodeName(name)[0]);\n    let outputNodes = outputNodeNames.map(name => this.graph.nodes[name]);\n\n    // If no outputs are specified, then use the default outputs of the model.\n    if (outputNodes.length === 0) {\n      outputNodes = this._outputs;\n    }\n\n    const compilationKey = this.getCompilationKey(inputNodes, outputNodes);\n\n    // Do nothing if the compiled graph cache contains the input.\n    let orderedNodes = this.compiledMap.get(compilationKey);\n    if (orderedNodes == null) {\n      orderedNodes = this.compile(inputs, outputNodes);\n      this.compiledMap.set(compilationKey, orderedNodes);\n    }\n\n    const tensorArrayMap: TensorArrayMap = {};\n    const tensorListMap: TensorListMap = {};\n\n    return tidy(() => {\n      const context = new ExecutionContext(\n          this.weightMap, tensorArrayMap, tensorListMap,\n          this.functionExecutorMap);\n      const tensorsMap: NamedTensorsMap = {...this.weightMap};\n\n      Object.keys(inputs).forEach(name => {\n        const [nodeName, index] = parseNodeName(name);\n        const tensors: Tensor[] = [];\n        tensors[index] = inputs[name];\n        tensorsMap[nodeName] = tensors;\n      });\n\n      const tensorsToKeep = this.getFrozenTensorIds(tensorsMap);\n      const intermediateTensorConsumerCount: {[key: number]: number} = {};\n      for (let i = 0; i < orderedNodes.length; i++) {\n        const node = orderedNodes[i];\n        if (!tensorsMap[node.name]) {\n          const tensors =\n              executeOp(node, tensorsMap, context, this._resourceManager) as\n              Tensor[];\n          if (util.isPromise(tensors)) {\n            throw new Error(\n                `The execution of the op '${node.op}' returned a promise. ` +\n                `Please use model.executeAsync() instead.`);\n          }\n          tensorsMap[node.name] = tensors;\n          this.checkTensorForDisposal(\n              node.name, node, tensorsMap, context, tensorsToKeep,\n              outputNodeNames, intermediateTensorConsumerCount);\n        }\n      }\n      // dispose the context for the root executor\n      if (this.parent == null) {\n        context.dispose(tensorsToKeep);\n      }\n      return outputs.map(name => getTensor(name, tensorsMap, context));\n    });\n  }\n\n  private getFrozenTensorIds(tensorMap: NamedTensorsMap): Set<number> {\n    const ids = [].concat.apply(\n        [],\n        Object.keys(tensorMap)\n            .map(key => tensorMap[key])\n            .map(tensors => tensors.map(tensor => tensor.id)));\n    return new Set(ids);\n  }\n  private checkTensorForDisposal(\n      nodeName: string, node: Node, tensorMap: NamedTensorsMap,\n      context: ExecutionContext, tensorsToKeep: Set<number>,\n      outputNames: string[],\n      intermediateTensorConsumerCount: {[key: string]: number}) {\n    // Skip output nodes and any control flow nodes, since its dependency is\n    // tricky to track correctly.\n    if (node.category === 'control' || outputNames.indexOf(nodeName) !== -1) {\n      return;\n    }\n\n    tensorMap[nodeName].forEach(tensor => {\n      if (tensor != null) {\n        intermediateTensorConsumerCount[tensor.id] =\n            (intermediateTensorConsumerCount[tensor.id] || 0) +\n            node.children.length;\n      }\n    });\n    node.inputs.forEach(input => {\n      // Skip any control flow nodes, since its dependency is tricky to track\n      // correctly.\n      if (input.category !== 'control') {\n        const tensors =\n            getTensorsForCurrentContenxt(input.name, tensorMap, context);\n        if (tensors != null) {\n          tensors.forEach(tensor => {\n            if (tensor && !tensor.kept && !tensorsToKeep.has(tensor.id)) {\n              const count = intermediateTensorConsumerCount[tensor.id];\n              if (count === 1) {\n                tensor.dispose();\n                delete intermediateTensorConsumerCount[tensor.id];\n              } else if (count != null) {\n                // only intermediate nodes has count set, inputs and weights are\n                // not.\n                intermediateTensorConsumerCount[tensor.id]--;\n              }\n            }\n          });\n        }\n      }\n    });\n  }\n\n  /**\n   * Executes the inference for given input tensors in Async fashion.\n   * @param inputs Tensor map for the model inputs, keyed by the input node\n   * names.\n   * @param outputs output node name from the Tensorflow model, if no outputs\n   * are specified, the default outputs of the model would be used. You can\n   * inspect intermediate nodes of the model by adding them to the outputs\n   * array.\n   */\n  async executeAsync(inputs: NamedTensorMap, outputs?: string[]):\n      Promise<Tensor[]> {\n    return this._executeAsync(inputs, outputs);\n  }\n\n  /**\n   * Executes the inference for given input tensors in Async fashion.\n   * @param inputs Tensor map for the model inputs, keyed by the input node\n   * names.\n   * @param outputs Optional. output node name from the Tensorflow model,\n   * if no outputs are specified, the default outputs of the model would be\n   * used. You can inspect intermediate nodes of the model by adding them to the\n   * outputs array.\n   * @param isFunctionExecution Optional. Flag for executing a function.\n   * @param tensorArrayMap Optional, global TensorArray map by id. Used for\n   * function execution.\n   * @param tensorArrayMap Optinal global TensorList map by id. Used for\n   * function execution.\n   */\n  private async _executeAsync(\n      inputs: NamedTensorMap, outputs?: string[], isFunctionExecution = false,\n      tensorArrayMap: TensorArrayMap = {},\n      tensorListMap: TensorListMap = {}): Promise<Tensor[]> {\n    if (!isFunctionExecution) {\n      inputs = this.mapInputs(inputs);\n      this.checkInputs(inputs);\n      this.checkInputShapeAndType(inputs);\n      outputs = this.mapOutputs(outputs);\n      this.checkOutputs(outputs);\n    }\n\n    const context = new ExecutionContext(\n        this.weightMap, tensorArrayMap, tensorListMap,\n        this.functionExecutorMap);\n\n    // Graph with control flow op requires runtime evaluation of the execution\n    // order, while without control flow the execution order is pre-determined\n    // in the compile method.\n    const tensorMap = await this.executeWithControlFlow(\n        inputs, context, outputs, isFunctionExecution);\n    const results = outputs.map(name => getTensor(name, tensorMap, context));\n\n    // dispose all the intermediate tensors\n    const outputIds = results.map(t => t.id);\n    const inputIds = Object.keys(inputs).map(name => inputs[name].id);\n    const keepIds =\n        new Set<number>([...outputIds, ...inputIds, ...this.weightIds]);\n    Object.keys(tensorMap).forEach(key => {\n      const tensorArray = tensorMap[key];\n      tensorArray.forEach(tensor => {\n        if (tensor && !tensor.kept && !tensor.isDisposed &&\n            !keepIds.has(tensor.id)) {\n          tensor.dispose();\n        }\n      });\n    });\n    // dispose the context for the root executor\n    if (this.parent == null) {\n      context.dispose(keepIds);\n    }\n\n    return results;\n  }\n\n  async executeFunctionAsync(\n      inputs: Tensor[], tensorArrayMap: TensorArrayMap,\n      tensorListMap: TensorListMap): Promise<Tensor[]> {\n    const mappedInputs = inputs.reduce((map, tensor, index) => {\n      map[this.inputs[index].name] = tensor;\n      return map;\n    }, {} as NamedTensorMap);\n\n    return this._executeAsync(\n        mappedInputs, this.outputNodes, true, tensorArrayMap, tensorListMap);\n  }\n  /**\n   * When there are control flow nodes in the graph, the graph execution use\n   * ExecutionContext to keep track of the frames and loop iterators.\n   * @param inputs placeholder tensors for the graph.\n   * @param context the execution context object for current execution.\n   * @param outputNames Optional. output node name from the Tensorflow model,\n   * if no outputs are specified, the default outputs of the model would be\n   * used. You can inspect intermediate nodes of the model by adding them to the\n   * outputs array.\n   * @param isFunctionExecution Flag for executing a function.\n   */\n  private async executeWithControlFlow(\n      inputs: NamedTensorMap, context: ExecutionContext, outputNames?: string[],\n      isFunctionExecution?: boolean): Promise<NamedTensorsMap> {\n    const names = Object.keys(inputs);\n    const inputNodes =\n        names.map(name => this.graph.nodes[parseNodeName(name)[0]]);\n    const outputNodeNames = outputNames.map(name => parseNodeName(name)[0]);\n    let outputNodes = outputNodeNames.map(name => this.graph.nodes[name]);\n\n    // If no outputs are specified, then use the default outputs of the model.\n    if (outputNodes.length === 0) {\n      outputNodes = this._outputs;\n    }\n\n    const {usedNodes, missingInputs, dynamicNode, syncInputs} =\n        getExecutionSubgraph(\n            inputs, outputNodes, this.weightMap, this._initNodes);\n\n    // First nodes to execute include inputNodes, weights, and initNodes.\n    const stack: NodeWithContexts[] = [\n      ...inputNodes, ...this.graph.weights, ...(this._initNodes || [])\n    ].map(node => {\n      return {node, contexts: context.currentContext};\n    });\n    const tensorsMap: NamedTensorsMap = {...this.weightMap};\n    Object.keys(inputs).forEach(name => {\n      const [nodeName, index] = parseNodeName(name);\n      const tensors: Tensor[] = [];\n      tensors[index] = inputs[name];\n      tensorsMap[nodeName] = tensors;\n    });\n    const intermediateTensorConsumerCount: {[key: number]: number} = {};\n    const tensorsToKeep = this.getFrozenTensorIds(tensorsMap);\n    const added: {[key: string]: boolean} = {};\n    while (stack.length > 0) {\n      const promises = this.processStack(\n          inputNodes, stack, context, tensorsMap, added, tensorsToKeep,\n          outputNodeNames, intermediateTensorConsumerCount, usedNodes);\n      await Promise.all(promises);\n    }\n    if (dynamicNode == null && !isFunctionExecution) {\n      console.warn(\n          `This model execution did not contain any nodes with control flow ` +\n          `or dynamic output shapes. You can use model.execute() instead.`);\n    }\n    const missingOutputs =\n        outputNodes\n            .filter(\n                node => !isControlFlow(node) &&\n                    !getTensor(node.name, tensorsMap, context))\n            .map(node => node.name);\n    if (missingOutputs.length > 0) {\n      let alternativeMsg = '';\n      if (dynamicNode != null) {\n        alternativeMsg =\n            `Alternatively, to avoid the dynamic ops, use model.execute() ` +\n            `and specify the inputs [${syncInputs}]`;\n      }\n      throw new Error(\n          `Cannot compute the outputs [${missingOutputs}] from the provided ` +\n          `inputs [${names}]. Consider providing the following inputs: ` +\n          `[${missingInputs}]. ${alternativeMsg}`);\n    }\n    return tensorsMap;\n  }\n\n  private processStack(\n      inputNodes: Node[], stack: NodeWithContexts[], context: ExecutionContext,\n      tensorMap: NamedTensorsMap, added: {[key: string]: boolean},\n      tensorsToKeep: Set<number>, outputNames: string[],\n      intermediateTensorConsumerCount: {[key: number]: number},\n      usedNodes: Set<string>) {\n    const promises: Array<Promise<Tensor[]>> = [];\n    while (stack.length > 0) {\n      const item = stack.pop();\n      context.currentContext = item.contexts;\n      let nodeName = '';\n      // The tensor of the Enter op with isConstant set should be set\n      // in the parent scope, so it will be available as constant for the\n      // whole loop.\n      if (item.node.op === 'Enter' &&\n          getParamValue('isConstant', item.node, tensorMap, context)) {\n        [nodeName] = getNodeNameAndIndex(item.node.name, context);\n      }\n\n      // only process nodes that are not in the tensorMap yet, this include\n      // inputNodes and internal initNodes.\n      if (tensorMap[item.node.name] == null) {\n        const tensors =\n            executeOp(item.node, tensorMap, context, this._resourceManager);\n        if (!nodeName) {\n          [nodeName] = getNodeNameAndIndex(item.node.name, context);\n        }\n        const currentContext = context.currentContext;\n        if (util.isPromise(tensors)) {\n          promises.push((tensors as Promise<Tensor[]>).then(t => {\n            tensorMap[nodeName] = t;\n            context.currentContext = currentContext;\n            this.checkTensorForDisposal(\n                nodeName, item.node, tensorMap, context, tensorsToKeep,\n                outputNames, intermediateTensorConsumerCount);\n            this.processChildNodes(\n                item.node, stack, context, tensorMap, added, usedNodes);\n            return t;\n          }));\n        } else {\n          tensorMap[nodeName] = tensors as Tensor[];\n          this.checkTensorForDisposal(\n              nodeName, item.node, tensorMap, context, tensorsToKeep,\n              outputNames, intermediateTensorConsumerCount);\n          this.processChildNodes(\n              item.node, stack, context, tensorMap, added, usedNodes);\n        }\n      } else {\n        this.processChildNodes(\n            item.node, stack, context, tensorMap, added, usedNodes);\n      }\n    }\n    return promises;\n  }\n\n  private processChildNodes(\n      node: Node, stack: NodeWithContexts[], context: ExecutionContext,\n      tensorMap: NamedTensorsMap, added: {[key: string]: boolean},\n      usedNodes: Set<string>) {\n    node.children.forEach((childNode) => {\n      const [nodeName, ] = getNodeNameAndIndex(childNode.name, context);\n      if (added[nodeName] || !usedNodes.has(childNode.name)) {\n        return;\n      }\n      // Merge op can be pushed if any of its inputs has value.\n      if (childNode.op === 'Merge') {\n        if (childNode.inputNames.some(name => {\n              return !!getTensor(name, tensorMap, context);\n            })) {\n          added[nodeName] = true;\n          stack.push({contexts: context.currentContext, node: childNode});\n        }\n      } else  // Otherwise all inputs must to have value.\n          if (childNode.inputNames.every(name => {\n                return !!getTensor(name, tensorMap, context);\n              })) {\n        added[nodeName] = true;\n        stack.push({contexts: context.currentContext, node: childNode});\n      }\n    });\n  }\n\n  /**\n   * Releases the memory used by the weight tensors.\n   */\n  dispose() {\n    Object.keys(this.weightMap)\n        .forEach(\n            key => this.weightMap[key].forEach(tensor => tensor.dispose()));\n  }\n\n  private checkInputShapeAndType(inputs: NamedTensorMap) {\n    Object.keys(inputs).forEach(name => {\n      const input = inputs[name];\n      const [nodeName, ] = parseNodeName(name);\n      const node = this.graph.nodes[nodeName];\n      if (node.attrParams['shape'] && node.attrParams['shape'].value) {\n        const shape = node.attrParams['shape'].value as number[];\n        const match = shape.length === input.shape.length &&\n            input.shape.every(\n                (dim, index) => shape[index] === -1 || shape[index] === dim);\n        util.assert(\n            match,\n            () => `The shape of dict['${node.name}'] provided in ` +\n                `model.execute(dict) must be [${shape}], but was ` +\n                `[${input.shape}]`);\n      }\n      if (node.attrParams['dtype'] && node.attrParams['dtype'].value) {\n        util.assert(\n            input.dtype === node.attrParams['dtype'].value as string,\n            () => `The dtype of dict['${node.name}'] provided in ` +\n                `model.execute(dict) must be ` +\n                `${node.attrParams['dtype'].value}, but was ${input.dtype}`);\n      }\n    });\n  }\n\n  private mapInputs(inputs: NamedTensorMap) {\n    const result: NamedTensorMap = {};\n    for (const inputName in inputs) {\n      if (this._signature != null && this._signature.inputs != null &&\n          this._signature.inputs[inputName] != null) {\n        const tensor = this._signature.inputs[inputName];\n        result[tensor.name] = inputs[inputName];\n      } else {\n        result[inputName] = inputs[inputName];\n      }\n    }\n    return result;\n  }\n\n  private checkInputs(inputs: NamedTensorMap) {\n    const notInGraph = Object.keys(inputs).filter(name => {\n      const [nodeName] = parseNodeName(name);\n      return this.graph.nodes[nodeName] == null;\n    });\n    if (notInGraph.length > 0) {\n      throw new Error(\n          `The dict provided in model.execute(dict) has ` +\n          `keys: [${notInGraph}] that are not part of graph`);\n    }\n  }\n\n  private mapOutputs(outputs: string[]) {\n    return outputs.map(name => {\n      if (this._signature != null && this._signature.outputs != null &&\n          this._signature.outputs[name] != null) {\n        const tensor = this._signature.outputs[name];\n        return tensor.name;\n      }\n      return name;\n    }, {});\n  }\n\n  private checkOutputs(outputs: string[]): void {\n    outputs.forEach(name => {\n      const [normalizedName] = parseNodeName(name);\n      if (!this.graph.nodes[normalizedName]) {\n        throw new Error(`The output '${name}' is not found in the graph`);\n      }\n    });\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {HashTableMap, NamedTensorMap} from '../data/types';\nimport {HashTable} from './hash_table';\n\n/**\n * Contains global resources of a model.\n */\nexport class ResourceManager {\n  constructor(\n      readonly hashTableNameToHandle: NamedTensorMap = {},\n      readonly hashTableMap: HashTableMap = {}) {}\n\n  /**\n   * Register a `HashTable` in the resource manager.\n   *\n   * The `HashTable` can be retrieved by `resourceManager.getHashTableById`,\n   * where id is the table handle tensor's id.\n   *\n   * @param name Op node name that creates the `HashTable`.\n   * @param hashTable The `HashTable` to be added to resource manager.\n   */\n  addHashTable(name: string, hashTable: HashTable) {\n    this.hashTableNameToHandle[name] = hashTable.handle;\n    this.hashTableMap[hashTable.id] = hashTable;\n  }\n\n  /**\n   * Get the table handle by node name.\n   * @param name Op node name that creates the `HashTable`. This name is also\n   *     used in the inputs list of lookup and import `HashTable` ops.\n   */\n  getHashTableHandleByName(name: string) {\n    return this.hashTableNameToHandle[name];\n  }\n\n  /**\n   * Get the actual `HashTable` by its handle tensor's id.\n   * @param id The id of the handle tensor.\n   */\n  getHashTableById(id: number): HashTable {\n    return this.hashTableMap[id];\n  }\n\n  /**\n   * Dispose `ResourceManager`, including its hashTables and tensors in them.\n   */\n  dispose() {\n    for (const key in this.hashTableMap) {\n      this.hashTableMap[key].clearAndClose();\n      delete this.hashTableMap[key];\n    }\n\n    for (const name in this.hashTableNameToHandle) {\n      this.hashTableNameToHandle[name].dispose();\n      delete this.hashTableNameToHandle[name];\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {InferenceModel, io, ModelPredictConfig, NamedTensorMap, Tensor} from '@tensorflow/tfjs-core';\n\nimport * as tensorflow from '../data/compiled_api';\nimport {NamedTensorsMap, TensorInfo} from '../data/types';\nimport {OperationMapper} from '../operations/operation_mapper';\n\nimport {GraphExecutor} from './graph_executor';\nimport {ResourceManager} from './resource_manager';\n\nexport const TFHUB_SEARCH_PARAM = '?tfjs-format=file';\nexport const DEFAULT_MODEL_NAME = 'model.json';\n/**\n * A `tf.GraphModel` is a directed, acyclic graph built from a\n * SavedModel GraphDef and allows inference execution.\n *\n * A `tf.GraphModel` can only be created by loading from a model converted from\n * a [TensorFlow SavedModel](https://www.tensorflow.org/guide/saved_model) using\n * the command line converter tool and loaded via `tf.loadGraphModel`.\n *\n * @doc {heading: 'Models', subheading: 'Classes'}\n */\nexport class GraphModel implements InferenceModel {\n  private executor: GraphExecutor;\n  private version = 'n/a';\n  private handler: io.IOHandler;\n  private artifacts: io.ModelArtifacts;\n  private initializer: GraphExecutor;\n  private resourceManager: ResourceManager;\n  private signature: tensorflow.ISignatureDef;\n\n  // Returns the version information for the tensorflow model GraphDef.\n  get modelVersion(): string {\n    return this.version;\n  }\n\n  get inputNodes(): string[] {\n    return this.executor.inputNodes;\n  }\n\n  get outputNodes(): string[] {\n    return this.executor.outputNodes;\n  }\n\n  get inputs(): TensorInfo[] {\n    return this.executor.inputs;\n  }\n\n  get outputs(): TensorInfo[] {\n    return this.executor.outputs;\n  }\n\n  get weights(): NamedTensorsMap {\n    return this.executor.weightMap;\n  }\n\n  get metadata(): {} {\n    return this.artifacts.userDefinedMetadata;\n  }\n\n  get modelSignature(): {} {\n    return this.signature;\n  }\n\n  /**\n   * @param modelUrl url for the model, or an `io.IOHandler`.\n   * @param weightManifestUrl url for the weight file generated by\n   * scripts/convert.py script.\n   * @param requestOption options for Request, which allows to send credentials\n   * and custom headers.\n   * @param onProgress Optional, progress callback function, fired periodically\n   * before the load is completed.\n   */\n  constructor(\n      private modelUrl: string|io.IOHandler,\n      private loadOptions: io.LoadOptions = {}) {\n    if (loadOptions == null) {\n      this.loadOptions = {};\n    }\n    this.resourceManager = new ResourceManager();\n  }\n\n  private findIOHandler() {\n    const path = this.modelUrl;\n    if ((path as io.IOHandler).load != null) {\n      // Path is an IO Handler.\n      this.handler = path as io.IOHandler;\n    } else if (this.loadOptions.requestInit != null) {\n      this.handler = io.browserHTTPRequest(path as string, this.loadOptions);\n    } else {\n      const handlers = io.getLoadHandlers(path as string, this.loadOptions);\n      if (handlers.length === 0) {\n        // For backward compatibility: if no load handler can be found,\n        // assume it is a relative http path.\n        handlers.push(io.browserHTTPRequest(path as string, this.loadOptions));\n      } else if (handlers.length > 1) {\n        throw new Error(\n            `Found more than one (${handlers.length}) load handlers for ` +\n            `URL '${[path]}'`);\n      }\n      this.handler = handlers[0];\n    }\n  }\n\n  /**\n   * Loads the model and weight files, construct the in memory weight map and\n   * compile the inference graph.\n   */\n  async load(): Promise<boolean> {\n    this.findIOHandler();\n    if (this.handler.load == null) {\n      throw new Error(\n          'Cannot proceed with model loading because the IOHandler provided ' +\n          'does not have the `load` method implemented.');\n    }\n    const artifacts = await this.handler.load();\n\n    return this.loadSync(artifacts);\n  }\n\n  /**\n   * Synchronously construct the in memory weight map and\n   * compile the inference graph. Also initialize hashtable if any.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}\n   */\n  loadSync(artifacts: io.ModelArtifacts) {\n    this.artifacts = artifacts;\n    const graph = this.artifacts.modelTopology as tensorflow.IGraphDef;\n\n    let signature;\n    if (this.artifacts.userDefinedMetadata != null &&\n        this.artifacts.userDefinedMetadata.signature != null) {\n      signature =  // tslint:disable-next-line:no-any\n          (this.artifacts.userDefinedMetadata as any).signature as\n          tensorflow.ISignatureDef;\n    } else {\n      signature = this.artifacts.signature;\n    }\n    this.signature = signature;\n\n    this.version = `${graph.versions.producer}.${graph.versions.minConsumer}`;\n    const weightMap =\n        io.decodeWeights(this.artifacts.weightData, this.artifacts.weightSpecs);\n    this.executor = new GraphExecutor(\n        OperationMapper.Instance.transformGraph(graph, this.signature));\n    this.executor.weightMap = this.convertTensorMapToTensorsMap(weightMap);\n    // Attach a model-level resourceManager to each executor to share resources,\n    // such as `HashTable`.\n    this.executor.resourceManager = this.resourceManager;\n\n    if (artifacts.modelInitializer != null &&\n        (artifacts.modelInitializer as tensorflow.IGraphDef).node != null) {\n      const initializer =\n          OperationMapper.Instance.transformGraph(artifacts.modelInitializer);\n      this.initializer = new GraphExecutor(initializer);\n      this.initializer.weightMap = this.executor.weightMap;\n      // Attach a model-level resourceManager to the initializer, the\n      // hashTables created from when executing the initializer will be stored\n      // in the resourceManager.\n      this.initializer.resourceManager = this.resourceManager;\n      this.initializer.executeAsync({}, []);\n    }\n\n    return true;\n  }\n\n  /**\n   * Save the configuration and/or weights of the GraphModel.\n   *\n   * An `IOHandler` is an object that has a `save` method of the proper\n   * signature defined. The `save` method manages the storing or\n   * transmission of serialized data (\"artifacts\") that represent the\n   * model's topology and weights onto or via a specific medium, such as\n   * file downloads, local storage, IndexedDB in the web browser and HTTP\n   * requests to a server. TensorFlow.js provides `IOHandler`\n   * implementations for a number of frequently used saving mediums, such as\n   * `tf.io.browserDownloads` and `tf.io.browserLocalStorage`. See `tf.io`\n   * for more details.\n   *\n   * This method also allows you to refer to certain types of `IOHandler`s\n   * as URL-like string shortcuts, such as 'localstorage://' and\n   * 'indexeddb://'.\n   *\n   * Example 1: Save `model`'s topology and weights to browser [local\n   * storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);\n   * then load it back.\n   *\n   * ```js\n   * const modelUrl =\n   *    'https://storage.googleapis.com/tfjs-models/savedmodel/mobilenet_v2_1.0_224/model.json';\n   * const model = await tf.loadGraphModel(modelUrl);\n   * const zeros = tf.zeros([1, 224, 224, 3]);\n   * model.predict(zeros).print();\n   *\n   * const saveResults = await model.save('localstorage://my-model-1');\n   *\n   * const loadedModel = await tf.loadGraphModel('localstorage://my-model-1');\n   * console.log('Prediction from loaded model:');\n   * model.predict(zeros).print();\n   * ```\n   *\n   * @param handlerOrURL An instance of `IOHandler` or a URL-like,\n   * scheme-based string shortcut for `IOHandler`.\n   * @param config Options for saving the model.\n   * @returns A `Promise` of `SaveResult`, which summarizes the result of\n   * the saving, such as byte sizes of the saved artifacts for the model's\n   *   topology and weight values.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}\n   */\n  async save(handlerOrURL: io.IOHandler|string, config?: io.SaveConfig):\n      Promise<io.SaveResult> {\n    if (typeof handlerOrURL === 'string') {\n      const handlers = io.getSaveHandlers(handlerOrURL);\n      if (handlers.length === 0) {\n        throw new Error(\n            `Cannot find any save handlers for URL '${handlerOrURL}'`);\n      } else if (handlers.length > 1) {\n        throw new Error(\n            `Found more than one (${handlers.length}) save handlers for ` +\n            `URL '${handlerOrURL}'`);\n      }\n      handlerOrURL = handlers[0];\n    }\n    if (handlerOrURL.save == null) {\n      throw new Error(\n          'GraphModel.save() cannot proceed because the IOHandler ' +\n          'provided does not have the `save` attribute defined.');\n    }\n\n    return handlerOrURL.save(this.artifacts);\n  }\n\n  /**\n   * Execute the inference for the input tensors.\n   *\n   * @param input The input tensors, when there is single input for the model,\n   * inputs param should be a `tf.Tensor`. For models with mutliple inputs,\n   * inputs params should be in either `tf.Tensor`[] if the input order is\n   * fixed, or otherwise NamedTensorMap format.\n   *\n   * For model with multiple inputs, we recommend you use NamedTensorMap as the\n   * input type, if you use `tf.Tensor`[], the order of the array needs to\n   * follow the\n   * order of inputNodes array. @see {@link GraphModel.inputNodes}\n   *\n   * You can also feed any intermediate nodes using the NamedTensorMap as the\n   * input type. For example, given the graph\n   *    InputNode => Intermediate => OutputNode,\n   * you can execute the subgraph Intermediate => OutputNode by calling\n   *    model.execute('IntermediateNode' : tf.tensor(...));\n   *\n   * This is useful for models that uses tf.dynamic_rnn, where the intermediate\n   * state needs to be fed manually.\n   *\n   * For batch inference execution, the tensors for each input need to be\n   * concatenated together. For example with mobilenet, the required input shape\n   * is [1, 244, 244, 3], which represents the [batch, height, width, channel].\n   * If we are provide a batched data of 100 images, the input tensor should be\n   * in the shape of [100, 244, 244, 3].\n   *\n   * @param config Prediction configuration for specifying the batch size and\n   * output node names. Currently the batch size option is ignored for graph\n   * model.\n   *\n   * @returns Inference result tensors. The output would be single `tf.Tensor`\n   * if model has single output node, otherwise Tensor[] or NamedTensorMap[]\n   * will be returned for model with multiple outputs.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  predict(inputs: Tensor|Tensor[]|NamedTensorMap, config?: ModelPredictConfig):\n      Tensor|Tensor[]|NamedTensorMap {\n    return this.execute(inputs, this.outputNodes);\n  }\n\n  private normalizeInputs(inputs: Tensor|Tensor[]|\n                          NamedTensorMap): NamedTensorMap {\n    if (!(inputs instanceof Tensor) && !Array.isArray(inputs)) {\n      // The input is already a NamedTensorMap.\n      return inputs;\n    }\n    inputs = Array.isArray(inputs) ? inputs : [inputs];\n    if (inputs.length !== this.inputNodes.length) {\n      throw new Error(\n          'Input tensor count mismatch,' +\n          `the graph model has ${this.inputNodes.length} placeholders, ` +\n          `while there are ${inputs.length} input tensors.`);\n    }\n    return this.inputNodes.reduce((map, inputName, i) => {\n      map[inputName] = (inputs as Tensor[])[i];\n      return map;\n    }, {} as NamedTensorMap);\n  }\n\n  private normalizeOutputs(outputs: string|string[]): string[] {\n    outputs = outputs || this.outputNodes;\n    return !Array.isArray(outputs) ? [outputs] : outputs;\n  }\n\n  /**\n   * Executes inference for the model for given input tensors.\n   * @param inputs tensor, tensor array or tensor map of the inputs for the\n   * model, keyed by the input node names.\n   * @param outputs output node name from the Tensorflow model, if no\n   * outputs are specified, the default outputs of the model would be used.\n   * You can inspect intermediate nodes of the model by adding them to the\n   * outputs array.\n   *\n   * @returns A single tensor if provided with a single output or no outputs\n   * are provided and there is only one default output, otherwise return a\n   * tensor array. The order of the tensor array is the same as the outputs\n   * if provided, otherwise the order of outputNodes attribute of the model.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  execute(inputs: Tensor|Tensor[]|NamedTensorMap, outputs?: string|string[]):\n      Tensor|Tensor[] {\n    inputs = this.normalizeInputs(inputs);\n    outputs = this.normalizeOutputs(outputs);\n    const result = this.executor.execute(inputs, outputs);\n    return result.length > 1 ? result : result[0];\n  }\n  /**\n   * Executes inference for the model for given input tensors in async\n   * fashion, use this method when your model contains control flow ops.\n   * @param inputs tensor, tensor array or tensor map of the inputs for the\n   * model, keyed by the input node names.\n   * @param outputs output node name from the Tensorflow model, if no outputs\n   * are specified, the default outputs of the model would be used. You can\n   * inspect intermediate nodes of the model by adding them to the outputs\n   * array.\n   *\n   * @returns A Promise of single tensor if provided with a single output or\n   * no outputs are provided and there is only one default output, otherwise\n   * return a tensor map.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  async executeAsync(\n      inputs: Tensor|Tensor[]|NamedTensorMap,\n      outputs?: string|string[]): Promise<Tensor|Tensor[]> {\n    inputs = this.normalizeInputs(inputs);\n    outputs = this.normalizeOutputs(outputs);\n    const result = await this.executor.executeAsync(inputs, outputs);\n    return result.length > 1 ? result : result[0];\n  }\n\n  private convertTensorMapToTensorsMap(map: NamedTensorMap): NamedTensorsMap {\n    return Object.keys(map).reduce((newMap: NamedTensorsMap, key) => {\n      newMap[key] = [map[key]];\n      return newMap;\n    }, {});\n  }\n\n  /**\n   * Releases the memory used by the weight tensors and resourceManager.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  dispose() {\n    this.executor.dispose();\n\n    if (this.initializer) {\n      this.initializer.dispose();\n    }\n\n    this.resourceManager.dispose();\n  }\n}\n\n/**\n * Load a graph model given a URL to the model definition.\n *\n * Example of loading MobileNetV2 from a URL and making a prediction with a\n * zeros input:\n *\n * ```js\n * const modelUrl =\n *    'https://storage.googleapis.com/tfjs-models/savedmodel/mobilenet_v2_1.0_224/model.json';\n * const model = await tf.loadGraphModel(modelUrl);\n * const zeros = tf.zeros([1, 224, 224, 3]);\n * model.predict(zeros).print();\n * ```\n *\n * Example of loading MobileNetV2 from a TF Hub URL and making a prediction with\n * a zeros input:\n *\n * ```js\n * const modelUrl =\n *    'https://tfhub.dev/google/imagenet/mobilenet_v2_140_224/classification/2';\n * const model = await tf.loadGraphModel(modelUrl, {fromTFHub: true});\n * const zeros = tf.zeros([1, 224, 224, 3]);\n * model.predict(zeros).print();\n * ```\n * @param modelUrl The url or an `io.IOHandler` that loads the model.\n * @param options Options for the HTTP request, which allows to send credentials\n *    and custom headers.\n *\n * @doc {heading: 'Models', subheading: 'Loading'}\n */\nexport async function loadGraphModel(\n    modelUrl: string|io.IOHandler,\n    options: io.LoadOptions = {}): Promise<GraphModel> {\n  if (modelUrl == null) {\n    throw new Error(\n        'modelUrl in loadGraphModel() cannot be null. Please provide a url ' +\n        'or an IOHandler that loads the model');\n  }\n  if (options == null) {\n    options = {};\n  }\n\n  if (options.fromTFHub) {\n    if ((modelUrl as io.IOHandler).load == null) {\n      if (!(modelUrl as string).endsWith('/')) {\n        modelUrl = (modelUrl as string) + '/';\n      }\n      modelUrl = `${modelUrl}${DEFAULT_MODEL_NAME}${TFHUB_SEARCH_PARAM}`;\n    }\n  }\n  const model = new GraphModel(modelUrl, options);\n  await model.load();\n  return model;\n}\n", "/** @license See the LICENSE file. */\n\n// This code is auto-generated, do not modify this file!\nconst version = '3.9.0';\nexport {version};\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport {GraphModel, loadGraphModel} from './executor/graph_model';\nexport {deregisterOp, registerOp} from './operations/custom_op/register';\nexport {GraphNode, OpExecutor} from './operations/types';\nexport {version as version_converter} from './version';\n"],
  "mappings": "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",
  "names": []
}
