{
  "version": 3,
  "sources": ["../../../tfjs-backend-cpu/src/shared.ts", "../../../tfjs-backend-cpu/src/kernels/Abs.ts", "../../../tfjs-backend-cpu/src/cpu_util.ts", "../../../tfjs-backend-cpu/src/kernels/Add.ts", "../../../tfjs-backend-cpu/src/utils/binary_impl.ts", "../../../tfjs-backend-cpu/src/utils/binary_utils.ts", "../../../tfjs-backend-cpu/src/kernels/Cast.ts", "../../../tfjs-backend-cpu/src/utils/zeros_impl.ts", "../../../tfjs-backend-cpu/src/kernels/Complex.ts", "../../../tfjs-backend-cpu/src/kernels/Identity.ts", "../../../tfjs-backend-cpu/src/kernels/Real.ts", "../../../tfjs-backend-cpu/src/kernels/Bincount_impl.ts", "../../../tfjs-backend-cpu/src/kernels/Ceil.ts", "../../../tfjs-backend-cpu/src/utils/unary_impl.ts", "../../../tfjs-backend-cpu/src/utils/unary_utils.ts", "../../../tfjs-backend-cpu/src/kernels/Concat_impl.ts", "../../../tfjs-backend-cpu/src/kernels/Equal.ts", "../../../tfjs-backend-cpu/src/kernels/Exp.ts", "../../../tfjs-backend-cpu/src/kernels/Expm1.ts", "../../../tfjs-backend-cpu/src/kernels/Floor.ts", "../../../tfjs-backend-cpu/src/kernels/GatherNd_Impl.ts", "../../../tfjs-backend-cpu/src/kernels/GatherV2_impl.ts", "../../../tfjs-backend-cpu/src/kernels/Greater.ts", "../../../tfjs-backend-cpu/src/kernels/GreaterEqual.ts", "../../../tfjs-backend-cpu/src/kernels/Less.ts", "../../../tfjs-backend-cpu/src/kernels/LessEqual.ts", "../../../tfjs-backend-cpu/src/kernels/LinSpace_impl.ts", "../../../tfjs-backend-cpu/src/kernels/Log.ts", "../../../tfjs-backend-cpu/src/kernels/Max_impl.ts", "../../../tfjs-backend-cpu/src/kernels/Maximum.ts", "../../../tfjs-backend-cpu/src/kernels/Minimum.ts", "../../../tfjs-backend-cpu/src/kernels/Multiply.ts", "../../../tfjs-backend-cpu/src/kernels/Neg.ts", "../../../tfjs-backend-cpu/src/kernels/NotEqual.ts", "../../../tfjs-backend-cpu/src/kernels/Prod.ts", "../../../tfjs-backend-cpu/src/kernels/Transpose.ts", "../../../tfjs-backend-cpu/src/kernels/Transpose_impl.ts", "../../../tfjs-backend-cpu/src/kernels/Range_impl.ts", "../../../tfjs-backend-cpu/src/kernels/Rsqrt.ts", "../../../tfjs-backend-cpu/src/kernels/Sigmoid.ts", "../../../tfjs-backend-cpu/src/kernels/Slice.ts", "../../../tfjs-backend-cpu/src/kernels/SparseFillEmptyRows_impl.ts", "../../../tfjs-backend-cpu/src/kernels/SparseReshape_impl.ts", "../../../tfjs-backend-cpu/src/kernels/SparseSegmentReduction_impl.ts", "../../../tfjs-backend-cpu/src/kernels/Sqrt.ts", "../../../tfjs-backend-cpu/src/kernels/SquaredDifference.ts", "../../../tfjs-backend-cpu/src/kernels/StridedSlice_impl.ts", "../../../tfjs-backend-cpu/src/kernels/StringNGrams_impl.ts", "../../../tfjs-backend-cpu/src/kernels/StringSplit_impl.ts", "../../../tfjs-backend-cpu/src/kernels/StringToHashBucketFast_impl.ts", "../../../tfjs-backend-cpu/src/kernels/Sub.ts", "../../../tfjs-backend-cpu/src/kernels/Tile_impl.ts", "../../../tfjs-backend-cpu/src/kernels/TopK_impl.ts", "../../../tfjs-backend-cpu/src/kernels/Unique_impl.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Shared functionality among backends.\nexport {simpleAbsImpl} from './kernels/Abs';\nexport {addImpl} from './kernels/Add';\nexport {bincountImpl, bincountReduceImpl} from './kernels/Bincount_impl';\nexport {ceilImpl} from './kernels/Ceil';\nexport {concatImpl} from './kernels/Concat_impl';\nexport {equalImpl} from './kernels/Equal';\nexport {expImpl} from './kernels/Exp';\nexport {expm1Impl} from './kernels/Expm1';\nexport {floorImpl} from './kernels/Floor';\nexport {gatherNdImpl} from './kernels/GatherNd_Impl';\nexport {gatherV2Impl} from './kernels/GatherV2_impl';\nexport {greaterImpl} from './kernels/Greater';\nexport {greaterEqualImpl} from './kernels/GreaterEqual';\nexport {lessImpl} from './kernels/Less';\nexport {lessEqualImpl} from './kernels/LessEqual';\nexport {linSpaceImpl} from './kernels/LinSpace_impl';\nexport {logImpl} from './kernels/Log';\nexport {maxImpl} from './kernels/Max_impl';\nexport {maximumImpl} from './kernels/Maximum';\nexport {minimumImpl} from './kernels/Minimum';\nexport {multiplyImpl} from './kernels/Multiply';\nexport {negImpl} from './kernels/Neg';\nexport {notEqualImpl} from './kernels/NotEqual';\nexport {prodImpl} from './kernels/Prod';\nexport {rangeImpl} from './kernels/Range_impl';\nexport {rsqrtImpl} from './kernels/Rsqrt';\nexport {sigmoidImpl} from './kernels/Sigmoid';\nexport {sliceImpl} from './kernels/Slice';\nexport {sparseFillEmptyRowsImpl} from './kernels/SparseFillEmptyRows_impl';\nexport {sparseReshapeImpl} from './kernels/SparseReshape_impl';\nexport {sparseSegmentReductionImpl} from './kernels/SparseSegmentReduction_impl';\nexport {sqrtImpl} from './kernels/Sqrt';\nexport {squaredDifferenceImpl} from './kernels/SquaredDifference';\nexport {stridedSliceImpl} from './kernels/StridedSlice_impl';\nexport {stringNGramsImpl} from './kernels/StringNGrams_impl';\nexport {stringSplitImpl} from './kernels/StringSplit_impl';\nexport {stringToHashBucketFastImpl} from './kernels/StringToHashBucketFast_impl';\nexport {subImpl} from './kernels/Sub';\nexport {tileImpl} from './kernels/Tile_impl';\nexport {topKImpl} from './kernels/TopK_impl';\nexport {transposeImpl} from './kernels/Transpose_impl';\nexport {uniqueImpl} from './kernels/Unique_impl';\nexport {ComplexBinaryKernelImpl, SimpleBinaryKernelImpl} from './utils/binary_types';\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Abs, AbsInputs, KernelConfig, KernelFunc, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function simpleAbsImpl(vals: TypedArray): Float32Array {\n  const resultValues = new Float32Array(vals.length);\n  for (let i = 0; i < vals.length; ++i) {\n    resultValues[i] = Math.abs(vals[i]);\n  }\n  return resultValues;\n}\n\nexport const abs = (args: {inputs: AbsInputs, backend: MathBackendCPU}) => {\n  const {x} = args.inputs;\n  const cpuBackend = args.backend;\n\n  assertNotComplex(x, 'abs');\n\n  let resultValues = new Float32Array(util.sizeFromShape(x.shape));\n  const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n  resultValues = simpleAbsImpl(values);\n\n  return cpuBackend.makeOutput(resultValues, x.shape, 'float32');\n};\n\nexport const absConfig: KernelConfig = {\n  kernelName: Abs,\n  backendName: 'cpu',\n  kernelFunc: abs as {} as KernelFunc,\n};\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo, util} from '@tensorflow/tfjs-core';\n\nexport function assertNotComplex(\n    tensor: TensorInfo|TensorInfo[], opName: string): void {\n  if (!Array.isArray(tensor)) {\n    tensor = [tensor];\n  }\n  tensor.forEach(t => {\n    if (t != null) {\n      util.assert(\n          t.dtype !== 'complex64',\n          () => `${\n              opName} does not support complex64 tensors in the CPU backend.`);\n    }\n  });\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Add, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const addImpl =\n    createSimpleBinaryKernelImpl(((a: number, b: number) => a + b));\nexport const addComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {real: aReal + bReal, imag: aImag + bImag};\n    }));\n\nexport const add = binaryKernelFunc(Add, addImpl, addComplexImpl);\n\nexport const addConfig: KernelConfig = {\n  kernelName: Add,\n  backendName: 'cpu',\n  kernelFunc: add\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, DataValues, NumericDataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {SimpleBinaryKernelImpl, SimpleBinaryOperation} from './binary_types';\n\n/**\n * Template that creates implementation for binary ops. Supports broadcast.\n */\nexport function createSimpleBinaryKernelImpl(op: SimpleBinaryOperation):\n    SimpleBinaryKernelImpl {\n  return (aShape: number[], bShape: number[], aVals: DataValues,\n          bVals: DataValues, dtype: DataType): [TypedArray, number[]] => {\n    const newShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n\n    const resultRank = newShape.length;\n    const resultStrides = util.computeStrides(newShape);\n    const resultSize = util.sizeFromShape(newShape);\n\n    const result =\n        util.getTypedArrayFromDType(dtype as NumericDataType, resultSize);\n\n    const aRank = aShape.length;\n    const bRank = bShape.length;\n\n    const aStrides = util.computeStrides(aShape);\n    const bStrides = util.computeStrides(bShape);\n\n    const aBroadcastDims = backend_util.getBroadcastDims(aShape, newShape);\n    const bBroadcastDims = backend_util.getBroadcastDims(bShape, newShape);\n\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (let i = 0; i < result.length; ++i) {\n        result[i] = op(aVals[i % aVals.length], bVals[i % bVals.length]);\n      }\n    } else {\n      for (let i = 0; i < result.length; ++i) {\n        const loc = util.indexToLoc(i, resultRank, resultStrides);\n\n        const aLoc = loc.slice(-aRank);\n        aBroadcastDims.forEach(d => aLoc[d] = 0);\n        const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n\n        const bLoc = loc.slice(-bRank);\n        bBroadcastDims.forEach(d => bLoc[d] = 0);\n        const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n\n        result[i] = op(aVals[aIndex], bVals[bIndex]);\n      }\n    }\n\n    return [result, newShape];\n  };\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BinaryInputs, DataType, KernelFunc, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {cast} from '../kernels/Cast';\nimport {complex} from '../kernels/Complex';\n\nimport {ComplexBinaryKernelImpl, ComplexBinaryOperation, SimpleBinaryKernelImpl} from './binary_types';\n\n/**\n * Template that creates a `KernelFunc` for binary ops.\n * @param name Kernel name.\n * @param binaryKernelImpl A `SimpleBinaryKernelImpl` for the kernel.\n * @param binaryKernelComplexImpl Optional. If exists, represents a\n *     `ComplexBinaryKernelImpl` for the kernel, will be used when input dtype\n *     is `complex64`.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function binaryKernelFunc(\n    name: string, simpleImpl: SimpleBinaryKernelImpl,\n    complexImpl?: ComplexBinaryKernelImpl, dtype?: DataType): KernelFunc {\n  if (complexImpl == null) {\n    return ({inputs, backend}) => {\n      const {a, b} = inputs as BinaryInputs;\n      const cpuBackend = backend as MathBackendCPU;\n\n      assertNotComplex([a, b], name);\n\n      const aVals = cpuBackend.data.get(a.dataId).values as TypedArray;\n      const bVals = cpuBackend.data.get(b.dataId).values as TypedArray;\n\n      const decodedAVals = a.dtype === 'string' ?\n          // tslint:disable-next-line: no-any\n          backend_util.fromUint8ToStringArray(aVals as any as Uint8Array[]) :\n          aVals;\n      const decodedBVals = a.dtype === 'string' ?\n          // tslint:disable-next-line: no-any\n          backend_util.fromUint8ToStringArray(bVals as any as Uint8Array[]) :\n          bVals;\n      const $dtype = dtype || a.dtype;\n\n      const [resultData, resultShape] =\n          simpleImpl(a.shape, b.shape, decodedAVals, decodedBVals, $dtype);\n\n      return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);\n    };\n  }\n\n  return ({inputs, backend}) => {\n    const {a, b} = inputs as BinaryInputs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    if (a.dtype === 'complex64' || b.dtype === 'complex64') {\n      const $aComplex = cast(\n          {inputs: {x: a}, backend: cpuBackend, attrs: {dtype: 'complex64'}});\n\n      const $aComplexVals = cpuBackend.data.get($aComplex.dataId);\n\n      const aReal = $aComplexVals.complexTensorInfos.real;\n      const aImag = $aComplexVals.complexTensorInfos.imag;\n\n      const aRealVals =\n          cpuBackend.data.get(aReal.dataId).values as Float32Array;\n      const aImagVals =\n          cpuBackend.data.get(aImag.dataId).values as Float32Array;\n\n      const $bComplex = cast(\n          {inputs: {x: b}, backend: cpuBackend, attrs: {dtype: 'complex64'}});\n\n      const $bComplexVals = cpuBackend.data.get($bComplex.dataId);\n\n      const bReal = $bComplexVals.complexTensorInfos.real;\n      const bImag = $bComplexVals.complexTensorInfos.imag;\n\n      const bRealVals =\n          cpuBackend.data.get(bReal.dataId).values as Float32Array;\n      const bImagVals =\n          cpuBackend.data.get(bImag.dataId).values as Float32Array;\n\n      const [resultRealData, resultImagData, resultShape] = complexImpl(\n          a.shape, b.shape, aRealVals, aImagVals, bRealVals, bImagVals);\n\n      const resultReal =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', resultRealData);\n\n      const resultImag =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', resultImagData);\n\n      const result = complex(\n          {inputs: {real: resultReal, imag: resultImag}, backend: cpuBackend});\n\n      cpuBackend.disposeIntermediateTensorInfo($aComplex);\n      cpuBackend.disposeIntermediateTensorInfo($bComplex);\n      cpuBackend.disposeIntermediateTensorInfo(resultReal);\n      cpuBackend.disposeIntermediateTensorInfo(resultImag);\n\n      return result;\n    } else {\n      const aVals = cpuBackend.data.get(a.dataId).values as TypedArray;\n      const bVals = cpuBackend.data.get(b.dataId).values as TypedArray;\n\n      const $dtype = dtype || a.dtype;\n\n      const [resultData, resultShape] =\n          simpleImpl(a.shape, b.shape, aVals, bVals, $dtype);\n\n      return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);\n    }\n  };\n}\n\n/**\n * Template that creates the complex type implementation for binary ops.\n * Supports broadcast.\n */\nexport function createComplexBinaryKernelImpl(op: ComplexBinaryOperation):\n    ComplexBinaryKernelImpl {\n  return (aShape: number[], bShape: number[], aRealVals: Float32Array,\n          aImagVals: Float32Array, bRealVals: Float32Array,\n          bImagVals: Float32Array): [TypedArray, TypedArray, number[]] => {\n    const resultShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    const resultSize = util.sizeFromShape(resultShape);\n    const resultRank = resultShape.length;\n    const resultStrides = util.computeStrides(resultShape);\n\n    const resultRealVals = util.getTypedArrayFromDType('float32', resultSize);\n    const resultImagVals = util.getTypedArrayFromDType('float32', resultSize);\n\n    const aBroadcastDims = backend_util.getBroadcastDims(aShape, resultShape);\n    const bBroadcastDims = backend_util.getBroadcastDims(bShape, resultShape);\n\n    const aVals = backend_util.mergeRealAndImagArrays(aRealVals, aImagVals);\n    const bVals = backend_util.mergeRealAndImagArrays(bRealVals, bImagVals);\n\n    const aRank = aShape.length;\n    const aStrides = util.computeStrides(aShape);\n\n    const bRank = bShape.length;\n    const bStrides = util.computeStrides(bShape);\n\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (let i = 0; i < resultRealVals.length; i++) {\n        const aIdx = i % aVals.length;\n        const bIdx = i % bVals.length;\n\n        const result =\n            op(aVals[aIdx * 2], aVals[aIdx * 2 + 1], bVals[bIdx * 2],\n               bVals[bIdx * 2 + 1]);\n\n        resultRealVals[i] = result.real;\n        resultImagVals[i] = result.imag;\n      }\n    } else {\n      for (let i = 0; i < resultRealVals.length; i++) {\n        const loc = util.indexToLoc(i, resultRank, resultStrides);\n\n        const aLoc = loc.slice(-aRank);\n        aBroadcastDims.forEach(d => aLoc[d] = 0);\n        const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n\n        const bLoc = loc.slice(-bRank);\n        bBroadcastDims.forEach(d => bLoc[d] = 0);\n        const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n\n        const opResult =\n            op(aVals[aIndex * 2], aVals[aIndex * 2 + 1], bVals[bIndex * 2],\n               bVals[bIndex * 2 + 1]);\n\n        resultRealVals[i] = opResult.real;\n        resultImagVals[i] = opResult.imag;\n      }\n    }\n    return [resultRealVals, resultImagVals, resultShape];\n  };\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Cast, CastAttrs, CastInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {zeros} from '../utils/zeros_impl';\n\nimport {complex} from './Complex';\nimport {identity} from './Identity';\nimport {real} from './Real';\n\nexport function cast(\n    args: {inputs: CastInputs, backend: MathBackendCPU, attrs: CastAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dtype} = attrs;\n\n  // Casting to complex64.\n  if (dtype === 'complex64') {\n    if (x.dtype === 'complex64') {\n      return identity({inputs: {x}, backend});\n    }\n\n    const zerosTensorInfo = zeros(backend, x.shape, x.dtype);\n    const floatX = cast({inputs: {x}, backend, attrs: {dtype: 'float32'}});\n\n    const result =\n        complex({inputs: {real: floatX, imag: zerosTensorInfo}, backend});\n\n    backend.disposeIntermediateTensorInfo(zerosTensorInfo);\n    backend.disposeIntermediateTensorInfo(floatX);\n\n    return result;\n  }\n\n  // Casting from complex64\n  if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const result = cast({inputs: {x: realPart}, backend, attrs: {dtype}});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n\n    return result;\n  }\n\n  if (!util.hasEncodingLoss(x.dtype, dtype)) {\n    // We don't change the underlying data, since we cast to higher\n    // precision.\n    const result = identity({inputs: {x}, backend});\n    return {dataId: result.dataId, shape: result.shape, dtype};\n  }\n\n  if (dtype === 'int32') {\n    const values = backend.data.get(x.dataId).values as TypedArray;\n    const resultValues = Int32Array.from(values);\n    return backend.makeTensorInfo(x.shape, 'int32', resultValues);\n  }\n\n  if (dtype === 'bool') {\n    // This is essentially the result of notEqual(x, 0). We avoid using\n    // kernel notEqual to avoid circular dependency, i.e. binary_utils ->\n    // cast -> notEqual -> binary_utils.\n    const xVals = backend.data.get(x.dataId).values as TypedArray;\n    const zero = util.toTypedArray([0], x.dtype);\n\n    const [resultData, resultShape] = createSimpleBinaryKernelImpl(\n        (a, b) => (a !== b) ? 1 : 0)(x.shape, [], xVals, zero, 'bool');\n\n    return backend.makeTensorInfo(resultShape, 'bool', resultData);\n  }\n\n  throw new Error(`Error in Cast: failed to cast ${x.dtype} to ${dtype}`);\n}\n\nexport const castConfig: KernelConfig = {\n  kernelName: Cast,\n  backendName: 'cpu',\n  kernelFunc: cast as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, TensorInfo, util} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from '../backend_cpu';\nimport {complex} from '../kernels/Complex';\n\n/**\n * Generates a tensorInfo with all zeros value.\n * @param backend cpu backend.\n * @param shape Shape for the zeros tensor.\n * @param dtype Optional. If set, the result has this dtype.\n */\nexport function zeros(\n    backend: MathBackendCPU, shape: number[],\n    dtype: DataType = 'float32'): TensorInfo {\n  if (dtype === 'complex64') {\n    const real = zeros(backend, shape, 'float32');\n    const imag = zeros(backend, shape, 'float32');\n\n    return complex({inputs: {real, imag}, backend});\n  }\n\n  const values = util.makeZerosTypedArray(util.sizeFromShape(shape), dtype);\n\n  return backend.makeTensorInfo(shape, dtype, values);\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Complex, ComplexInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function complex(args: {inputs: ComplexInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {real, imag} = inputs;\n\n  const realVals = backend.data.get(real.dataId).values as TypedArray;\n  const imagVals = backend.data.get(imag.dataId).values as TypedArray;\n\n  const complexInfo = backend.makeTensorInfo(real.shape, 'complex64');\n\n  const complex = backend.data.get(complexInfo.dataId);\n\n  // The complex tensor owns the underlying real and imag tensorInfos, only the\n  // complex tensor tracks refCount, when complexData is disposed the\n  // underlying tensorData will be disposed.\n  complex.complexTensorInfos = {\n    real: backend.makeTensorInfo(real.shape, 'float32', realVals),\n    imag: backend.makeTensorInfo(imag.shape, 'float32', imagVals)\n  };\n\n  return complexInfo;\n}\n\nexport const complexConfig: KernelConfig = {\n  kernelName: Complex,\n  backendName: 'cpu',\n  kernelFunc: complex as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Identity, IdentityInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function identity(\n    args: {inputs: IdentityInputs, backend: MathBackendCPU}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  backend.incRef(x.dataId);\n\n  return {dataId: x.dataId, shape: x.shape, dtype: x.dtype};\n}\n\nexport const identityConfig: KernelConfig = {\n  kernelName: Identity,\n  backendName: 'cpu',\n  kernelFunc: identity as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Real, RealInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function real(args: {inputs: RealInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  const real = backend.data.get(input.dataId).complexTensorInfos.real;\n  const realVal = backend.data.get(real.dataId).values;\n\n  // When complex tensor is disposed, its underlying parts will be disposed too.\n  // Make new tensor out of the real value of the complex. This makes sure the\n  // value is still accessible even if complex tensor is disposed.\n  return backend.makeTensorInfo(real.shape, real.dtype, realVal);\n}\n\nexport const realConfig: KernelConfig = {\n  kernelName: Real,\n  backendName: 'cpu',\n  kernelFunc: real as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function bincountImpl(\n    xVals: TypedArray, weightsVals: TypedArray, weightsDtype: DataType,\n    weightsShape: number[], size: number): TypedArray {\n  const weightsSize = util.sizeFromShape(weightsShape);\n  const outVals = util.makeZerosTypedArray(size, weightsDtype) as TypedArray;\n\n  for (let i = 0; i < xVals.length; i++) {\n    const value = xVals[i];\n    if (value < 0) {\n      throw new Error('Input x must be non-negative!');\n    }\n\n    if (value >= size) {\n      continue;\n    }\n\n    if (weightsSize > 0) {\n      outVals[value] += weightsVals[i];\n    } else {\n      outVals[value] += 1;\n    }\n  }\n\n  return outVals;\n}\n\nexport function bincountReduceImpl<R extends Rank>(\n    xBuf: TensorBuffer<R>, weightsBuf: TensorBuffer<R>, size: number,\n    binaryOutput = false): TensorBuffer<R> {\n  const numRows = xBuf.shape[0];\n  const numCols = xBuf.shape[1];\n\n  const outBuf = buffer([numRows, size], weightsBuf.dtype);\n\n  for (let i = 0; i < numRows; i++) {\n    for (let j = 0; j < numCols; j++) {\n      const value = xBuf.get(i, j);\n      if (value < 0) {\n        throw new Error('Input x must be non-negative!');\n      }\n\n      if (value >= size) {\n        continue;\n      }\n\n      if (binaryOutput) {\n        outBuf.set(1, i, value);\n      } else {\n        if (weightsBuf.size > 0) {\n          outBuf.set(outBuf.get(i, value) + weightsBuf.get(i, j), i, value);\n        } else {\n          outBuf.set(outBuf.get(i, value) + 1, i, value);\n        }\n      }\n    }\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Ceil, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const ceilImpl = createSimpleUnaryImpl((xi) => Math.ceil(xi));\nexport const ceil = unaryKernelFuncFromImpl(Ceil, ceilImpl);\n\nexport const ceilConfig: KernelConfig = {\n  kernelName: Ceil,\n  backendName: 'cpu',\n  kernelFunc: ceil,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {NumericDataType, util} from '@tensorflow/tfjs-core';\n\nimport {SimpleUnaryImpl, SimpleUnaryOperation} from './unary_types';\n\n/**\n * Template that creates implementation for unary op.\n */\nexport function createSimpleUnaryImpl(op: SimpleUnaryOperation):\n    SimpleUnaryImpl {\n  return (values, dtype, attrs) => {\n    const newValues =\n        util.getTypedArrayFromDType(dtype as NumericDataType, values.length);\n    for (let i = 0; i < values.length; ++i) {\n      newValues[i] = op(values[i], attrs);\n    }\n    return newValues;\n  };\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, KernelFunc, TypedArray, UnaryInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {SimpleUnaryImpl, SimpleUnaryOperation} from './unary_types';\n\n/**\n * Template that creates a `KernelFunc` for unary ops.\n * @param name Kernel name.\n * @param op A `SimpleUnaryOperation` for the kernel.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the input. This is mainly used in certain\n *     kernels that return bool type, such as isFinite, isInf, etc.\n */\nexport function unaryKernelFunc(\n    name: string, op: SimpleUnaryOperation, dtype?: DataType): KernelFunc {\n  return ({inputs, attrs, backend}) => {\n    const {x} = inputs as UnaryInputs;\n    assertNotComplex(x, name);\n    if (x.dtype === 'string' || dtype === 'string') {\n      throw new Error('unaryKernelFunc does not support string input/output');\n    }\n\n    const cpuBackend = backend as MathBackendCPU;\n    const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const xSize = util.sizeFromShape(x.shape);\n    const $dtype = dtype || x.dtype;\n    const newValues = util.getArrayFromDType($dtype, xSize);\n    for (let i = 0; i < xSize; ++i) {\n      newValues[i] = op(values[i], attrs);\n    }\n    return cpuBackend.makeTensorInfo(x.shape, $dtype, newValues);\n  };\n}\n\n/**\n * Template that creates a `KernelFunc` for unary ops from the given\n * `SimpleUnaryImpl`..\n * @param name Kernel name.\n * @param unaryImpl A `SimpleUnaryImpl` that implements the op.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the input. This is mainly used in certain\n *     kernels that return bool type, such as isFinite, isInf, etc.\n */\nexport function unaryKernelFuncFromImpl(\n    name: string, unaryImpl: SimpleUnaryImpl, dtype?: DataType): KernelFunc {\n  return ({inputs, attrs, backend}) => {\n    const {x} = inputs as UnaryInputs;\n    assertNotComplex(x, name);\n    if (x.dtype === 'string' || dtype === 'string') {\n      throw new Error('unaryKernelFunc does not support string input/output');\n    }\n\n    const cpuBackend = backend as MathBackendCPU;\n    const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const $dtype = dtype || x.dtype;\n    const newValues = unaryImpl(values, $dtype, attrs);\n    return cpuBackend.makeTensorInfo(x.shape, $dtype, newValues);\n  };\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BackendValues, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function concatImpl(\n    inputs: Array<{vals: BackendValues, shape: number[]}>, outShape: number[],\n    dtype: DataType, simplyConcat: boolean): TypedArray|string[] {\n  const outVals = util.getArrayFromDType(dtype, util.sizeFromShape(outShape));\n\n  if (simplyConcat && dtype !== 'string') {\n    // Use built-in TypedArray.set() method for speed.\n    let offset = 0;\n    inputs.forEach(input => {\n      const size = util.sizeFromShape(input.shape);\n\n      (outVals as TypedArray).set(input.vals as TypedArray, offset);\n      offset += size;\n    });\n  } else {\n    let colOffset = 0;\n\n    inputs.forEach(input => {\n      const decodedData = dtype === 'string' ?\n          backend_util.fromUint8ToStringArray(input.vals as Uint8Array[]) :\n          input.vals as TypedArray;\n\n      let tIdx = 0;\n\n      for (let row = 0; row < input.shape[0]; ++row) {\n        const resIdx = row * outShape[1] + colOffset;\n        for (let col = 0; col < input.shape[1]; ++col) {\n          outVals[resIdx + col] = decodedData[tIdx++];\n        }\n      }\n\n      colOffset += input.shape[1];\n    });\n  }\n\n  return outVals;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Equal, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const equalImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a === b) ? 1 : 0);\nexport const equal =\n    binaryKernelFunc(Equal, equalImpl, null /* complexImpl */, 'bool');\n\nexport const equalConfig: KernelConfig = {\n  kernelName: Equal,\n  backendName: 'cpu',\n  kernelFunc: equal\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Exp, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const expImpl = createSimpleUnaryImpl((xi) => Math.exp(xi));\nexport const exp = unaryKernelFuncFromImpl(Exp, expImpl);\n\nexport const expConfig: KernelConfig = {\n  kernelName: Exp,\n  backendName: 'cpu',\n  kernelFunc: exp,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Expm1, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const expm1Impl = createSimpleUnaryImpl((xi) => Math.expm1(xi));\nexport const expm1 = unaryKernelFuncFromImpl(Expm1, expm1Impl);\n\nexport const expm1Config: KernelConfig = {\n  kernelName: Expm1,\n  backendName: 'cpu',\n  kernelFunc: expm1,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Floor, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const floorImpl = createSimpleUnaryImpl((xi) => Math.floor(xi));\nexport const floor = unaryKernelFuncFromImpl(Floor, floorImpl);\n\nexport const floorConfig: KernelConfig = {\n  kernelName: Floor,\n  backendName: 'cpu',\n  kernelFunc: floor,\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer, TypedArray} from '@tensorflow/tfjs-core';\n\nexport function gatherNdImpl<R extends Rank>(\n    indicesData: TypedArray, paramsBuf: TensorBuffer<R>, dtype: DataType,\n    numSlices: number, sliceRank: number, sliceSize: number, strides: number[],\n    paramsShape: number[], paramsSize: number): TensorBuffer<R> {\n  const outBuf = buffer([numSlices, sliceSize], dtype);\n\n  for (let i = 0; i < numSlices; i++) {\n    const index = [];\n    let flattenIndex = 0;\n    for (let j = 0; j < sliceRank; j++) {\n      const dim = indicesData[i * sliceRank + j];\n      flattenIndex += dim * strides[j];\n      index.push(dim);\n    }\n    if (flattenIndex < 0 || flattenIndex >= paramsSize / sliceSize) {\n      throw new Error(\n          `Invalid indices: ${index} does not index into ${paramsShape}`);\n    }\n\n    for (let k = 0; k < sliceSize; k++) {\n      outBuf.values[i * sliceSize + k] =\n          paramsBuf.get(...paramsBuf.indexToLoc(flattenIndex * sliceSize + k));\n    }\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\nexport function gatherV2Impl<R extends Rank, D extends DataType>(\n    xBuf: TensorBuffer<R, D>, indicesBuf: TensorBuffer<R, D>,\n    flattenOutputShape: number[]): TensorBuffer<R, D> {\n  const outBuf = buffer(flattenOutputShape, xBuf.dtype);\n  for (let i = 0; i < outBuf.size; ++i) {\n    const newLoc = outBuf.indexToLoc(i);\n\n    const originalLoc: number[] = newLoc.slice();\n    const batchIdx = originalLoc[0];\n    const indicesIdx = originalLoc[2];\n    const indicesIndex = indicesBuf.locToIndex([batchIdx, indicesIdx]);\n    originalLoc[2] = indicesBuf.values[indicesIndex] as number;\n\n    const originalIndex = xBuf.locToIndex(originalLoc);\n    outBuf.values[i] = xBuf.values[originalIndex];\n  }\n\n  return outBuf as TensorBuffer<R, D>;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Greater, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const greaterImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a > b) ? 1 : 0);\nexport const greater =\n    binaryKernelFunc(Greater, greaterImpl, null /* complexImpl */, 'bool');\n\nexport const greaterConfig: KernelConfig = {\n  kernelName: Greater,\n  backendName: 'cpu',\n  kernelFunc: greater\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GreaterEqual, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const greaterEqualImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a >= b) ? 1 : 0);\nexport const greaterEqual = binaryKernelFunc(\n    GreaterEqual, greaterEqualImpl, null /* complexImpl */, 'bool');\n\nexport const greaterEqualConfig: KernelConfig = {\n  kernelName: GreaterEqual,\n  backendName: 'cpu',\n  kernelFunc: greaterEqual\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Less} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const lessImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a < b) ? 1 : 0);\nexport const less =\n    binaryKernelFunc(Less, lessImpl, null /* complexImpl */, 'bool');\n\nexport const lessConfig: KernelConfig = {\n  kernelName: Less,\n  backendName: 'cpu',\n  kernelFunc: less\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LessEqual} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const lessEqualImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a <= b) ? 1 : 0);\nexport const lessEqual =\n    binaryKernelFunc(LessEqual, lessEqualImpl, null /* complexImpl */, 'bool');\n\nexport const lessEqualConfig: KernelConfig = {\n  kernelName: LessEqual,\n  backendName: 'cpu',\n  kernelFunc: lessEqual\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function linSpaceImpl(\n    start: number, stop: number, num: number): TypedArray {\n  const step = (stop - start) / (num - 1);\n\n  const values = util.makeZerosTypedArray(num, 'float32');\n  values[0] = start;\n  for (let i = 1; i < values.length; i++) {\n    values[i] = values[i - 1] + step;\n  }\n\n  return values;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Log} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const logImpl = createSimpleUnaryImpl((xi) => Math.log(xi));\nexport const log = unaryKernelFuncFromImpl(Log, logImpl);\n\nexport const logConfig: KernelConfig = {\n  kernelName: Log,\n  backendName: 'cpu',\n  kernelFunc: log,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NumericDataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function maxImpl(\n    aVals: TypedArray, reduceSize: number, outShape: number[],\n    dtype: DataType): TypedArray {\n  const vals = util.getTypedArrayFromDType(\n      dtype as NumericDataType, util.sizeFromShape(outShape));\n\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let max = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (Number.isNaN(value) ||\n          value > max) {  // comparison with NaN always return false\n        max = value;\n      }\n    }\n    vals[i] = max;\n  }\n  return vals;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Maximum} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const maximumImpl = createSimpleBinaryKernelImpl(\n    ((aValue, bValue) => Math.max(aValue as number, bValue as number)));\nexport const maximum = binaryKernelFunc(Maximum, maximumImpl);\n\nexport const maximumConfig: KernelConfig = {\n  kernelName: Maximum,\n  backendName: 'cpu',\n  kernelFunc: maximum\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Minimum} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const minimumImpl = createSimpleBinaryKernelImpl(\n    ((aValue, bValue) => Math.min(aValue as number, bValue as number)));\nexport const minimum = binaryKernelFunc(Minimum, minimumImpl);\n\nexport const minimumConfig: KernelConfig = {\n  kernelName: Minimum,\n  backendName: 'cpu',\n  kernelFunc: minimum\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Multiply} from '@tensorflow/tfjs-core';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const multiplyImpl = createSimpleBinaryKernelImpl(\n    ((aValue: number, bValue: number) => aValue * bValue));\nexport const multiplyComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {\n        real: aReal * bReal - aImag * bImag,\n        imag: aReal * bImag + aImag * bReal\n      };\n    }));\n\nexport const multiply =\n    binaryKernelFunc(Multiply, multiplyImpl, multiplyComplexImpl);\n\nexport const multiplyConfig: KernelConfig = {\n  kernelName: Multiply,\n  backendName: 'cpu',\n  kernelFunc: multiply\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, KernelConfig, KernelFunc, Neg, TensorInfo, TypedArray, UnaryInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {multiplyImpl} from './Multiply';\n\nexport function negImpl(xVals: TypedArray, xShape: number[], xDtype: DataType):\n    [TypedArray, number[]] {\n  const minusOne =\n      util.createScalarValue(-1 as {} as 'float32', xDtype) as TypedArray;\n  return multiplyImpl([], xShape, minusOne, xVals, xDtype);\n}\n\nexport function neg(args: {inputs: UnaryInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  assertNotComplex(x, 'neg');\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const [res, newShape] = negImpl(xVals, x.shape, x.dtype);\n\n  return backend.makeTensorInfo(newShape, x.dtype, res);\n}\n\nexport const negConfig: KernelConfig = {\n  kernelName: Neg,\n  backendName: 'cpu',\n  kernelFunc: neg as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NotEqual} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const notEqualImpl =\n    createSimpleBinaryKernelImpl(((a, b) => (a !== b) ? 1 : 0));\nexport const notEqual =\n    binaryKernelFunc(NotEqual, notEqualImpl, null /* complexOp */, 'bool');\n\nexport const notEqualConfig: KernelConfig = {\n  kernelName: NotEqual,\n  backendName: 'cpu',\n  kernelFunc: notEqual\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, KernelConfig, KernelFunc, Prod, ProdAttrs, ProdInputs, TensorInfo, TypedArray, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function prodImpl(\n    xShape: number[], xDtype: DataType, xVals: TypedArray,\n    reductionAxes: number[]):\n    {outVals: TypedArray, outShape: number[], outDtype: DataType} {\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(xShape, reductionAxes);\n  const outDtype = upcastType(xDtype, 'int32');\n  const outVals = util.makeZerosTypedArray(\n                      util.sizeFromShape(outShape), outDtype) as TypedArray;\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  for (let i = 0; i < outVals.length; ++i) {\n    const offset = i * reduceSize;\n    let prod = 1;\n    for (let j = 0; j < reduceSize; ++j) {\n      prod *= xVals[offset + j];\n    }\n    outVals[i] = prod;\n  }\n\n  return {outVals, outShape, outDtype};\n}\n\nexport function prod(\n    args: {inputs: ProdInputs, backend: MathBackendCPU, attrs: ProdAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'prod');\n\n  const xRank = x.shape.length;\n  const axes = util.parseAxisParam(axis, x.shape);\n\n  const permutation = backend_util.getAxesPermutation(axes, xRank);\n  let reductionAxes = axes;\n  let permutedX = x;\n  const intermediateTensorInfos = [];\n  if (permutation != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n    intermediateTensorInfos.push(permutedX);\n    reductionAxes = backend_util.getInnerMostAxes(reductionAxes.length, xRank);\n  }\n\n  const xVals = backend.data.get(permutedX.dataId).values as TypedArray;\n  const {outVals, outShape, outDtype} =\n      prodImpl(permutedX.shape, permutedX.dtype, xVals, reductionAxes);\n\n  let resultShape = outShape;\n  if (keepDims) {\n    resultShape = backend_util.expandShapeToKeepDim(outShape, axes);\n  }\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return backend.makeTensorInfo(resultShape, outDtype, outVals);\n}\n\nexport const prodConfig: KernelConfig = {\n  kernelName: Prod,\n  backendName: 'cpu',\n  kernelFunc: prod as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Transpose, TransposeAttrs, TransposeInputs, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {transposeImpl} from './Transpose_impl';\n\nexport function transpose(args: {\n  inputs: TransposeInputs,\n  attrs: TransposeAttrs,\n  backend: MathBackendCPU\n}): TensorInfo {\n  const {inputs, attrs, backend} = args;\n  const {x} = inputs;\n  const {perm} = attrs;\n\n  assertNotComplex(x, 'transpose');\n\n  const xRank = x.shape.length;\n\n  const newShape: number[] = new Array(xRank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = x.shape[perm[i]];\n  }\n\n  const values = backend.data.get(x.dataId).values as TypedArray;\n  const result = transposeImpl(values, x.shape, x.dtype, perm, newShape);\n\n  const dataId = backend.write(result, newShape, x.dtype);\n  return {dataId, shape: newShape, dtype: x.dtype};\n}\n\nexport const transposeConfig: KernelConfig = {\n  kernelName: Transpose,\n  backendName: 'cpu',\n  kernelFunc: transpose as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {util} from '@tensorflow/tfjs-core';\n\nexport function transposeImpl(\n    xVals: TypedArray, xShape: number[], dtype: DataType, perm: number[],\n    newShape: number[]): TypedArray {\n  const xRank = xShape.length;\n  const xSize = util.sizeFromShape(xShape);\n  const xStrides = util.computeStrides(xShape);\n  const newStrides = util.computeStrides(newShape);\n\n  const result = util.getTypedArrayFromDType(\n      dtype as NumericDataType, util.sizeFromShape(newShape));\n\n  for (let i = 0; i < xSize; ++i) {\n    const loc = util.indexToLoc(i, xRank, xStrides);\n\n    // Permute location.\n    const newLoc: number[] = new Array(loc.length);\n    for (let i = 0; i < newLoc.length; i++) {\n      newLoc[i] = loc[perm[i]];\n    }\n\n    const newIndex = util.locToIndex(newLoc, xRank, newStrides);\n    result[newIndex] = xVals[i];\n  }\n  return result;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataTypeMap, util} from '@tensorflow/tfjs-core';\n\nexport function rangeImpl(\n    start: number, stop: number, step: number,\n    dtype: 'float32'|'int32'): DataTypeMap['float32' | 'int32'] {\n  const sameStartStop = start === stop;\n  const increasingRangeNegativeStep = start < stop && step < 0;\n  const decreasingRangePositiveStep = stop < start && step > 1;\n\n  if (sameStartStop || increasingRangeNegativeStep ||\n      decreasingRangePositiveStep) {\n    return util.makeZerosTypedArray(0, dtype);\n  }\n\n  const numElements = Math.abs(Math.ceil((stop - start) / step));\n  const values = util.makeZerosTypedArray(numElements, dtype);\n\n  if (stop < start && step === 1) {\n    // Auto adjust the step's sign if it hasn't been set\n    // (or was set to 1)\n    step = -1;\n  }\n\n  values[0] = start;\n  for (let i = 1; i < values.length; i++) {\n    values[i] = values[i - 1] + step;\n  }\n  return values;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Rsqrt} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const rsqrtImpl = createSimpleUnaryImpl((xi) => 1 / Math.sqrt(xi));\nexport const rsqrt = unaryKernelFuncFromImpl(Rsqrt, rsqrtImpl);\n\nexport const rsqrtConfig: KernelConfig = {\n  kernelName: Rsqrt,\n  backendName: 'cpu',\n  kernelFunc: rsqrt,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sigmoid} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sigmoidImpl =\n    createSimpleUnaryImpl((xi) => 1 / (1 + Math.exp(-xi)));\nexport const sigmoid =\n    unaryKernelFunc(Sigmoid, (xi) => 1 / (1 + Math.exp(-xi)));\n\nexport const sigmoidConfig: KernelConfig = {\n  kernelName: Sigmoid,\n  backendName: 'cpu',\n  kernelFunc: sigmoid,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BackendValues, buffer, DataType, KernelConfig, KernelFunc, Slice, slice_util, SliceAttrs, SliceInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function sliceImpl(\n    vals: BackendValues, begin: number[], size: number[], shape: number[],\n    dtype: DataType): BackendValues {\n  const isContinous = slice_util.isSliceContinous(shape, begin, size);\n  const length = util.sizeFromShape(size);\n  const xStrides = util.computeStrides(shape);\n\n  if (isContinous) {\n    const flatOffset = slice_util.computeFlatOffset(begin, xStrides);\n\n    if (dtype === 'string') {\n      return (vals as Uint8Array[]).slice(flatOffset, flatOffset + length);\n    }\n\n    return (vals as TypedArray).subarray(flatOffset, flatOffset + length);\n  }\n\n  const decodedData = dtype === 'string' ?\n      backend_util.fromUint8ToStringArray(vals as Uint8Array[]) :\n      vals as TypedArray;\n\n  const inBuf = buffer(shape, dtype, decodedData);\n  const outBuf = buffer(size, dtype);\n  for (let i = 0; i < outBuf.size; ++i) {\n    const outLoc = outBuf.indexToLoc(i);\n    const inLoc = outLoc.map((idx: number, j) => idx + begin[j]);\n    outBuf.set(inBuf.get(...inLoc), ...outLoc);\n  }\n\n  if (dtype === 'string') {\n    return backend_util.fromStringArrayToUint8(outBuf.values as string[]);\n  }\n  return outBuf.values as TypedArray;\n}\n\nexport function slice(\n    args: {inputs: SliceInputs, backend: MathBackendCPU, attrs: SliceAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {begin, size} = attrs;\n\n  assertNotComplex(x, 'slice');\n\n  const [$begin, $size] = slice_util.parseSliceParams(x, begin, size);\n  slice_util.assertParamsValid(x, $begin, $size);\n\n  const vals = backend.data.get(x.dataId).values;\n  const outVals = sliceImpl(vals, $begin, $size, x.shape, x.dtype);\n  return backend.makeTensorInfo($size, x.dtype, outVals);\n}\n\nexport const sliceConfig: KernelConfig = {\n  kernelName: Slice,\n  backendName: 'cpu',\n  kernelFunc: slice as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function sparseFillEmptyRowsImpl(\n    indices: TypedArray, indicesShape: number[], indicesDType: DataType,\n    values: TypedArray, valuesDType: DataType, denseShape: TypedArray,\n    defaultValue: number):\n    [TypedArray, number[], TypedArray, boolean[], number[]] {\n  const indicesCount = indicesShape[0];\n  const denseRows = denseShape[0];\n\n  const emptyRowIndicator: boolean[] = new Array(denseRows);\n  const reverseIndexMap: number[] = new Array(indicesCount);\n\n  const rank = indicesShape[1];\n\n  if (denseRows === 0) {\n    if (indicesCount !== 0) {\n      throw new Error(`Received SparseTensor with denseShape[0] = 0 but\n         indices.shape[0] = ${indicesCount}`);\n    }\n    const outputIndices = util.getArrayFromDType(indicesDType, 0) as TypedArray;\n    const outputValues = util.getArrayFromDType(valuesDType, 0) as TypedArray;\n    return [\n      outputIndices, [0, rank], outputValues, emptyRowIndicator, reverseIndexMap\n    ];\n  }\n\n  let rowsAreOrdered = true;\n  let lastIndicesRow = 0;\n  const csrOffset: number[] = new Array(denseRows).fill(0);\n\n  for (let i = 0; i < indicesCount; ++i) {\n    // indices is a 2d tensor with shape of [N, rank]\n    const row = indices[i * rank];\n    if (row < 0) {\n      throw new Error(`indices(${i}, 0) is invalid: ${row} < 0`);\n    }\n    if (row >= denseRows) {\n      throw new Error(`indices(${i}, 0) is invalid: ${row} >= ${denseRows}`);\n    }\n    ++csrOffset[row];\n    rowsAreOrdered = rowsAreOrdered && (row >= lastIndicesRow);\n    lastIndicesRow = row;\n  }\n\n  let allRowsFull = true;\n  for (let row = 0; row < denseRows; ++row) {\n    // csrOffset here describes the number of elements in this dense row\n    const rowEmpty = (csrOffset[row] === 0);\n    emptyRowIndicator[row] = rowEmpty;\n    allRowsFull = allRowsFull && !rowEmpty;\n    // In filled version, each row has at least one element.\n    csrOffset[row] = Math.max(csrOffset[row], 1);\n    // Update csrOffset to represent the number of elements up to and\n    // including denseRows + 1:\n    //  csrOffset[0] == #{elements of row 0}\n    //  csrOffset[1] == #{elements of row 1} + #{elements of row 0}\n    //  ..\n    //  csrOffset[i] == starting index for elements in row i + 1.\n    if (row > 0) {\n      csrOffset[row] += csrOffset[row - 1];\n    }\n  }\n\n  if (allRowsFull && rowsAreOrdered) {\n    const outputIndices: TypedArray = indices;\n    const outputValues: TypedArray = values;\n    for (let i = 0; i < indicesCount; ++i) {\n      reverseIndexMap[i] = i;\n    }\n    return [\n      outputIndices, [indicesCount, rank], outputValues, emptyRowIndicator,\n      reverseIndexMap\n    ];\n  } else {\n    const fullIndicesCount = csrOffset[denseRows - 1];\n    const outputIndices =\n        util.getArrayFromDType(indicesDType, fullIndicesCount * rank) as\n        TypedArray;\n    const outputValues =\n        util.getArrayFromDType(valuesDType, fullIndicesCount) as TypedArray;\n    const filledCount: number[] = new Array(denseRows).fill(0);\n\n    // Fill in values for rows that are not missing\n    for (let i = 0; i < indicesCount; ++i) {\n      // indices is a 2d tensor with shape of [N, rank]\n      const row = indices[i * rank];\n      const offset = filledCount[row];\n      const outputI = ((row === 0) ? 0 : csrOffset[row - 1]) + offset;\n      filledCount[row]++;  // Increment the filled count for this row.\n      for (let j = 0; j < rank; ++j) {\n        // indices and outputIndices are 2d tensors with shape of [N, rank]\n        outputIndices[outputI * rank + j] = indices[i * rank + j];\n      }\n      outputValues[outputI] = values[i];\n      // We'll need this reverse index map to backprop correctly.\n      reverseIndexMap[i] = outputI;\n    }\n\n    // Fill in values for rows that are missing\n    for (let row = 0; row < denseRows; ++row) {\n      const rowCount = filledCount[row];\n      if (rowCount === 0) {  // We haven't filled this row\n        const startingIndex = (row === 0) ? 0 : csrOffset[row - 1];\n        // Remaining index values were set to zero already.\n        // Just need to set the row index in the right location.\n        // outputIndices is a 2d tensor with shape of [N, rank]\n        outputIndices[startingIndex * rank + 0] = row;\n        for (let col = 1; col < rank; ++col) {\n          outputIndices[startingIndex * rank + col] = 0;\n        }\n        outputValues[startingIndex] = defaultValue;\n      }\n    }\n    return [\n      outputIndices, [fullIndicesCount, rank], outputValues, emptyRowIndicator,\n      reverseIndexMap\n    ];\n  }\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function sparseReshapeImpl(\n    inputIndices: TypedArray, inputIndicesShape: number[], inputDType: DataType,\n    inputShape: number[],\n    targetShape: number[]): [TypedArray, number[], number[]] {\n  const denseSize = util.sizeFromShape(inputShape);\n  const nnz = inputIndicesShape[0];\n  const outputRank = targetShape.length;\n\n  // Compute the output shape. Determine product of specified dimensions, and\n  // find the index of the unspecified one.\n  const outputShape: number[] = [];\n  let product = 1;\n  let unknownIndex = -1;\n  for (let d = 0; d < outputRank; ++d) {\n    const size = targetShape[d];\n    if (size === -1) {\n      if (unknownIndex !== -1) {\n        throw new Error(`only one output dimension may be -1, not both ${\n            unknownIndex} and ${d}`);\n      }\n      unknownIndex = d;\n      outputShape.push(1);\n    } else {\n      if (size < 0) {\n        throw new Error(`size ${d} must be non-negative, not ${size}`);\n      }\n      product *= size;\n      outputShape.push(size);\n    }\n  }\n  if (unknownIndex !== -1) {\n    if (product <= 0) {\n      throw new Error(\n          'reshape cannot infer the missing ' +\n          'input size for an empty tensor unless all ' +\n          'specified input sizes are non-zero');\n    }\n    const missing = Math.trunc(denseSize / product);\n    if (product * missing !== denseSize) {\n      throw new Error(`Input to reshape is a SparseTensor with ${denseSize}\n          dense values, but the requested shape requires a multiple of ${\n          product}. inputShape=${inputShape} outputShape= ${outputShape}`);\n    }\n\n    outputShape[unknownIndex] = missing;\n  }\n  const outputSize = util.sizeFromShape(outputShape);\n  if (outputSize !== denseSize) {\n    throw new Error(`Input to reshape is a tensor with ${\n        denseSize} dense values, but the requested shape has ${\n        outputSize}. inputShape=${inputShape} outputShape=${outputShape}`);\n  }\n\n  const inputRank = inputShape.length;\n  const inputStrides: number[] = [];\n  if (inputRank > 0) {\n    inputStrides[inputRank - 1] = 1;\n    for (let d = inputRank - 2; d >= 0; --d) {\n      inputStrides[d] = inputStrides[d + 1] * inputShape[d + 1];\n    }\n  }\n\n  const outputStrides: number[] = [];\n  if (outputRank > 0) {\n    outputStrides[outputRank - 1] = 1;\n    for (let d = outputRank - 2; d >= 0; --d) {\n      outputStrides[d] = outputStrides[d + 1] * outputShape[d + 1];\n    }\n  }\n\n  const newIndices =\n      util.getArrayFromDType(inputDType, nnz * outputRank) as TypedArray;\n  for (let i = 0; i < nnz; ++i) {\n    let id = 0;\n    for (let j = 0; j < inputRank; ++j) {\n      // inputIndices is a 2d tensor with shape of [nnz, inputRank]\n      id += inputIndices[i * inputRank + j] * inputStrides[j];\n    }\n    for (let j = 0; j < outputRank; ++j) {\n      // newIndices is a 2d tensor with shape of [nnz, outputRank]\n      newIndices[i * outputRank + j] = Math.trunc(id / outputStrides[j]);\n      id %= outputStrides[j];\n    }\n  }\n  return [newIndices, [nnz, outputRank], outputShape];\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function sparseSegmentReductionImpl(\n    input: TypedArray, inputShape: number[], inputDType: DataType,\n    indices: TypedArray, segmentIds: TypedArray, isMean = false,\n    defaultValue = 0): [TypedArray, number[]] {\n  const numIndices = indices.length;\n  if (numIndices !== segmentIds.length) {\n    throw new Error(`segmentIds and indices should have same size.`);\n  }\n\n  // Flatten the array to two dimensions\n  const inputFlat: number[] = [inputShape[0], input.length / inputShape[0]];\n  const numCol = inputFlat[1];\n  // Note that the current implementation assumes that segmentIds values are\n  // sorted.\n  const lastSegmentIdPlusOne =\n      numIndices > 0 ? segmentIds[numIndices - 1] + 1 : 0;\n  const outputRows = lastSegmentIdPlusOne;\n\n  if (outputRows < 0) {\n    throw new Error(`segment ids must be >= 0`);\n  }\n\n  const outputShape = inputShape.slice();\n  outputShape[0] = outputRows;\n\n  const outputLength =\n      outputShape.reduce((product, value) => product * value, 1);\n  // Output array is initialized with the value 0 by default.\n  const output = util.getArrayFromDType(inputDType, outputLength) as TypedArray;\n\n  // Note that we do not initialize the output buffer with a default value, so\n  // we need to explicitly set missing indices to the default value.\n  if (numIndices === 0) {\n    if (outputRows > 0) {\n      output.fill(defaultValue);\n    }\n    return [output, outputShape];\n  }\n\n  if (outputRows <= 0) {\n    throw new Error(`segment ids must be >= 0`);\n  }\n\n  let start = 0, end = 1;\n  // Index from which the output is not initialized.\n  let uninitializedIndex = 0;\n  let outIndex = segmentIds[start];\n\n  while (true) {\n    // We initialize nextIndex to 0 to avoid may be uninitialized warning\n    let nextIndex = 0;\n    if (end < numIndices) {\n      nextIndex = segmentIds[end];\n      if (outIndex === nextIndex) {\n        ++end;\n        continue;\n      }\n      // We have a new segment here.  Verify that the segment ids are growing.\n      if (outIndex >= nextIndex) {\n        throw new Error(`segment ids are not increasing`);\n      }\n    }\n\n    if (outIndex < 0 || outIndex >= outputRows) {\n      throw new Error(`Segment id ${outIndex} out of range [0, ${\n          outputRows}), possibly because segmentIds input is not sorted.`);\n    }\n\n    // If there is a gap between two indices, we need to set that gap to the\n    // default value.\n    if (outIndex > uninitializedIndex) {\n      output.fill(defaultValue, uninitializedIndex * numCol, outIndex * numCol);\n    }\n\n    for (let i = start; i < end; ++i) {\n      const index = indices[i];\n      if (index < 0 || index >= inputFlat[0]) {\n        throw new Error(`Bad: indices[${i}] == ${indices[i]} out of range [0, ${\n            inputFlat[0]})`);\n      }\n      for (let j = 0; j < numCol; j++) {\n        output[outIndex * numCol + j] += input[index * numCol + j];\n      }\n    }\n\n    if (isMean) {\n      for (let j = 0; j < numCol; j++) {\n        output[outIndex * numCol + j] /= end - start;\n      }\n    }\n\n    start = end;\n    ++end;\n    uninitializedIndex = outIndex + 1;\n    outIndex = nextIndex;\n    if (end > numIndices) {\n      break;\n    }\n  }\n\n  // Fill the gap at the end with the default value.\n  if (uninitializedIndex < outputRows) {\n    output.fill(defaultValue, uninitializedIndex * numCol, outputRows * numCol);\n  }\n\n  return [output, outputShape];\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sqrt} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sqrtImpl = createSimpleUnaryImpl((xi) => Math.sqrt(xi));\nexport const sqrt = unaryKernelFunc(Sqrt, (xi) => Math.sqrt(xi));\n\nexport const sqrtConfig: KernelConfig = {\n  kernelName: Sqrt,\n  backendName: 'cpu',\n  kernelFunc: sqrt,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SquaredDifference} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const squaredDifferenceImpl =\n    createSimpleBinaryKernelImpl(((a: number, b: number) => {\n      const diff = a - b;\n      return diff * diff;\n    }));\nexport const squaredDifference =\n    binaryKernelFunc(SquaredDifference, squaredDifferenceImpl);\n\nexport const squaredDifferenceConfig: KernelConfig = {\n  kernelName: SquaredDifference,\n  backendName: 'cpu',\n  kernelFunc: squaredDifference\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\nexport function stridedSliceImpl<R extends Rank>(\n    outShape: number[], xBuf: TensorBuffer<R>, strides: number[],\n    begin: number[]): TensorBuffer<R> {\n  const outBuf = buffer(outShape, xBuf.dtype);\n\n  for (let i = 0; i < outBuf.size; i++) {\n    const loc = outBuf.indexToLoc(i);\n\n    const newLoc: number[] = new Array(loc.length);\n    for (let j = 0; j < newLoc.length; j++) {\n      newLoc[j] = loc[j] * strides[j] + begin[j];\n    }\n    outBuf.set(xBuf.get(...newLoc), ...loc);\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\n/**\n * The StringNGramsOp class creates ngrams from ragged string data.\n * The constructor contains all attributes related to the operation such as\n * padding widths and strings, and the compute function can be used to\n * compute the ngrams for different ragged tensor inputs.\n */\nclass StringNGramsOp {\n  private separator: Uint8Array;\n  private nGramWidths: number[];\n  private padWidth: number;\n  private leftPad: Uint8Array;\n  private rightPad: Uint8Array;\n  private preserveShort: boolean;\n\n  constructor(\n      separator: string, nGramWidths: number[], leftPad: string,\n      rightPad: string, padWidth: number, preserveShortSequences: boolean) {\n    this.separator = util.encodeString(separator);\n    this.nGramWidths = nGramWidths;\n    this.leftPad = util.encodeString(leftPad);\n    this.rightPad = util.encodeString(rightPad);\n    this.padWidth = padWidth;\n    this.preserveShort = preserveShortSequences;\n  }\n\n  private getPadWidth(nGramWidth: number) {\n    // Ngrams can be padded with either a fixed pad width or a dynamic pad\n    // width depending on the 'padWidth' arg, but in no case should the padding\n    // ever be wider than 'nGramWidth' - 1.\n    return Math.min(\n        this.padWidth < 0 ? nGramWidth - 1 : this.padWidth, nGramWidth - 1);\n  }\n\n  private getNumNGrams(length: number, nGramWidth: number) {\n    const padWidth = this.getPadWidth(nGramWidth);\n    return Math.max(0, ((length + 2 * padWidth) - nGramWidth) + 1);\n  }\n\n  private createNGrams(\n      data: Uint8Array[], splitIndex: number, output: Uint8Array[],\n      outputStartIndex: number, numNGrams: number, nGramWidth: number) {\n    for (let nGramIndex = 0; nGramIndex < numNGrams; ++nGramIndex) {\n      const padWidth = this.getPadWidth(nGramWidth);\n      const leftPadding = Math.max(0, padWidth - nGramIndex);\n      const rightPadding =\n          Math.max(0, padWidth - (numNGrams - (nGramIndex + 1)));\n      const numTokens = nGramWidth - (leftPadding + rightPadding);\n      const dataStartIndex =\n          splitIndex + (leftPadding > 0 ? 0 : nGramIndex - padWidth);\n\n      // Calculate the total expected size of the nGram so we can reserve the\n      // correct amount of space in the string.\n      let nGramSize = 0;\n      // Size of the left padding.\n      nGramSize += leftPadding * this.leftPad.length;\n      // Size of the tokens.\n      for (let n = 0; n < numTokens; ++n) {\n        nGramSize += data[dataStartIndex + n].length;\n      }\n      // Size of the right padding.\n      nGramSize += rightPadding * this.rightPad.length;\n      // Size of the separators.\n      const numSeparators = leftPadding + rightPadding + numTokens - 1;\n      nGramSize += numSeparators * this.separator.length;\n\n      // Build the nGram.\n      output[outputStartIndex + nGramIndex] = new Uint8Array(nGramSize);\n      const nGram = output[outputStartIndex + nGramIndex];\n\n      let nextNGramIndex = 0;\n      const appendToNGram = (str: Uint8Array) =>\n          str.forEach((value) => nGram[nextNGramIndex++] = value);\n\n      for (let n = 0; n < leftPadding; ++n) {\n        appendToNGram(this.leftPad);\n        appendToNGram(this.separator);\n      }\n      // Only output first numTokens - 1 pairs of data and separator\n      for (let n = 0; n < numTokens - 1; ++n) {\n        appendToNGram(data[dataStartIndex + n]);\n        appendToNGram(this.separator);\n      }\n      // Handle case when there are no tokens or no right padding as these\n      // can result in consecutive separators.\n      if (numTokens > 0) {\n        // If we have tokens, then output last and then pair each separator\n        // with the right padding that follows, to ensure nGram ends either with\n        // the token or with the right pad.\n        appendToNGram(data[dataStartIndex + numTokens - 1]);\n        for (let n = 0; n < rightPadding; ++n) {\n          appendToNGram(this.separator);\n          appendToNGram(this.rightPad);\n        }\n      } else {\n        // If we don't have tokens, then the last item inserted into the nGram\n        // has been the separator from the left padding loop above. Hence,\n        // output right pad and separator and make sure to finish with a\n        // padding, not a separator.\n        for (let n = 0; n < rightPadding - 1; ++n) {\n          appendToNGram(this.rightPad);\n          appendToNGram(this.separator);\n        }\n        appendToNGram(this.rightPad);\n      }\n    }\n  }\n\n  // Data and splits together form the definition of the ragged tensor,\n  // where data is 1 dimensional and contains the values of the tensor\n  // and splits denotes the indices at which each row starts.\n  public compute(data: Uint8Array[], splits: Int32Array):\n      [Uint8Array[], Int32Array] {\n    // Validate that the splits are valid indices into data, only if there are\n    // splits specified.\n    const inputDataSize = data.length;\n    const splitsSize = splits.length;\n    if (splitsSize > 0) {\n      let prevSplit = splits[0];\n      if (prevSplit !== 0) {\n        throw new Error(`First split value must be 0, got ${prevSplit}`);\n      }\n      for (let i = 1; i < splitsSize; ++i) {\n        let validSplits = splits[i] >= prevSplit;\n        validSplits = validSplits && (splits[i] <= inputDataSize);\n        if (!validSplits) {\n          throw new Error(`Invalid split value ${splits[i]}, must be in [${\n              prevSplit}, ${inputDataSize}]`);\n        }\n        prevSplit = splits[i];\n      }\n      if (prevSplit !== inputDataSize) {\n        throw new Error(`Last split value must be data size. Expected ${\n            inputDataSize}, got ${prevSplit}`);\n      }\n    }\n\n    const numBatchItems = splitsSize - 1;\n    const nGramsSplits = util.getArrayFromDType('int32', splitsSize);\n    // If there is no data or size, return an empty ragged tensor.\n    if (inputDataSize === 0 || splitsSize === 0) {\n      const empty: Uint8Array[] = new Array(inputDataSize);\n      for (let i = 0; i <= numBatchItems; ++i) {\n        nGramsSplits[i] = 0;\n      }\n      return [empty, nGramsSplits];\n    }\n\n    nGramsSplits[0] = 0;\n    for (let i = 1; i <= numBatchItems; ++i) {\n      const length = splits[i] - splits[i - 1];\n      let numNGrams = 0;\n      this.nGramWidths.forEach((nGramWidth) => {\n        numNGrams += this.getNumNGrams(length, nGramWidth);\n      });\n      if (this.preserveShort && length > 0 && numNGrams === 0) {\n        numNGrams = 1;\n      }\n      nGramsSplits[i] = nGramsSplits[i - 1] + numNGrams;\n    }\n\n    const nGrams: Uint8Array[] = new Array(nGramsSplits[numBatchItems]);\n\n    for (let i = 0; i < numBatchItems; ++i) {\n      const splitIndex = splits[i];\n      let outputStartIdx = nGramsSplits[i];\n      this.nGramWidths.forEach((nGramWidth) => {\n        const length = splits[i + 1] - splits[i];\n        const numNGrams = this.getNumNGrams(length, nGramWidth);\n        this.createNGrams(\n            data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n        outputStartIdx += numNGrams;\n      });\n      // If we're preserving short sequences, check to see if no sequence was\n      // generated by comparing the current output start idx to the original\n      // one (nGramSplitsdata). If no ngrams were generated, then they will\n      // be equal (since we increment outputStartIdx by numNGrams every\n      // time we create a set of ngrams.)\n      if (this.preserveShort && outputStartIdx === nGramsSplits[i]) {\n        const dataLength = splits[i + 1] - splits[i];\n        // One legitimate reason to not have any ngrams when this.preserveShort\n        // is true is if the sequence itself is empty. In that case, move on.\n        if (dataLength === 0) {\n          continue;\n        }\n        // We don't have to worry about dynamic padding sizes here: if padding\n        // was dynamic, every sequence would have had sufficient padding to\n        // generate at least one nGram.\n        const nGramWidth = dataLength + 2 * this.padWidth;\n        const numNGrams = 1;\n        this.createNGrams(\n            data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n      }\n    }\n    return [nGrams, nGramsSplits];\n  }\n}\n\nexport function stringNGramsImpl(\n    data: Uint8Array[], dataSplits: Int32Array, separator: string,\n    nGramWidths: number[], leftPad: string, rightPad: string, padWidth: number,\n    preserveShortSequences: boolean): [Uint8Array[], Int32Array] {\n  return new StringNGramsOp(\n             separator, nGramWidths, leftPad, rightPad, padWidth,\n             preserveShortSequences)\n      .compute(data, dataSplits);\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nfunction split(\n    str: Uint8Array, delimiters: Uint8Array, skipEmpty: boolean,\n    result: Uint8Array[]): void {\n  if (!str.length) {\n    return;\n  }\n  // When the delimiter is empty, the input is split into individual characters.\n  if (delimiters.length === 0) {\n    for (let i = 0; i < str.length; ++i) {\n      result.push(str.subarray(i, i + 1));\n    }\n    return;\n  }\n  // When there is one delimiter, the input is split only at that delimiter.\n  if (delimiters.length === 1) {\n    const delimiter = delimiters[0];\n    let f = str.indexOf(delimiter);\n    while (f !== -1) {\n      const token = str.subarray(0, f);\n      if (!skipEmpty || token.length !== 0) {\n        result.push(token);\n      }\n      str = str.subarray(f + 1);\n      f = str.indexOf(delimiter);\n    }\n    if (!skipEmpty || str.length !== 0) {\n      result.push(str);\n    }\n    return;\n  }\n  // When there are multiple delimiters, the input is split at every instance\n  // one of the delimiters appears.\n  let tokenStart = 0;\n  for (let i = 0; i < str.length + 1; i++) {\n    if ((i === str.length) || (delimiters.indexOf(str[i]) !== -1)) {\n      const token = str.subarray(tokenStart, i);\n      if (!skipEmpty || token.length !== 0) {\n        result.push(token);\n      }\n      tokenStart = i + 1;\n    }\n  }\n}\n\nexport function stringSplitImpl(\n    input: Uint8Array[], delimiter: Uint8Array,\n    skipEmpty: boolean): [TypedArray, Uint8Array[], [number, number]] {\n  const batchSize = input.length;\n\n  // Empty delimiter means split the input character by character.\n  const tokens: Uint8Array[] = [];\n\n  let outputSize = 0;\n  let maxNumEntries = 0;\n  const numIndices: number[] = new Array(batchSize);\n  for (let i = 0; i < batchSize; ++i) {\n    const prevTokensLength = tokens.length;\n    split(input[i], delimiter, skipEmpty, tokens);\n    const nEntries = tokens.length - prevTokensLength;\n    numIndices[i] = nEntries;\n    outputSize += nEntries;\n    maxNumEntries = Math.max(maxNumEntries, nEntries);\n  }\n\n  const indices = util.getArrayFromDType('int32', outputSize * 2) as TypedArray;\n  const values: Uint8Array[] = new Array(outputSize);\n  const shape: [number, number] = [batchSize, maxNumEntries];\n\n  let c = 0;\n  for (let i = 0; i < batchSize; ++i) {\n    for (let j = 0; j < numIndices[i]; ++j) {\n      // indices is a 2d tensor with shape of [outputSize, 2]\n      indices[c * 2] = i;\n      indices[c * 2 + 1] = j;\n      values[c] = tokens[c];\n      ++c;\n    }\n  }\n\n  return [indices, values, shape];\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function stringToHashBucketFastImpl(\n    input: Uint8Array[], numBuckets: number): TypedArray {\n  const output = util.getArrayFromDType('int32', input.length) as TypedArray;\n\n  for (let i = 0; i < input.length; ++i) {\n    output[i] =\n        util.fingerPrint64(input[i]).modulo(numBuckets).getLowBitsUnsigned();\n  }\n\n  return output;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sub} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const subImpl = createSimpleBinaryKernelImpl(\n    ((aValue: number, bValue: number) => aValue - bValue));\nexport const subComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {real: aReal - bReal, imag: aImag - bImag};\n    }));\nexport const sub = binaryKernelFunc(Sub, subImpl, subComplexImpl);\n\nexport const subConfig: KernelConfig = {\n  kernelName: Sub,\n  backendName: 'cpu',\n  kernelFunc: sub\n};\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\n/**\n * An implementation of the tile kernel shared between webgl and cpu for string\n * tensors only.\n */\n\nexport function tileImpl<R extends Rank>(\n    xBuf: TensorBuffer<R, DataType>,\n    reps: number[]): TensorBuffer<R, DataType> {\n  const newShape: number[] = new Array(xBuf.rank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = xBuf.shape[i] * reps[i];\n  }\n  const result = buffer(newShape, xBuf.dtype);\n  for (let i = 0; i < result.values.length; ++i) {\n    const newLoc = result.indexToLoc(i);\n\n    const originalLoc: number[] = new Array(xBuf.rank);\n    for (let j = 0; j < originalLoc.length; j++) {\n      originalLoc[j] = newLoc[j] % xBuf.shape[j];\n    }\n\n    const originalIndex = xBuf.locToIndex(originalLoc);\n\n    result.values[i] = xBuf.values[originalIndex];\n  }\n  return result as TensorBuffer<R, DataType>;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/** An implementation of the TopK kernel shared between webgl and cpu. */\n\nimport {buffer, NumericDataType, Rank, ShapeMap, Tensor, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\ntype Pair = {\n  value: number,\n  index: number\n};\n\nconst comparePair = (a: Pair, b: Pair) => {\n  const valueDiff = b.value - a.value;\n  return valueDiff === 0 ? a.index - b.index : valueDiff;\n};\n\n/**\n * Partitions array where all elements smaller than the (k+1) smallest element\n * are found to the left of it, and all larger to the right of it.\n * Based on the Floyd-Rivest Algorithm, ref:\n * https://en.wikipedia.org/wiki/Floyd%E2%80%93Rivest_algorithm\n * @param array: Array to partition\n * @param left: Left index for the interval\n * @param right: Right index for the interval\n * @param k: Desired index value, where array[k] is the (k+1)th smallest element\n *           when left = 0\n */\nfunction select(array: Pair[], k: number, left = 0, right = array.length - 1) {\n  while (right > left) {\n    // Use select recursively to sample a smaller set of size s\n    // the arbitrary constants 600 and 0.5 are used in the original\n    // version to minimize execution time.\n    if (right - left > 600) {\n      const n = right - left + 1;\n      const i = k - left + 1;\n      const z = Math.log(n);\n      const s = 0.5 * Math.exp(2 * z / 3);\n      const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * Math.sign(i - n / 2);\n      const newLeft = Math.max(left, Math.floor(k - i * s / n + sd));\n      const newRight = Math.min(right, Math.floor(k + (n - i) * s / n + sd));\n      select(array, k, newLeft, newRight);\n    }\n    // partition the elements between left and right around t\n    const t = array[k];\n    let i = left;\n    let j = right;\n\n    util.swap(array, left, k);\n\n    if (comparePair(array[right], t) > 0) {\n      util.swap(array, left, right);\n    }\n    while (i < j) {\n      util.swap(array, i, j);\n      i++;\n      j--;\n      while (comparePair(array[i], t) < 0) {\n        i = i + 1;\n      }\n      while (comparePair(array[j], t) > 0) {\n        j = j - 1;\n      }\n    }\n    if (comparePair(array[left], t) === 0) {\n      util.swap(array, left, j);\n    } else {\n      j = j + 1;\n      util.swap(array, j, right);\n    }\n    // Adjust left and right towards the boundaries of the subset\n    // containing the (k - left + 1)th smallest element.\n    if (j <= k) {\n      left = j + 1;\n    }\n    if (k <= j) {\n      right = j - 1;\n    }\n  }\n}\n\nexport function topKImpl<T extends Tensor, R extends Rank>(\n    x: TypedArray, xShape: number[], xDtype: NumericDataType, k: number,\n    sorted: boolean):\n    [TensorBuffer<R, NumericDataType>, TensorBuffer<R, 'int32'>] {\n  // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.\n  const lastDim = xShape[xShape.length - 1];\n  const [batch, size] = [x.length / lastDim, lastDim];\n  const allTopKVals = util.getTypedArrayFromDType(xDtype, batch * k);\n  const allTopKIndices = util.getTypedArrayFromDType('int32', batch * k);\n\n  for (let b = 0; b < batch; b++) {\n    const offset = b * size;\n    const vals = x.subarray(offset, offset + size);\n\n    let valAndInd: Pair[] = new Array(vals.length);\n    vals.forEach(\n        (value: number, index: number) => valAndInd[index] = {value, index});\n\n    if (k < valAndInd.length) {\n      select(valAndInd, k);\n      valAndInd = valAndInd.slice(0, k);\n    }\n\n    if (sorted) {\n      valAndInd.sort(comparePair);\n    }\n    \n    const outOffset = b * k;\n    const topKVals = allTopKVals.subarray(outOffset, outOffset + k);\n    const topKIndices = allTopKIndices.subarray(outOffset, outOffset + k);\n    for (let i = 0; i < k; i++) {\n      topKVals[i] = valAndInd[i].value;\n      topKIndices[i] = valAndInd[i].index;\n    }\n  }\n  // Reshape back to the original input shape, except that the last\n  // dimension is k.\n  const outputShape = xShape.slice();\n  outputShape[outputShape.length - 1] = k;\n\n  return [\n    buffer(outputShape as ShapeMap[R], xDtype, allTopKVals),\n    buffer(outputShape as ShapeMap[R], 'int32', allTopKIndices)\n  ];\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BackendValues, DataType, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function uniqueImpl(\n    values: BackendValues, axis: number, shape: number[], dtype: DataType): {\n  outputValues: BackendValues,\n  outputShape: number[],\n  indices: BackendValues\n} {\n  // Normalize and validate axis.\n  const $axis = util.parseAxisParam(axis, shape)[0];\n\n  // Calculate the new shape that is suitable for extracting data along the\n  // given axis.\n  //\n  // The rank is 3.\n  // The size of the 1st dimension is the size of all the axes < the given axis.\n  // The size of the 2nd dimension is the same as the size of the given axis.\n  // The size of the 3rd dimension is the size of all the axes > the given axis.\n  //\n  // For example, for a 4D tensor with shape=[2, 3, 5, 4] and axis=2, the\n  // newShape would be: [2*3, 5, 4].\n  //\n  // Note that this is not the final output shape. This will be the shape for an\n  // intermediate TensorBuffer (see inputBuffer below) to allow us to extract\n  // values along the given axis. To demonstrate how it works, consider the\n  // following example:\n  //\n  // Input: a 3D tensor, with shape [1, 2, 3]\n  // [\n  //   [\n  //      [1,2,3],\n  //      [4,5,6]\n  //   ]\n  // ]\n  // Axis: 2 (the last axis).\n  // Along axis 2, we expect to extract 3 tensors: [1,4], [2,5], [3,6].\n  //\n  // For this example, newShape would be: [2, 3, 1], where 2 is calculated from\n  // 1*2. The re-shaped data would look like:\n  //\n  // [\n  //   [\n  //     [1], [2], [3]\n  //   ],\n  //   [\n  //     [4], [5], [6]\n  //   ]\n  // ]\n  //\n  // Then, we can construct a 3-level nested loop by the following dimension\n  // order to extract the values along the axis (dimension1):\n  // i: dimension1       // 0,1,2 (newShape[1])\n  //   m: dimension0     // 0,1   (newShape[0])\n  //     n: dimension2   // 0     (newShape[2])\n  //\n  //                       m, i, n\n  //                      ---------\n  // Iteration 0: data at [0, 0, 0] => \"1\"\n  // Iteration 1: data at [1, 0, 0] => \"4\"\n  // We got [1,4].\n  // Iteration 2: data at [0, 1, 0] => \"2\"\n  // Iteration 3: data at [1, 1, 0] => \"5\"\n  // We got [2,5].\n  // Iteration 4: data at [0, 2, 0] => \"3\"\n  // Iteration 5: data at [1, 2, 0] => \"6\"\n  // We got [3,6].\n  const newShape = [1, shape[0], 1];\n  for (let i = 0; i < $axis; i++) {\n    newShape[0] *= shape[i];\n  }\n  newShape[1] = shape[$axis];\n  for (let i = $axis + 1; i < shape.length; i++) {\n    newShape[2] *= shape[i];\n  }\n\n  // A map from unique elements (their string representations) to their values\n  // in \"indices\" (below).\n  const uniqueElements: {[key: string]: number} = {};\n  // The indices of each unique element in the original tensor along the given\n  // axis. It is 1D and has the same size as the given axis.\n  const indices = new Int32Array(shape[$axis]);\n  // Create a buffer so we can easily extract value at a given location.\n  const inputBuffer = new TensorBuffer(newShape, dtype, values as TypedArray);\n  // The indices along the given axis that have unique elements. This is a\n  // de-duped version of \"indices\" above.\n  const uniqueIndices: number[] = [];\n  const is1DTensor = newShape[0] === 1 && newShape[2] === 1;\n  for (let i = 0; i < shape[$axis]; i++) {\n    // Extract values along the axis.\n    let element: string;\n    if (is1DTensor) {\n      // Fast path for 1D tensor input.\n      element = values[i].toString();\n    } else {\n      const axisValues = [];\n      for (let m = 0; m < newShape[0]; m++) {\n        for (let n = 0; n < newShape[2]; n++) {\n          axisValues.push(inputBuffer.get(m, i, n));\n        }\n      }\n      element = axisValues.join(',');\n    }\n\n    // Dedup and update various indices.\n    if (uniqueElements[element] !== undefined) {\n      indices[i] = uniqueElements[element];\n    } else {\n      const uniqueIndex = Object.keys(uniqueElements).length;\n      uniqueElements[element] = uniqueIndex;\n      indices[i] = uniqueIndex;\n      uniqueIndices.push(i);\n    }\n  }\n\n  // Now we know where each of the unique elements are located along the axis\n  // (uniqueIndices). Extract them from input buffer and store them in the\n  // output buffer.\n  const outputTmpShape = newShape.slice();\n  outputTmpShape[1] = Object.keys(uniqueElements).length;\n  const outputBuffer = new TensorBuffer(outputTmpShape, dtype);\n  uniqueIndices.forEach((uniqueElementIndex, i) => {\n    for (let m = 0; m < newShape[0]; m++) {\n      for (let n = 0; n < newShape[2]; n++) {\n        outputBuffer.set(inputBuffer.get(m, uniqueElementIndex, n), m, i, n);\n      }\n    }\n  });\n\n  // The output shape can be calculated from the input shape with the size of\n  // the given axis replaced by the number of unique elements along that axis.\n  const outputShape = shape.slice();\n  outputShape[$axis] = outputTmpShape[1];\n\n  return {\n    outputValues: outputBuffer.values as BackendValues,\n    outputShape,\n    indices,\n  };\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACiBA;;;ACAA;AAjBA,AAmBM,0BACF,QAAiC,QAAc;AACjD,MAAI,CAAC,MAAM,QAAQ,SAAS;AAC1B,aAAS,CAAC;;AAEZ,SAAO,QAAQ,OAAI;AACjB,QAAI,KAAK,MAAM;AACb,mBAAK,OACD,EAAE,UAAU,aACZ,MAAM,GACF;;;;;;AD7Bd,AAsBM,uBAAwB,MAAgB;AAC5C,QAAM,eAAe,IAAI,aAAa,KAAK;AAC3C,WAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,EAAE,GAAG;AACpC,iBAAa,KAAK,KAAK,IAAI,KAAK;;AAElC,SAAO;;AAGF,IAAM,MAAM,CAAC,SAAsD;AACxE,QAAM,EAAC,MAAK,KAAK;AACjB,QAAM,aAAa,KAAK;AAExB,mBAAiB,GAAG;AAEpB,MAAI,eAAe,IAAI,aAAa,aAAK,cAAc,EAAE;AACzD,QAAM,SAAS,WAAW,KAAK,IAAI,EAAE,QAAQ;AAC7C,iBAAe,cAAc;AAE7B,SAAO,WAAW,WAAW,cAAc,EAAE,OAAO;;AAG/C,IAAM,YAA0B;EACrC,YAAY;EACZ,aAAa;EACb,YAAY;;;;AE7Bd;;;ACAA;AAjBA,AAwBM,sCAAuC,IAAyB;AAEpE,SAAO,CAAC,QAAkB,QAAkB,OACpC,OAAmB,UAA2C;AACpE,UAAM,WAAW,qBAAa,2BAA2B,QAAQ;AAEjE,UAAM,aAAa,SAAS;AAC5B,UAAM,gBAAgB,aAAK,eAAe;AAC1C,UAAM,aAAa,aAAK,cAAc;AAEtC,UAAM,SACF,aAAK,uBAAuB,OAA0B;AAE1D,UAAM,QAAQ,OAAO;AACrB,UAAM,QAAQ,OAAO;AAErB,UAAM,WAAW,aAAK,eAAe;AACrC,UAAM,WAAW,aAAK,eAAe;AAErC,UAAM,iBAAiB,qBAAa,iBAAiB,QAAQ;AAC7D,UAAM,iBAAiB,qBAAa,iBAAiB,QAAQ;AAE7D,QAAI,eAAe,SAAS,eAAe,WAAW,GAAG;AACvD,eAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,EAAE,GAAG;AACtC,eAAO,KAAK,GAAG,MAAM,IAAI,MAAM,SAAS,MAAM,IAAI,MAAM;;WAErD;AACL,eAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,EAAE,GAAG;AACtC,cAAM,MAAM,aAAK,WAAW,GAAG,YAAY;AAE3C,cAAM,OAAO,IAAI,MAAM,CAAC;AACxB,uBAAe,QAAQ,OAAK,KAAK,KAAK;AACtC,cAAM,SAAS,aAAK,WAAW,MAAM,OAAO;AAE5C,cAAM,OAAO,IAAI,MAAM,CAAC;AACxB,uBAAe,QAAQ,OAAK,KAAK,KAAK;AACtC,cAAM,SAAS,aAAK,WAAW,MAAM,OAAO;AAE5C,eAAO,KAAK,GAAG,MAAM,SAAS,MAAM;;;AAIxC,WAAO,CAAC,QAAQ;;;;;ACjDpB;;;ACDA;;;ACCA;;;ACAA;AAjBA,AAqBM,iBAAkB,MAAsD;AAE5E,QAAM,EAAC,QAAQ,YAAW;AAC1B,QAAM,EAAC,aAAM,SAAQ;AAErB,QAAM,WAAW,QAAQ,KAAK,IAAI,MAAK,QAAQ;AAC/C,QAAM,WAAW,QAAQ,KAAK,IAAI,KAAK,QAAQ;AAE/C,QAAM,cAAc,QAAQ,eAAe,MAAK,OAAO;AAEvD,QAAM,WAAU,QAAQ,KAAK,IAAI,YAAY;AAK7C,WAAQ,qBAAqB;IAC3B,MAAM,QAAQ,eAAe,MAAK,OAAO,WAAW;IACpD,MAAM,QAAQ,eAAe,KAAK,OAAO,WAAW;;AAGtD,SAAO;;AAGF,IAAM,gBAA8B;EACzC,YAAY;EACZ,aAAa;EACb,YAAY;;;;AD/Cd,AA2BM,eACF,SAAyB,OACzB,QAAkB,WAAS;AAC7B,MAAI,UAAU,aAAa;AACzB,UAAM,QAAO,MAAM,SAAS,OAAO;AACnC,UAAM,OAAO,MAAM,SAAS,OAAO;AAEnC,WAAO,QAAQ,EAAC,QAAQ,EAAC,aAAM,QAAO;;AAGxC,QAAM,SAAS,aAAK,oBAAoB,aAAK,cAAc,QAAQ;AAEnE,SAAO,QAAQ,eAAe,OAAO,OAAO;;;;AEtB9C;AAjBA,AAqBM,kBACF,MAAuD;AACzD,QAAM,EAAC,QAAQ,YAAW;AAC1B,QAAM,EAAC,MAAK;AAEZ,UAAQ,OAAO,EAAE;AAEjB,SAAO,EAAC,QAAQ,EAAE,QAAQ,OAAO,EAAE,OAAO,OAAO,EAAE;;AAG9C,IAAM,iBAA+B;EAC1C,YAAY;EACZ,aAAa;EACb,YAAY;;;;ACjBd;AAjBA,AAqBM,cAAe,MAAmD;AAEtE,QAAM,EAAC,QAAQ,YAAW;AAC1B,QAAM,EAAC,UAAS;AAEhB,QAAM,QAAO,QAAQ,KAAK,IAAI,MAAM,QAAQ,mBAAmB;AAC/D,QAAM,UAAU,QAAQ,KAAK,IAAI,MAAK,QAAQ;AAK9C,SAAO,QAAQ,eAAe,MAAK,OAAO,MAAK,OAAO;;AAGjD,IAAM,aAA2B;EACtC,YAAY;EACZ,aAAa;EACb,YAAY;;;;AJtCd,AA0BM,cACF,MAAqE;AAEvE,QAAM,EAAC,QAAQ,SAAS,UAAS;AACjC,QAAM,EAAC,MAAK;AACZ,QAAM,EAAC,UAAS;AAGhB,MAAI,UAAU,aAAa;AACzB,QAAI,EAAE,UAAU,aAAa;AAC3B,aAAO,SAAS,EAAC,QAAQ,EAAC,KAAI;;AAGhC,UAAM,kBAAkB,MAAM,SAAS,EAAE,OAAO,EAAE;AAClD,UAAM,SAAS,KAAK,EAAC,QAAQ,EAAC,KAAI,SAAS,OAAO,EAAC,OAAO;AAE1D,UAAM,SACF,QAAQ,EAAC,QAAQ,EAAC,MAAM,QAAQ,MAAM,mBAAkB;AAE5D,YAAQ,8BAA8B;AACtC,YAAQ,8BAA8B;AAEtC,WAAO;;AAIT,MAAI,EAAE,UAAU,aAAa;AAC3B,UAAM,WAAW,KAAK,EAAC,QAAQ,EAAC,OAAO,KAAI;AAC3C,UAAM,SAAS,KAAK,EAAC,QAAQ,EAAC,GAAG,YAAW,SAAS,OAAO,EAAC;AAE7D,YAAQ,8BAA8B;AAEtC,WAAO;;AAGT,MAAI,CAAC,aAAK,gBAAgB,EAAE,OAAO,QAAQ;AAGzC,UAAM,SAAS,SAAS,EAAC,QAAQ,EAAC,KAAI;AACtC,WAAO,EAAC,QAAQ,OAAO,QAAQ,OAAO,OAAO,OAAO;;AAGtD,MAAI,UAAU,SAAS;AACrB,UAAM,SAAS,QAAQ,KAAK,IAAI,EAAE,QAAQ;AAC1C,UAAM,eAAe,WAAW,KAAK;AACrC,WAAO,QAAQ,eAAe,EAAE,OAAO,SAAS;;AAGlD,MAAI,UAAU,QAAQ;AAIpB,UAAM,QAAQ,QAAQ,KAAK,IAAI,EAAE,QAAQ;AACzC,UAAM,OAAO,aAAK,aAAa,CAAC,IAAI,EAAE;AAEtC,UAAM,CAAC,YAAY,eAAe,6BAC9B,CAAC,GAAG,MAAO,MAAM,IAAK,IAAI,GAAG,EAAE,OAAO,IAAI,OAAO,MAAM;AAE3D,WAAO,QAAQ,eAAe,aAAa,QAAQ;;AAGrD,QAAM,IAAI,MAAM,iCAAiC,EAAE,YAAY;;AAG1D,IAAM,aAA2B;EACtC,YAAY;EACZ,aAAa;EACb,YAAY;;;;AD7Fd,AAqCM,0BACF,MAAc,YACd,aAAuC,OAAgB;AACzD,MAAI,eAAe,MAAM;AACvB,WAAO,CAAC,EAAC,QAAQ,cAAY;AAC3B,YAAM,EAAC,GAAG,MAAK;AACf,YAAM,aAAa;AAEnB,uBAAiB,CAAC,GAAG,IAAI;AAEzB,YAAM,QAAQ,WAAW,KAAK,IAAI,EAAE,QAAQ;AAC5C,YAAM,QAAQ,WAAW,KAAK,IAAI,EAAE,QAAQ;AAE5C,YAAM,eAAe,EAAE,UAAU,WAE7B,qBAAa,uBAAuB,SACpC;AACJ,YAAM,eAAe,EAAE,UAAU,WAE7B,qBAAa,uBAAuB,SACpC;AACJ,YAAM,SAAS,SAAS,EAAE;AAE1B,YAAM,CAAC,YAAY,eACf,WAAW,EAAE,OAAO,EAAE,OAAO,cAAc,cAAc;AAE7D,aAAO,WAAW,eAAe,aAAa,QAAQ;;;AAI1D,SAAO,CAAC,EAAC,QAAQ,cAAY;AAC3B,UAAM,EAAC,GAAG,MAAK;AACf,UAAM,aAAa;AAEnB,QAAI,EAAE,UAAU,eAAe,EAAE,UAAU,aAAa;AACtD,YAAM,YAAY,KACd,EAAC,QAAQ,EAAC,GAAG,KAAI,SAAS,YAAY,OAAO,EAAC,OAAO;AAEzD,YAAM,gBAAgB,WAAW,KAAK,IAAI,UAAU;AAEpD,YAAM,QAAQ,cAAc,mBAAmB;AAC/C,YAAM,QAAQ,cAAc,mBAAmB;AAE/C,YAAM,YACF,WAAW,KAAK,IAAI,MAAM,QAAQ;AACtC,YAAM,YACF,WAAW,KAAK,IAAI,MAAM,QAAQ;AAEtC,YAAM,YAAY,KACd,EAAC,QAAQ,EAAC,GAAG,KAAI,SAAS,YAAY,OAAO,EAAC,OAAO;AAEzD,YAAM,gBAAgB,WAAW,KAAK,IAAI,UAAU;AAEpD,YAAM,QAAQ,cAAc,mBAAmB;AAC/C,YAAM,QAAQ,cAAc,mBAAmB;AAE/C,YAAM,YACF,WAAW,KAAK,IAAI,MAAM,QAAQ;AACtC,YAAM,YACF,WAAW,KAAK,IAAI,MAAM,QAAQ;AAEtC,YAAM,CAAC,gBAAgB,gBAAgB,eAAe,YAClD,EAAE,OAAO,EAAE,OAAO,WAAW,WAAW,WAAW;AAEvD,YAAM,aACF,WAAW,eAAe,aAAa,WAAW;AAEtD,YAAM,aACF,WAAW,eAAe,aAAa,WAAW;AAEtD,YAAM,SAAS,QACX,EAAC,QAAQ,EAAC,MAAM,YAAY,MAAM,cAAa,SAAS;AAE5D,iBAAW,8BAA8B;AACzC,iBAAW,8BAA8B;AACzC,iBAAW,8BAA8B;AACzC,iBAAW,8BAA8B;AAEzC,aAAO;WACF;AACL,YAAM,QAAQ,WAAW,KAAK,IAAI,EAAE,QAAQ;AAC5C,YAAM,QAAQ,WAAW,KAAK,IAAI,EAAE,QAAQ;AAE5C,YAAM,SAAS,SAAS,EAAE;AAE1B,YAAM,CAAC,YAAY,eACf,WAAW,EAAE,OAAO,EAAE,OAAO,OAAO,OAAO;AAE/C,aAAO,WAAW,eAAe,aAAa,QAAQ;;;;AAStD,uCAAwC,IAA0B;AAEtE,SAAO,CAAC,QAAkB,QAAkB,WACpC,WAAyB,WACzB,cAA+D;AACrE,UAAM,cAAc,qBAAa,2BAA2B,QAAQ;AACpE,UAAM,aAAa,aAAK,cAAc;AACtC,UAAM,aAAa,YAAY;AAC/B,UAAM,gBAAgB,aAAK,eAAe;AAE1C,UAAM,iBAAiB,aAAK,uBAAuB,WAAW;AAC9D,UAAM,iBAAiB,aAAK,uBAAuB,WAAW;AAE9D,UAAM,iBAAiB,qBAAa,iBAAiB,QAAQ;AAC7D,UAAM,iBAAiB,qBAAa,iBAAiB,QAAQ;AAE7D,UAAM,QAAQ,qBAAa,uBAAuB,WAAW;AAC7D,UAAM,QAAQ,qBAAa,uBAAuB,WAAW;AAE7D,UAAM,QAAQ,OAAO;AACrB,UAAM,WAAW,aAAK,eAAe;AAErC,UAAM,QAAQ,OAAO;AACrB,UAAM,WAAW,aAAK,eAAe;AAErC,QAAI,eAAe,SAAS,eAAe,WAAW,GAAG;AACvD,eAAS,IAAI,GAAG,IAAI,eAAe,QAAQ,KAAK;AAC9C,cAAM,OAAO,IAAI,MAAM;AACvB,cAAM,OAAO,IAAI,MAAM;AAEvB,cAAM,SACF,GAAG,MAAM,OAAO,IAAI,MAAM,OAAO,IAAI,IAAI,MAAM,OAAO,IACnD,MAAM,OAAO,IAAI;AAExB,uBAAe,KAAK,OAAO;AAC3B,uBAAe,KAAK,OAAO;;WAExB;AACL,eAAS,IAAI,GAAG,IAAI,eAAe,QAAQ,KAAK;AAC9C,cAAM,MAAM,aAAK,WAAW,GAAG,YAAY;AAE3C,cAAM,OAAO,IAAI,MAAM,CAAC;AACxB,uBAAe,QAAQ,OAAK,KAAK,KAAK;AACtC,cAAM,SAAS,aAAK,WAAW,MAAM,OAAO;AAE5C,cAAM,OAAO,IAAI,MAAM,CAAC;AACxB,uBAAe,QAAQ,OAAK,KAAK,KAAK;AACtC,cAAM,SAAS,aAAK,WAAW,MAAM,OAAO;AAE5C,cAAM,WACF,GAAG,MAAM,SAAS,IAAI,MAAM,SAAS,IAAI,IAAI,MAAM,SAAS,IACzD,MAAM,SAAS,IAAI;AAE1B,uBAAe,KAAK,SAAS;AAC7B,uBAAe,KAAK,SAAS;;;AAGjC,WAAO,CAAC,gBAAgB,gBAAgB;;;;;AF/L5C,AAsBO,IAAM,UACT,6BAA8B,CAAC,GAAW,MAAc,IAAI;AACzD,IAAM,iBACT,8BAA+B,CAAC,OAAO,OAAO,OAAO,UAAS;AAC5D,SAAO,EAAC,MAAM,QAAQ,OAAO,MAAM,QAAQ;;AAG1C,IAAM,MAAM,iBAAiB,KAAK,SAAS;AAE3C,IAAM,YAA0B;EACrC,YAAY;EACZ,aAAa;EACb,YAAY;;;;AQjBd;AAjBA,AAmBM,sBACF,OAAmB,aAAyB,cAC5C,cAAwB,MAAY;AACtC,QAAM,cAAc,aAAK,cAAc;AACvC,QAAM,UAAU,aAAK,oBAAoB,MAAM;AAE/C,WAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,UAAM,QAAQ,MAAM;AACpB,QAAI,QAAQ,GAAG;AACb,YAAM,IAAI,MAAM;;AAGlB,QAAI,SAAS,MAAM;AACjB;;AAGF,QAAI,cAAc,GAAG;AACnB,cAAQ,UAAU,YAAY;WACzB;AACL,cAAQ,UAAU;;;AAItB,SAAO;;AAGH,4BACF,MAAuB,YAA6B,MACpD,eAAe,OAAK;AACtB,QAAM,UAAU,KAAK,MAAM;AAC3B,QAAM,UAAU,KAAK,MAAM;AAE3B,QAAM,SAAS,OAAO,CAAC,SAAS,OAAO,WAAW;AAElD,WAAS,IAAI,GAAG,IAAI,SAAS,KAAK;AAChC,aAAS,IAAI,GAAG,IAAI,SAAS,KAAK;AAChC,YAAM,QAAQ,KAAK,IAAI,GAAG;AAC1B,UAAI,QAAQ,GAAG;AACb,cAAM,IAAI,MAAM;;AAGlB,UAAI,SAAS,MAAM;AACjB;;AAGF,UAAI,cAAc;AAChB,eAAO,IAAI,GAAG,GAAG;aACZ;AACL,YAAI,WAAW,OAAO,GAAG;AACvB,iBAAO,IAAI,OAAO,IAAI,GAAG,SAAS,WAAW,IAAI,GAAG,IAAI,GAAG;eACtD;AACL,iBAAO,IAAI,OAAO,IAAI,GAAG,SAAS,GAAG,GAAG;;;;;AAMhD,SAAO;;;;AC3DT;;;ACAA;AAjBA,AAwBM,+BAAgC,IAAwB;AAE5D,SAAO,CAAC,QAAQ,OAAO,UAAS;AAC9B,UAAM,YACF,aAAK,uBAAuB,OAA0B,OAAO;AACjE,aAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,EAAE,GAAG;AACtC,gBAAU,KAAK,GAAG,OAAO,IAAI;;AAE/B,WAAO;;;;;ACfX;AAjBA,AAgCM,yBACF,MAAc,IAA0B,OAAgB;AAC1D,SAAO,CAAC,EAAC,QAAQ,OAAO,cAAY;AAClC,UAAM,EAAC,MAAK;AACZ,qBAAiB,GAAG;AACpB,QAAI,EAAE,UAAU,YAAY,UAAU,UAAU;AAC9C,YAAM,IAAI,MAAM;;AAGlB,UAAM,aAAa;AACnB,UAAM,SAAS,WAAW,KAAK,IAAI,EAAE,QAAQ;AAC7C,UAAM,QAAQ,aAAK,cAAc,EAAE;AACnC,UAAM,SAAS,SAAS,EAAE;AAC1B,UAAM,YAAY,aAAK,kBAAkB,QAAQ;AACjD,aAAS,IAAI,GAAG,IAAI,OAAO,EAAE,GAAG;AAC9B,gBAAU,KAAK,GAAG,OAAO,IAAI;;AAE/B,WAAO,WAAW,eAAe,EAAE,OAAO,QAAQ;;;AAahD,iCACF,MAAc,WAA4B,OAAgB;AAC5D,SAAO,CAAC,EAAC,QAAQ,OAAO,cAAY;AAClC,UAAM,EAAC,MAAK;AACZ,qBAAiB,GAAG;AACpB,QAAI,EAAE,UAAU,YAAY,UAAU,UAAU;AAC9C,YAAM,IAAI,MAAM;;AAGlB,UAAM,aAAa;AACnB,UAAM,SAAS,WAAW,KAAK,IAAI,EAAE,QAAQ;AAC7C,UAAM,SAAS,SAAS,EAAE;AAC1B,UAAM,YAAY,UAAU,QAAQ,QAAQ;AAC5C,WAAO,WAAW,eAAe,EAAE,OAAO,QAAQ;;;;;AF3EtD,AAsBO,IAAM,WAAW,sBAAsB,CAAC,OAAO,KAAK,KAAK;AACzD,IAAM,OAAO,wBAAwB,MAAM;AAE3C,IAAM,aAA2B;EACtC,YAAY;EACZ,aAAa;EACb,YAAY;;;;AGXd;AAjBA,AAmBM,oBACF,QAAuD,UACvD,OAAiB,cAAqB;AACxC,QAAM,UAAU,aAAK,kBAAkB,OAAO,aAAK,cAAc;AAEjE,MAAI,gBAAgB,UAAU,UAAU;AAEtC,QAAI,SAAS;AACb,WAAO,QAAQ,WAAQ;AACrB,YAAM,OAAO,aAAK,cAAc,MAAM;AAErC,cAAuB,IAAI,MAAM,MAAoB;AACtD,gBAAU;;SAEP;AACL,QAAI,YAAY;AAEhB,WAAO,QAAQ,WAAQ;AACrB,YAAM,cAAc,UAAU,WAC1B,qBAAa,uBAAuB,MAAM,QAC1C,MAAM;AAEV,UAAI,OAAO;AAEX,eAAS,MAAM,GAAG,MAAM,MAAM,MAAM,IAAI,EAAE,KAAK;AAC7C,cAAM,SAAS,MAAM,SAAS,KAAK;AACnC,iBAAS,MAAM,GAAG,MAAM,MAAM,MAAM,IAAI,EAAE,KAAK;AAC7C,kBAAQ,SAAS,OAAO,YAAY;;;AAIxC,mBAAa,MAAM,MAAM;;;AAI7B,SAAO;;;;ACrCT;AAjBA,AAsBO,IAAM,YACT,6BAA6B,CAAC,GAAW,MAAe,MAAM,IAAK,IAAI;AACpE,IAAM,QACT,iBAAiB,OAAO,WAAW,MAAwB;AAExD,IAAM,cAA4B;EACvC,YAAY;EACZ,aAAa;EACb,YAAY;;;;ACbd;AAjBA,AAsBO,IAAM,UAAU,sBAAsB,CAAC,OAAO,KAAK,IAAI;AACvD,IAAM,MAAM,wBAAwB,KAAK;AAEzC,IAAM,YAA0B;EACrC,YAAY;EACZ,aAAa;EACb,YAAY;;;;ACXd;AAjBA,AAsBO,IAAM,YAAY,sBAAsB,CAAC,OAAO,KAAK,MAAM;AAC3D,IAAM,QAAQ,wBAAwB,OAAO;AAE7C,IAAM,cAA4B;EACvC,YAAY;EACZ,aAAa;EACb,YAAY;;;;ACXd;AAjBA,AAsBO,IAAM,YAAY,sBAAsB,CAAC,OAAO,KAAK,MAAM;AAC3D,IAAM,QAAQ,wBAAwB,OAAO;AAE7C,IAAM,cAA4B;EACvC,YAAY;EACZ,aAAa;EACb,YAAY;;;;ACXd;AAjBA,AAmBM,sBACF,aAAyB,WAA4B,OACrD,WAAmB,WAAmB,WAAmB,SACzD,aAAuB,YAAkB;AAC3C,QAAM,SAAS,OAAO,CAAC,WAAW,YAAY;AAE9C,WAAS,IAAI,GAAG,IAAI,WAAW,KAAK;AAClC,UAAM,QAAQ;AACd,QAAI,eAAe;AACnB,aAAS,IAAI,GAAG,IAAI,WAAW,KAAK;AAClC,YAAM,MAAM,YAAY,IAAI,YAAY;AACxC,sBAAgB,MAAM,QAAQ;AAC9B,YAAM,KAAK;;AAEb,QAAI,eAAe,KAAK,gBAAgB,aAAa,WAAW;AAC9D,YAAM,IAAI,MACN,oBAAoB,6BAA6B;;AAGvD,aAAS,IAAI,GAAG,IAAI,WAAW,KAAK;AAClC,aAAO,OAAO,IAAI,YAAY,KAC1B,UAAU,IAAI,GAAG,UAAU,WAAW,eAAe,YAAY;;;AAIzE,SAAO;;;;AC3BT;AAjBA,AAmBM,sBACF,MAA0B,YAC1B,oBAA4B;AAC9B,QAAM,SAAS,OAAO,oBAAoB,KAAK;AAC/C,WAAS,IAAI,GAAG,IAAI,OAAO,MAAM,EAAE,GAAG;AACpC,UAAM,SAAS,OAAO,WAAW;AAEjC,UAAM,cAAwB,OAAO;AACrC,UAAM,WAAW,YAAY;AAC7B,UAAM,aAAa,YAAY;AAC/B,UAAM,eAAe,WAAW,WAAW,CAAC,UAAU;AACtD,gBAAY,KAAK,WAAW,OAAO;AAEnC,UAAM,gBAAgB,KAAK,WAAW;AACtC,WAAO,OAAO,KAAK,KAAK,OAAO;;AAGjC,SAAO;;;;ACnBT;AAjBA,AAsBO,IAAM,cACT,6BAA6B,CAAC,GAAW,MAAe,IAAI,IAAK,IAAI;AAClE,IAAM,UACT,iBAAiB,SAAS,aAAa,MAAwB;AAE5D,IAAM,gBAA8B;EACzC,YAAY;EACZ,aAAa;EACb,YAAY;;;;ACbd;AAjBA,AAsBO,IAAM,mBACT,6BAA6B,CAAC,GAAW,MAAe,KAAK,IAAK,IAAI;AACnE,IAAM,eAAe,iBACxB,cAAc,kBAAkB,MAAwB;AAErD,IAAM,qBAAmC;EAC9C,YAAY;EACZ,aAAa;EACb,YAAY;;;;ACbd;AAjBA,AAsBO,IAAM,WACT,6BAA6B,CAAC,GAAW,MAAe,IAAI,IAAK,IAAI;AAClE,IAAM,OACT,iBAAiB,MAAM,UAAU,MAAwB;AAEtD,IAAM,aAA2B;EACtC,YAAY;EACZ,aAAa;EACb,YAAY;;;;ACbd;AAjBA,AAsBO,IAAM,gBACT,6BAA6B,CAAC,GAAW,MAAe,KAAK,IAAK,IAAI;AACnE,IAAM,YACT,iBAAiB,WAAW,eAAe,MAAwB;AAEhE,IAAM,kBAAgC;EAC3C,YAAY;EACZ,aAAa;EACb,YAAY;;;;ACbd;AAjBA,AAmBM,sBACF,OAAe,MAAc,KAAW;AAC1C,QAAM,OAAQ,QAAO,SAAU,OAAM;AAErC,QAAM,SAAS,aAAK,oBAAoB,KAAK;AAC7C,SAAO,KAAK;AACZ,WAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACtC,WAAO,KAAK,OAAO,IAAI,KAAK;;AAG9B,SAAO;;;;ACZT;AAjBA,AAsBO,IAAM,UAAU,sBAAsB,CAAC,OAAO,KAAK,IAAI;AACvD,IAAM,MAAM,wBAAwB,KAAK;AAEzC,IAAM,YAA0B;EACrC,YAAY;EACZ,aAAa;EACb,YAAY;;;;ACXd;AAjBA,AAmBM,iBACF,OAAmB,YAAoB,UACvC,OAAe;AACjB,QAAM,OAAO,aAAK,uBACd,OAA0B,aAAK,cAAc;AAEjD,WAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,EAAE,GAAG;AACpC,UAAM,SAAS,IAAI;AACnB,QAAI,MAAM,MAAM;AAChB,aAAS,IAAI,GAAG,IAAI,YAAY,EAAE,GAAG;AACnC,YAAM,QAAQ,MAAM,SAAS;AAC7B,UAAI,OAAO,MAAM,UACb,QAAQ,KAAK;AACf,cAAM;;;AAGV,SAAK,KAAK;;AAEZ,SAAO;;;;ACpBT;AAjBA,AAsBO,IAAM,cAAc,6BACtB,CAAC,QAAQ,WAAW,KAAK,IAAI,QAAkB;AAC7C,IAAM,UAAU,iBAAiB,SAAS;AAE1C,IAAM,gBAA8B;EACzC,YAAY;EACZ,aAAa;EACb,YAAY;;;;ACZd;AAjBA,AAsBO,IAAM,cAAc,6BACtB,CAAC,QAAQ,WAAW,KAAK,IAAI,QAAkB;AAC7C,IAAM,UAAU,iBAAiB,SAAS;AAE1C,IAAM,gBAA8B;EACzC,YAAY;EACZ,aAAa;EACb,YAAY;;;;ACZd;AAjBA,AAqBO,IAAM,eAAe,6BACvB,CAAC,QAAgB,WAAmB,SAAS;AAC3C,IAAM,sBACT,8BAA+B,CAAC,OAAO,OAAO,OAAO,UAAS;AAC5D,SAAO;IACL,MAAM,QAAQ,QAAQ,QAAQ;IAC9B,MAAM,QAAQ,QAAQ,QAAQ;;;AAI/B,IAAM,WACT,iBAAiB,UAAU,cAAc;AAEtC,IAAM,iBAA+B;EAC1C,YAAY;EACZ,aAAa;EACb,YAAY;;;;ACpBd;AAjBA,AAuBM,iBAAkB,OAAmB,QAAkB,QAAgB;AAE3E,QAAM,WACF,aAAK,kBAAkB,IAAuB;AAClD,SAAO,aAAa,IAAI,QAAQ,UAAU,OAAO;;AAG7C,aAAc,MAAoD;AAEtE,QAAM,EAAC,QAAQ,YAAW;AAC1B,QAAM,EAAC,MAAK;AAEZ,mBAAiB,GAAG;AAEpB,QAAM,QAAQ,QAAQ,KAAK,IAAI,EAAE,QAAQ;AACzC,QAAM,CAAC,KAAK,YAAY,QAAQ,OAAO,EAAE,OAAO,EAAE;AAElD,SAAO,QAAQ,eAAe,UAAU,EAAE,OAAO;;AAG5C,IAAM,YAA0B;EACrC,YAAY;EACZ,aAAa;EACb,YAAY;;;;AC7Bd;AAjBA,AAsBO,IAAM,eACT,6BAA8B,CAAC,GAAG,MAAO,MAAM,IAAK,IAAI;AACrD,IAAM,WACT,iBAAiB,UAAU,cAAc,MAAsB;AAE5D,IAAM,iBAA+B;EAC1C,YAAY;EACZ,aAAa;EACb,YAAY;;;;ACbd;;;ACAA;;;ACCA;AAlBA,AAoBM,uBACF,OAAmB,QAAkB,OAAiB,MACtD,UAAkB;AACpB,QAAM,QAAQ,OAAO;AACrB,QAAM,QAAQ,aAAK,cAAc;AACjC,QAAM,WAAW,aAAK,eAAe;AACrC,QAAM,aAAa,aAAK,eAAe;AAEvC,QAAM,SAAS,aAAK,uBAChB,OAA0B,aAAK,cAAc;AAEjD,WAAS,IAAI,GAAG,IAAI,OAAO,EAAE,GAAG;AAC9B,UAAM,MAAM,aAAK,WAAW,GAAG,OAAO;AAGtC,UAAM,SAAmB,IAAI,MAAM,IAAI;AACvC,aAAS,KAAI,GAAG,KAAI,OAAO,QAAQ,MAAK;AACtC,aAAO,MAAK,IAAI,KAAK;;AAGvB,UAAM,WAAW,aAAK,WAAW,QAAQ,OAAO;AAChD,WAAO,YAAY,MAAM;;AAE3B,SAAO;;;;AD3CT,AAwBM,mBAAoB,MAIzB;AACC,QAAM,EAAC,QAAQ,OAAO,YAAW;AACjC,QAAM,EAAC,MAAK;AACZ,QAAM,EAAC,SAAQ;AAEf,mBAAiB,GAAG;AAEpB,QAAM,QAAQ,EAAE,MAAM;AAEtB,QAAM,WAAqB,IAAI,MAAM;AACrC,WAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACxC,aAAS,KAAK,EAAE,MAAM,KAAK;;AAG7B,QAAM,SAAS,QAAQ,KAAK,IAAI,EAAE,QAAQ;AAC1C,QAAM,SAAS,cAAc,QAAQ,EAAE,OAAO,EAAE,OAAO,MAAM;AAE7D,QAAM,SAAS,QAAQ,MAAM,QAAQ,UAAU,EAAE;AACjD,SAAO,EAAC,QAAQ,OAAO,UAAU,OAAO,EAAE;;AAGrC,IAAM,kBAAgC;EAC3C,YAAY;EACZ,aAAa;EACb,YAAY;;;;ADpDd,AAuBM,kBACF,QAAkB,QAAkB,OACpC,eAAuB;AAEzB,QAAM,CAAC,UAAU,eACb,qBAAa,0BAA0B,QAAQ;AACnD,QAAM,WAAW,WAAW,QAAQ;AACpC,QAAM,UAAU,aAAK,oBACD,aAAK,cAAc,WAAW;AAClD,QAAM,aAAa,aAAK,cAAc;AAEtC,WAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,EAAE,GAAG;AACvC,UAAM,SAAS,IAAI;AACnB,QAAI,QAAO;AACX,aAAS,IAAI,GAAG,IAAI,YAAY,EAAE,GAAG;AACnC,eAAQ,MAAM,SAAS;;AAEzB,YAAQ,KAAK;;AAGf,SAAO,EAAC,SAAS,UAAU;;AAGvB,cACF,MAAqE;AAEvE,QAAM,EAAC,QAAQ,SAAS,UAAS;AACjC,QAAM,EAAC,MAAK;AACZ,QAAM,EAAC,MAAM,aAAY;AAEzB,mBAAiB,GAAG;AAEpB,QAAM,QAAQ,EAAE,MAAM;AACtB,QAAM,OAAO,aAAK,eAAe,MAAM,EAAE;AAEzC,QAAM,cAAc,qBAAa,mBAAmB,MAAM;AAC1D,MAAI,gBAAgB;AACpB,MAAI,YAAY;AAChB,QAAM,0BAA0B;AAChC,MAAI,eAAe,MAAM;AACvB,gBAAY,UAAU,EAAC,QAAQ,EAAC,KAAI,SAAS,OAAO,EAAC,MAAM;AAC3D,4BAAwB,KAAK;AAC7B,oBAAgB,qBAAa,iBAAiB,cAAc,QAAQ;;AAGtE,QAAM,QAAQ,QAAQ,KAAK,IAAI,UAAU,QAAQ;AACjD,QAAM,EAAC,SAAS,UAAU,aACtB,SAAS,UAAU,OAAO,UAAU,OAAO,OAAO;AAEtD,MAAI,cAAc;AAClB,MAAI,UAAU;AACZ,kBAAc,qBAAa,qBAAqB,UAAU;;AAG5D,0BAAwB,QACpB,OAAK,QAAQ,8BAA8B;AAE/C,SAAO,QAAQ,eAAe,aAAa,UAAU;;AAGhD,IAAM,aAA2B;EACtC,YAAY;EACZ,aAAa;EACb,YAAY;;;;AGrEd;AAjBA,AAmBM,mBACF,OAAe,MAAc,MAC7B,OAAwB;AAC1B,QAAM,gBAAgB,UAAU;AAChC,QAAM,8BAA8B,QAAQ,QAAQ,OAAO;AAC3D,QAAM,8BAA8B,OAAO,SAAS,OAAO;AAE3D,MAAI,iBAAiB,+BACjB,6BAA6B;AAC/B,WAAO,aAAK,oBAAoB,GAAG;;AAGrC,QAAM,cAAc,KAAK,IAAI,KAAK,KAAM,QAAO,SAAS;AACxD,QAAM,SAAS,aAAK,oBAAoB,aAAa;AAErD,MAAI,OAAO,SAAS,SAAS,GAAG;AAG9B,WAAO;;AAGT,SAAO,KAAK;AACZ,WAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACtC,WAAO,KAAK,OAAO,IAAI,KAAK;;AAE9B,SAAO;;;;AC3BT;AAjBA,AAsBO,IAAM,YAAY,sBAAsB,CAAC,OAAO,IAAI,KAAK,KAAK;AAC9D,IAAM,QAAQ,wBAAwB,OAAO;AAE7C,IAAM,cAA4B;EACvC,YAAY;EACZ,aAAa;EACb,YAAY;;;;ACXd;AAjBA,AAsBO,IAAM,cACT,sBAAsB,CAAC,OAAO,IAAK,KAAI,KAAK,IAAI,CAAC;AAC9C,IAAM,UACT,gBAAgB,SAAS,CAAC,OAAO,IAAK,KAAI,KAAK,IAAI,CAAC;AAEjD,IAAM,gBAA8B;EACzC,YAAY;EACZ,aAAa;EACb,YAAY;;;;ACbd;AAjBA,AAsBM,mBACF,MAAqB,OAAiB,MAAgB,OACtD,OAAe;AACjB,QAAM,cAAc,mBAAW,iBAAiB,OAAO,OAAO;AAC9D,QAAM,SAAS,aAAK,cAAc;AAClC,QAAM,WAAW,aAAK,eAAe;AAErC,MAAI,aAAa;AACf,UAAM,aAAa,mBAAW,kBAAkB,OAAO;AAEvD,QAAI,UAAU,UAAU;AACtB,aAAQ,KAAsB,MAAM,YAAY,aAAa;;AAG/D,WAAQ,KAAoB,SAAS,YAAY,aAAa;;AAGhE,QAAM,cAAc,UAAU,WAC1B,qBAAa,uBAAuB,QACpC;AAEJ,QAAM,QAAQ,OAAO,OAAO,OAAO;AACnC,QAAM,SAAS,OAAO,MAAM;AAC5B,WAAS,IAAI,GAAG,IAAI,OAAO,MAAM,EAAE,GAAG;AACpC,UAAM,SAAS,OAAO,WAAW;AACjC,UAAM,QAAQ,OAAO,IAAI,CAAC,KAAa,MAAM,MAAM,MAAM;AACzD,WAAO,IAAI,MAAM,IAAI,GAAG,QAAQ,GAAG;;AAGrC,MAAI,UAAU,UAAU;AACtB,WAAO,qBAAa,uBAAuB,OAAO;;AAEpD,SAAO,OAAO;;AAGV,eACF,MAAuE;AAEzE,QAAM,EAAC,QAAQ,SAAS,UAAS;AACjC,QAAM,EAAC,MAAK;AACZ,QAAM,EAAC,OAAO,SAAQ;AAEtB,mBAAiB,GAAG;AAEpB,QAAM,CAAC,QAAQ,SAAS,mBAAW,iBAAiB,GAAG,OAAO;AAC9D,qBAAW,kBAAkB,GAAG,QAAQ;AAExC,QAAM,OAAO,QAAQ,KAAK,IAAI,EAAE,QAAQ;AACxC,QAAM,UAAU,UAAU,MAAM,QAAQ,OAAO,EAAE,OAAO,EAAE;AAC1D,SAAO,QAAQ,eAAe,OAAO,EAAE,OAAO;;AAGzC,IAAM,cAA4B;EACvC,YAAY;EACZ,aAAa;EACb,YAAY;;;;AC5Dd;AAjBA,AAmBM,iCACF,SAAqB,cAAwB,cAC7C,QAAoB,aAAuB,YAC3C,cAAoB;AAEtB,QAAM,eAAe,aAAa;AAClC,QAAM,YAAY,WAAW;AAE7B,QAAM,oBAA+B,IAAI,MAAM;AAC/C,QAAM,kBAA4B,IAAI,MAAM;AAE5C,QAAM,OAAO,aAAa;AAE1B,MAAI,cAAc,GAAG;AACnB,QAAI,iBAAiB,GAAG;AACtB,YAAM,IAAI,MAAM;8BACQ;;AAE1B,UAAM,gBAAgB,aAAK,kBAAkB,cAAc;AAC3D,UAAM,eAAe,aAAK,kBAAkB,aAAa;AACzD,WAAO;MACL;MAAe,CAAC,GAAG;MAAO;MAAc;MAAmB;;;AAI/D,MAAI,iBAAiB;AACrB,MAAI,iBAAiB;AACrB,QAAM,YAAsB,IAAI,MAAM,WAAW,KAAK;AAEtD,WAAS,IAAI,GAAG,IAAI,cAAc,EAAE,GAAG;AAErC,UAAM,MAAM,QAAQ,IAAI;AACxB,QAAI,MAAM,GAAG;AACX,YAAM,IAAI,MAAM,WAAW,qBAAqB;;AAElD,QAAI,OAAO,WAAW;AACpB,YAAM,IAAI,MAAM,WAAW,qBAAqB,UAAU;;AAE5D,MAAE,UAAU;AACZ,qBAAiB,kBAAmB,OAAO;AAC3C,qBAAiB;;AAGnB,MAAI,cAAc;AAClB,WAAS,MAAM,GAAG,MAAM,WAAW,EAAE,KAAK;AAExC,UAAM,WAAY,UAAU,SAAS;AACrC,sBAAkB,OAAO;AACzB,kBAAc,eAAe,CAAC;AAE9B,cAAU,OAAO,KAAK,IAAI,UAAU,MAAM;AAO1C,QAAI,MAAM,GAAG;AACX,gBAAU,QAAQ,UAAU,MAAM;;;AAItC,MAAI,eAAe,gBAAgB;AACjC,UAAM,gBAA4B;AAClC,UAAM,eAA2B;AACjC,aAAS,IAAI,GAAG,IAAI,cAAc,EAAE,GAAG;AACrC,sBAAgB,KAAK;;AAEvB,WAAO;MACL;MAAe,CAAC,cAAc;MAAO;MAAc;MACnD;;SAEG;AACL,UAAM,mBAAmB,UAAU,YAAY;AAC/C,UAAM,gBACF,aAAK,kBAAkB,cAAc,mBAAmB;AAE5D,UAAM,eACF,aAAK,kBAAkB,aAAa;AACxC,UAAM,cAAwB,IAAI,MAAM,WAAW,KAAK;AAGxD,aAAS,IAAI,GAAG,IAAI,cAAc,EAAE,GAAG;AAErC,YAAM,MAAM,QAAQ,IAAI;AACxB,YAAM,SAAS,YAAY;AAC3B,YAAM,UAAY,SAAQ,IAAK,IAAI,UAAU,MAAM,MAAM;AACzD,kBAAY;AACZ,eAAS,IAAI,GAAG,IAAI,MAAM,EAAE,GAAG;AAE7B,sBAAc,UAAU,OAAO,KAAK,QAAQ,IAAI,OAAO;;AAEzD,mBAAa,WAAW,OAAO;AAE/B,sBAAgB,KAAK;;AAIvB,aAAS,MAAM,GAAG,MAAM,WAAW,EAAE,KAAK;AACxC,YAAM,WAAW,YAAY;AAC7B,UAAI,aAAa,GAAG;AAClB,cAAM,gBAAiB,QAAQ,IAAK,IAAI,UAAU,MAAM;AAIxD,sBAAc,gBAAgB,OAAO,KAAK;AAC1C,iBAAS,MAAM,GAAG,MAAM,MAAM,EAAE,KAAK;AACnC,wBAAc,gBAAgB,OAAO,OAAO;;AAE9C,qBAAa,iBAAiB;;;AAGlC,WAAO;MACL;MAAe,CAAC,kBAAkB;MAAO;MAAc;MACvD;;;;;;ACpHN;AAjBA,AAmBM,2BACF,cAA0B,mBAA6B,YACvD,YACA,aAAqB;AACvB,QAAM,YAAY,aAAK,cAAc;AACrC,QAAM,MAAM,kBAAkB;AAC9B,QAAM,aAAa,YAAY;AAI/B,QAAM,cAAwB;AAC9B,MAAI,UAAU;AACd,MAAI,eAAe;AACnB,WAAS,IAAI,GAAG,IAAI,YAAY,EAAE,GAAG;AACnC,UAAM,OAAO,YAAY;AACzB,QAAI,SAAS,IAAI;AACf,UAAI,iBAAiB,IAAI;AACvB,cAAM,IAAI,MAAM,iDACZ,oBAAoB;;AAE1B,qBAAe;AACf,kBAAY,KAAK;WACZ;AACL,UAAI,OAAO,GAAG;AACZ,cAAM,IAAI,MAAM,QAAQ,+BAA+B;;AAEzD,iBAAW;AACX,kBAAY,KAAK;;;AAGrB,MAAI,iBAAiB,IAAI;AACvB,QAAI,WAAW,GAAG;AAChB,YAAM,IAAI,MACN;;AAIN,UAAM,UAAU,KAAK,MAAM,YAAY;AACvC,QAAI,UAAU,YAAY,WAAW;AACnC,YAAM,IAAI,MAAM,2CAA2C;yEAEvD,uBAAuB,2BAA2B;;AAGxD,gBAAY,gBAAgB;;AAE9B,QAAM,aAAa,aAAK,cAAc;AACtC,MAAI,eAAe,WAAW;AAC5B,UAAM,IAAI,MAAM,qCACZ,uDACA,0BAA0B,0BAA0B;;AAG1D,QAAM,YAAY,WAAW;AAC7B,QAAM,eAAyB;AAC/B,MAAI,YAAY,GAAG;AACjB,iBAAa,YAAY,KAAK;AAC9B,aAAS,IAAI,YAAY,GAAG,KAAK,GAAG,EAAE,GAAG;AACvC,mBAAa,KAAK,aAAa,IAAI,KAAK,WAAW,IAAI;;;AAI3D,QAAM,gBAA0B;AAChC,MAAI,aAAa,GAAG;AAClB,kBAAc,aAAa,KAAK;AAChC,aAAS,IAAI,aAAa,GAAG,KAAK,GAAG,EAAE,GAAG;AACxC,oBAAc,KAAK,cAAc,IAAI,KAAK,YAAY,IAAI;;;AAI9D,QAAM,aACF,aAAK,kBAAkB,YAAY,MAAM;AAC7C,WAAS,IAAI,GAAG,IAAI,KAAK,EAAE,GAAG;AAC5B,QAAI,KAAK;AACT,aAAS,IAAI,GAAG,IAAI,WAAW,EAAE,GAAG;AAElC,YAAM,aAAa,IAAI,YAAY,KAAK,aAAa;;AAEvD,aAAS,IAAI,GAAG,IAAI,YAAY,EAAE,GAAG;AAEnC,iBAAW,IAAI,aAAa,KAAK,KAAK,MAAM,KAAK,cAAc;AAC/D,YAAM,cAAc;;;AAGxB,SAAO,CAAC,YAAY,CAAC,KAAK,aAAa;;;;ACtFzC;AAjBA,AAmBM,oCACF,OAAmB,YAAsB,YACzC,SAAqB,YAAwB,SAAS,OACtD,eAAe,GAAC;AAClB,QAAM,aAAa,QAAQ;AAC3B,MAAI,eAAe,WAAW,QAAQ;AACpC,UAAM,IAAI,MAAM;;AAIlB,QAAM,YAAsB,CAAC,WAAW,IAAI,MAAM,SAAS,WAAW;AACtE,QAAM,SAAS,UAAU;AAGzB,QAAM,uBACF,aAAa,IAAI,WAAW,aAAa,KAAK,IAAI;AACtD,QAAM,aAAa;AAEnB,MAAI,aAAa,GAAG;AAClB,UAAM,IAAI,MAAM;;AAGlB,QAAM,cAAc,WAAW;AAC/B,cAAY,KAAK;AAEjB,QAAM,eACF,YAAY,OAAO,CAAC,SAAS,UAAU,UAAU,OAAO;AAE5D,QAAM,SAAS,aAAK,kBAAkB,YAAY;AAIlD,MAAI,eAAe,GAAG;AACpB,QAAI,aAAa,GAAG;AAClB,aAAO,KAAK;;AAEd,WAAO,CAAC,QAAQ;;AAGlB,MAAI,cAAc,GAAG;AACnB,UAAM,IAAI,MAAM;;AAGlB,MAAI,QAAQ,GAAG,MAAM;AAErB,MAAI,qBAAqB;AACzB,MAAI,WAAW,WAAW;AAE1B,SAAO,MAAM;AAEX,QAAI,YAAY;AAChB,QAAI,MAAM,YAAY;AACpB,kBAAY,WAAW;AACvB,UAAI,aAAa,WAAW;AAC1B,UAAE;AACF;;AAGF,UAAI,YAAY,WAAW;AACzB,cAAM,IAAI,MAAM;;;AAIpB,QAAI,WAAW,KAAK,YAAY,YAAY;AAC1C,YAAM,IAAI,MAAM,cAAc,6BAC1B;;AAKN,QAAI,WAAW,oBAAoB;AACjC,aAAO,KAAK,cAAc,qBAAqB,QAAQ,WAAW;;AAGpE,aAAS,IAAI,OAAO,IAAI,KAAK,EAAE,GAAG;AAChC,YAAM,QAAQ,QAAQ;AACtB,UAAI,QAAQ,KAAK,SAAS,UAAU,IAAI;AACtC,cAAM,IAAI,MAAM,gBAAgB,SAAS,QAAQ,uBAC7C,UAAU;;AAEhB,eAAS,IAAI,GAAG,IAAI,QAAQ,KAAK;AAC/B,eAAO,WAAW,SAAS,MAAM,MAAM,QAAQ,SAAS;;;AAI5D,QAAI,QAAQ;AACV,eAAS,IAAI,GAAG,IAAI,QAAQ,KAAK;AAC/B,eAAO,WAAW,SAAS,MAAM,MAAM;;;AAI3C,YAAQ;AACR,MAAE;AACF,yBAAqB,WAAW;AAChC,eAAW;AACX,QAAI,MAAM,YAAY;AACpB;;;AAKJ,MAAI,qBAAqB,YAAY;AACnC,WAAO,KAAK,cAAc,qBAAqB,QAAQ,aAAa;;AAGtE,SAAO,CAAC,QAAQ;;;;AC3GlB;AAjBA,AAsBO,IAAM,WAAW,sBAAsB,CAAC,OAAO,KAAK,KAAK;AACzD,IAAM,OAAO,gBAAgB,MAAM,CAAC,OAAO,KAAK,KAAK;AAErD,IAAM,aAA2B;EACtC,YAAY;EACZ,aAAa;EACb,YAAY;;;;ACXd;AAjBA,AAsBO,IAAM,wBACT,6BAA8B,CAAC,GAAW,MAAa;AACrD,QAAM,OAAO,IAAI;AACjB,SAAO,OAAO;;AAEb,IAAM,oBACT,iBAAiB,mBAAmB;AAEjC,IAAM,0BAAwC;EACnD,YAAY;EACZ,aAAa;EACb,YAAY;;;;AChBd;AAjBA,AAmBM,0BACF,UAAoB,MAAuB,SAC3C,OAAe;AACjB,QAAM,SAAS,OAAO,UAAU,KAAK;AAErC,WAAS,IAAI,GAAG,IAAI,OAAO,MAAM,KAAK;AACpC,UAAM,MAAM,OAAO,WAAW;AAE9B,UAAM,SAAmB,IAAI,MAAM,IAAI;AACvC,aAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACtC,aAAO,KAAK,IAAI,KAAK,QAAQ,KAAK,MAAM;;AAE1C,WAAO,IAAI,KAAK,IAAI,GAAG,SAAS,GAAG;;AAGrC,SAAO;;;;ACjBT;AAjBA,AAyBA,2BAAoB;EAQlB,YACI,WAAmB,aAAuB,SAC1C,UAAkB,UAAkB,wBAA+B;AACrE,SAAK,YAAY,aAAK,aAAa;AACnC,SAAK,cAAc;AACnB,SAAK,UAAU,aAAK,aAAa;AACjC,SAAK,WAAW,aAAK,aAAa;AAClC,SAAK,WAAW;AAChB,SAAK,gBAAgB;;EAGf,YAAY,YAAkB;AAIpC,WAAO,KAAK,IACR,KAAK,WAAW,IAAI,aAAa,IAAI,KAAK,UAAU,aAAa;;EAG/D,aAAa,QAAgB,YAAkB;AACrD,UAAM,WAAW,KAAK,YAAY;AAClC,WAAO,KAAK,IAAI,GAAK,SAAS,IAAI,WAAY,aAAc;;EAGtD,aACJ,MAAoB,YAAoB,QACxC,kBAA0B,WAAmB,YAAkB;AACjE,aAAS,aAAa,GAAG,aAAa,WAAW,EAAE,YAAY;AAC7D,YAAM,WAAW,KAAK,YAAY;AAClC,YAAM,cAAc,KAAK,IAAI,GAAG,WAAW;AAC3C,YAAM,eACF,KAAK,IAAI,GAAG,WAAY,aAAa,cAAa;AACtD,YAAM,YAAY,aAAc,eAAc;AAC9C,YAAM,iBACF,aAAc,eAAc,IAAI,IAAI,aAAa;AAIrD,UAAI,YAAY;AAEhB,mBAAa,cAAc,KAAK,QAAQ;AAExC,eAAS,IAAI,GAAG,IAAI,WAAW,EAAE,GAAG;AAClC,qBAAa,KAAK,iBAAiB,GAAG;;AAGxC,mBAAa,eAAe,KAAK,SAAS;AAE1C,YAAM,gBAAgB,cAAc,eAAe,YAAY;AAC/D,mBAAa,gBAAgB,KAAK,UAAU;AAG5C,aAAO,mBAAmB,cAAc,IAAI,WAAW;AACvD,YAAM,QAAQ,OAAO,mBAAmB;AAExC,UAAI,iBAAiB;AACrB,YAAM,gBAAgB,CAAC,QACnB,IAAI,QAAQ,CAAC,UAAU,MAAM,oBAAoB;AAErD,eAAS,IAAI,GAAG,IAAI,aAAa,EAAE,GAAG;AACpC,sBAAc,KAAK;AACnB,sBAAc,KAAK;;AAGrB,eAAS,IAAI,GAAG,IAAI,YAAY,GAAG,EAAE,GAAG;AACtC,sBAAc,KAAK,iBAAiB;AACpC,sBAAc,KAAK;;AAIrB,UAAI,YAAY,GAAG;AAIjB,sBAAc,KAAK,iBAAiB,YAAY;AAChD,iBAAS,IAAI,GAAG,IAAI,cAAc,EAAE,GAAG;AACrC,wBAAc,KAAK;AACnB,wBAAc,KAAK;;aAEhB;AAKL,iBAAS,IAAI,GAAG,IAAI,eAAe,GAAG,EAAE,GAAG;AACzC,wBAAc,KAAK;AACnB,wBAAc,KAAK;;AAErB,sBAAc,KAAK;;;;EAQlB,QAAQ,MAAoB,QAAkB;AAInD,UAAM,gBAAgB,KAAK;AAC3B,UAAM,aAAa,OAAO;AAC1B,QAAI,aAAa,GAAG;AAClB,UAAI,YAAY,OAAO;AACvB,UAAI,cAAc,GAAG;AACnB,cAAM,IAAI,MAAM,oCAAoC;;AAEtD,eAAS,IAAI,GAAG,IAAI,YAAY,EAAE,GAAG;AACnC,YAAI,cAAc,OAAO,MAAM;AAC/B,sBAAc,eAAgB,OAAO,MAAM;AAC3C,YAAI,CAAC,aAAa;AAChB,gBAAM,IAAI,MAAM,uBAAuB,OAAO,mBAC1C,cAAc;;AAEpB,oBAAY,OAAO;;AAErB,UAAI,cAAc,eAAe;AAC/B,cAAM,IAAI,MAAM,gDACZ,sBAAsB;;;AAI9B,UAAM,gBAAgB,aAAa;AACnC,UAAM,eAAe,aAAK,kBAAkB,SAAS;AAErD,QAAI,kBAAkB,KAAK,eAAe,GAAG;AAC3C,YAAM,QAAsB,IAAI,MAAM;AACtC,eAAS,IAAI,GAAG,KAAK,eAAe,EAAE,GAAG;AACvC,qBAAa,KAAK;;AAEpB,aAAO,CAAC,OAAO;;AAGjB,iBAAa,KAAK;AAClB,aAAS,IAAI,GAAG,KAAK,eAAe,EAAE,GAAG;AACvC,YAAM,SAAS,OAAO,KAAK,OAAO,IAAI;AACtC,UAAI,YAAY;AAChB,WAAK,YAAY,QAAQ,CAAC,eAAc;AACtC,qBAAa,KAAK,aAAa,QAAQ;;AAEzC,UAAI,KAAK,iBAAiB,SAAS,KAAK,cAAc,GAAG;AACvD,oBAAY;;AAEd,mBAAa,KAAK,aAAa,IAAI,KAAK;;AAG1C,UAAM,SAAuB,IAAI,MAAM,aAAa;AAEpD,aAAS,IAAI,GAAG,IAAI,eAAe,EAAE,GAAG;AACtC,YAAM,aAAa,OAAO;AAC1B,UAAI,iBAAiB,aAAa;AAClC,WAAK,YAAY,QAAQ,CAAC,eAAc;AACtC,cAAM,SAAS,OAAO,IAAI,KAAK,OAAO;AACtC,cAAM,YAAY,KAAK,aAAa,QAAQ;AAC5C,aAAK,aACD,MAAM,YAAY,QAAQ,gBAAgB,WAAW;AACzD,0BAAkB;;AAOpB,UAAI,KAAK,iBAAiB,mBAAmB,aAAa,IAAI;AAC5D,cAAM,aAAa,OAAO,IAAI,KAAK,OAAO;AAG1C,YAAI,eAAe,GAAG;AACpB;;AAKF,cAAM,aAAa,aAAa,IAAI,KAAK;AACzC,cAAM,YAAY;AAClB,aAAK,aACD,MAAM,YAAY,QAAQ,gBAAgB,WAAW;;;AAG7D,WAAO,CAAC,QAAQ;;;AAId,0BACF,MAAoB,YAAwB,WAC5C,aAAuB,SAAiB,UAAkB,UAC1D,wBAA+B;AACjC,SAAO,IAAI,eACA,WAAW,aAAa,SAAS,UAAU,UAC3C,wBACN,QAAQ,MAAM;;;;AC9MrB;AAjBA,AAmBA,eACI,KAAiB,YAAwB,WACzC,QAAoB;AACtB,MAAI,CAAC,IAAI,QAAQ;AACf;;AAGF,MAAI,WAAW,WAAW,GAAG;AAC3B,aAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,EAAE,GAAG;AACnC,aAAO,KAAK,IAAI,SAAS,GAAG,IAAI;;AAElC;;AAGF,MAAI,WAAW,WAAW,GAAG;AAC3B,UAAM,YAAY,WAAW;AAC7B,QAAI,IAAI,IAAI,QAAQ;AACpB,WAAO,MAAM,IAAI;AACf,YAAM,QAAQ,IAAI,SAAS,GAAG;AAC9B,UAAI,CAAC,aAAa,MAAM,WAAW,GAAG;AACpC,eAAO,KAAK;;AAEd,YAAM,IAAI,SAAS,IAAI;AACvB,UAAI,IAAI,QAAQ;;AAElB,QAAI,CAAC,aAAa,IAAI,WAAW,GAAG;AAClC,aAAO,KAAK;;AAEd;;AAIF,MAAI,aAAa;AACjB,WAAS,IAAI,GAAG,IAAI,IAAI,SAAS,GAAG,KAAK;AACvC,QAAK,MAAM,IAAI,UAAY,WAAW,QAAQ,IAAI,QAAQ,IAAK;AAC7D,YAAM,QAAQ,IAAI,SAAS,YAAY;AACvC,UAAI,CAAC,aAAa,MAAM,WAAW,GAAG;AACpC,eAAO,KAAK;;AAEd,mBAAa,IAAI;;;;AAKjB,yBACF,OAAqB,WACrB,WAAkB;AACpB,QAAM,YAAY,MAAM;AAGxB,QAAM,SAAuB;AAE7B,MAAI,aAAa;AACjB,MAAI,gBAAgB;AACpB,QAAM,aAAuB,IAAI,MAAM;AACvC,WAAS,IAAI,GAAG,IAAI,WAAW,EAAE,GAAG;AAClC,UAAM,mBAAmB,OAAO;AAChC,UAAM,MAAM,IAAI,WAAW,WAAW;AACtC,UAAM,WAAW,OAAO,SAAS;AACjC,eAAW,KAAK;AAChB,kBAAc;AACd,oBAAgB,KAAK,IAAI,eAAe;;AAG1C,QAAM,UAAU,aAAK,kBAAkB,SAAS,aAAa;AAC7D,QAAM,SAAuB,IAAI,MAAM;AACvC,QAAM,QAA0B,CAAC,WAAW;AAE5C,MAAI,IAAI;AACR,WAAS,IAAI,GAAG,IAAI,WAAW,EAAE,GAAG;AAClC,aAAS,IAAI,GAAG,IAAI,WAAW,IAAI,EAAE,GAAG;AAEtC,cAAQ,IAAI,KAAK;AACjB,cAAQ,IAAI,IAAI,KAAK;AACrB,aAAO,KAAK,OAAO;AACnB,QAAE;;;AAIN,SAAO,CAAC,SAAS,QAAQ;;;;ACjF3B;AAjBA,AAmBM,oCACF,OAAqB,YAAkB;AACzC,QAAM,SAAS,aAAK,kBAAkB,SAAS,MAAM;AAErD,WAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,EAAE,GAAG;AACrC,WAAO,KACH,aAAK,cAAc,MAAM,IAAI,OAAO,YAAY;;AAGtD,SAAO;;;;ACXT;AAjBA,AAsBO,IAAM,UAAU,6BAClB,CAAC,QAAgB,WAAmB,SAAS;AAC3C,IAAM,iBACT,8BAA+B,CAAC,OAAO,OAAO,OAAO,UAAS;AAC5D,SAAO,EAAC,MAAM,QAAQ,OAAO,MAAM,QAAQ;;AAE1C,IAAM,MAAM,iBAAiB,KAAK,SAAS;AAE3C,IAAM,YAA0B;EACrC,YAAY;EACZ,aAAa;EACb,YAAY;;;;AChBd;AAjBA,AAwBM,kBACF,MACA,MAAc;AAChB,QAAM,WAAqB,IAAI,MAAM,KAAK;AAC1C,WAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACxC,aAAS,KAAK,KAAK,MAAM,KAAK,KAAK;;AAErC,QAAM,SAAS,OAAO,UAAU,KAAK;AACrC,WAAS,IAAI,GAAG,IAAI,OAAO,OAAO,QAAQ,EAAE,GAAG;AAC7C,UAAM,SAAS,OAAO,WAAW;AAEjC,UAAM,cAAwB,IAAI,MAAM,KAAK;AAC7C,aAAS,IAAI,GAAG,IAAI,YAAY,QAAQ,KAAK;AAC3C,kBAAY,KAAK,OAAO,KAAK,KAAK,MAAM;;AAG1C,UAAM,gBAAgB,KAAK,WAAW;AAEtC,WAAO,OAAO,KAAK,KAAK,OAAO;;AAEjC,SAAO;;;;ACzBT;AAnBA,AA0BA,IAAM,cAAc,CAAC,GAAS,MAAW;AACvC,QAAM,YAAY,EAAE,QAAQ,EAAE;AAC9B,SAAO,cAAc,IAAI,EAAE,QAAQ,EAAE,QAAQ;;AAc/C,gBAAgB,OAAe,GAAW,OAAO,GAAG,QAAQ,MAAM,SAAS,GAAC;AAC1E,SAAO,QAAQ,MAAM;AAInB,QAAI,QAAQ,OAAO,KAAK;AACtB,YAAM,IAAI,QAAQ,OAAO;AACzB,YAAM,KAAI,IAAI,OAAO;AACrB,YAAM,IAAI,KAAK,IAAI;AACnB,YAAM,IAAI,MAAM,KAAK,IAAI,IAAI,IAAI;AACjC,YAAM,KAAK,MAAM,KAAK,KAAK,IAAI,IAAK,KAAI,KAAK,KAAK,KAAK,KAAK,KAAI,IAAI;AACpE,YAAM,UAAU,KAAK,IAAI,MAAM,KAAK,MAAM,IAAI,KAAI,IAAI,IAAI;AAC1D,YAAM,WAAW,KAAK,IAAI,OAAO,KAAK,MAAM,IAAK,KAAI,MAAK,IAAI,IAAI;AAClE,aAAO,OAAO,GAAG,SAAS;;AAG5B,UAAM,IAAI,MAAM;AAChB,QAAI,IAAI;AACR,QAAI,IAAI;AAER,iBAAK,KAAK,OAAO,MAAM;AAEvB,QAAI,YAAY,MAAM,QAAQ,KAAK,GAAG;AACpC,mBAAK,KAAK,OAAO,MAAM;;AAEzB,WAAO,IAAI,GAAG;AACZ,mBAAK,KAAK,OAAO,GAAG;AACpB;AACA;AACA,aAAO,YAAY,MAAM,IAAI,KAAK,GAAG;AACnC,YAAI,IAAI;;AAEV,aAAO,YAAY,MAAM,IAAI,KAAK,GAAG;AACnC,YAAI,IAAI;;;AAGZ,QAAI,YAAY,MAAM,OAAO,OAAO,GAAG;AACrC,mBAAK,KAAK,OAAO,MAAM;WAClB;AACL,UAAI,IAAI;AACR,mBAAK,KAAK,OAAO,GAAG;;AAItB,QAAI,KAAK,GAAG;AACV,aAAO,IAAI;;AAEb,QAAI,KAAK,GAAG;AACV,cAAQ,IAAI;;;;AAKZ,kBACF,GAAe,QAAkB,QAAyB,GAC1D,QAAe;AAGjB,QAAM,UAAU,OAAO,OAAO,SAAS;AACvC,QAAM,CAAC,OAAO,QAAQ,CAAC,EAAE,SAAS,SAAS;AAC3C,QAAM,cAAc,aAAK,uBAAuB,QAAQ,QAAQ;AAChE,QAAM,iBAAiB,aAAK,uBAAuB,SAAS,QAAQ;AAEpE,WAAS,IAAI,GAAG,IAAI,OAAO,KAAK;AAC9B,UAAM,SAAS,IAAI;AACnB,UAAM,OAAO,EAAE,SAAS,QAAQ,SAAS;AAEzC,QAAI,YAAoB,IAAI,MAAM,KAAK;AACvC,SAAK,QACD,CAAC,OAAe,UAAkB,UAAU,SAAS,EAAC,OAAO;AAEjE,QAAI,IAAI,UAAU,QAAQ;AACxB,aAAO,WAAW;AAClB,kBAAY,UAAU,MAAM,GAAG;;AAGjC,QAAI,QAAQ;AACV,gBAAU,KAAK;;AAGjB,UAAM,YAAY,IAAI;AACtB,UAAM,WAAW,YAAY,SAAS,WAAW,YAAY;AAC7D,UAAM,cAAc,eAAe,SAAS,WAAW,YAAY;AACnE,aAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AAC1B,eAAS,KAAK,UAAU,GAAG;AAC3B,kBAAY,KAAK,UAAU,GAAG;;;AAKlC,QAAM,cAAc,OAAO;AAC3B,cAAY,YAAY,SAAS,KAAK;AAEtC,SAAO;IACL,OAAO,aAA4B,QAAQ;IAC3C,OAAO,aAA4B,SAAS;;;;;ACxHhD;AAjBA,AAmBM,oBACF,QAAuB,MAAc,OAAiB,OAAe;AAMvE,QAAM,QAAQ,aAAK,eAAe,MAAM,OAAO;AAyD/C,QAAM,WAAW,CAAC,GAAG,MAAM,IAAI;AAC/B,WAAS,IAAI,GAAG,IAAI,OAAO,KAAK;AAC9B,aAAS,MAAM,MAAM;;AAEvB,WAAS,KAAK,MAAM;AACpB,WAAS,IAAI,QAAQ,GAAG,IAAI,MAAM,QAAQ,KAAK;AAC7C,aAAS,MAAM,MAAM;;AAKvB,QAAM,iBAA0C;AAGhD,QAAM,UAAU,IAAI,WAAW,MAAM;AAErC,QAAM,cAAc,IAAI,aAAa,UAAU,OAAO;AAGtD,QAAM,gBAA0B;AAChC,QAAM,aAAa,SAAS,OAAO,KAAK,SAAS,OAAO;AACxD,WAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AAErC,QAAI;AACJ,QAAI,YAAY;AAEd,gBAAU,OAAO,GAAG;WACf;AACL,YAAM,aAAa;AACnB,eAAS,IAAI,GAAG,IAAI,SAAS,IAAI,KAAK;AACpC,iBAAS,IAAI,GAAG,IAAI,SAAS,IAAI,KAAK;AACpC,qBAAW,KAAK,YAAY,IAAI,GAAG,GAAG;;;AAG1C,gBAAU,WAAW,KAAK;;AAI5B,QAAI,eAAe,aAAa,QAAW;AACzC,cAAQ,KAAK,eAAe;WACvB;AACL,YAAM,cAAc,OAAO,KAAK,gBAAgB;AAChD,qBAAe,WAAW;AAC1B,cAAQ,KAAK;AACb,oBAAc,KAAK;;;AAOvB,QAAM,iBAAiB,SAAS;AAChC,iBAAe,KAAK,OAAO,KAAK,gBAAgB;AAChD,QAAM,eAAe,IAAI,aAAa,gBAAgB;AACtD,gBAAc,QAAQ,CAAC,oBAAoB,MAAK;AAC9C,aAAS,IAAI,GAAG,IAAI,SAAS,IAAI,KAAK;AACpC,eAAS,IAAI,GAAG,IAAI,SAAS,IAAI,KAAK;AACpC,qBAAa,IAAI,YAAY,IAAI,GAAG,oBAAoB,IAAI,GAAG,GAAG;;;;AAOxE,QAAM,cAAc,MAAM;AAC1B,cAAY,SAAS,eAAe;AAEpC,SAAO;IACL,cAAc,aAAa;IAC3B;IACA;;;ArDzJJ",
  "names": []
}
