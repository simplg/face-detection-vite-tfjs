{
  "version": 3,
  "sources": ["../../../tfjs-backend-cpu/src/base.ts", "../../../tfjs-backend-cpu/src/backend_cpu.ts", "../../../tfjs-backend-cpu/src/version.ts", "../../../tfjs-backend-cpu/src/register_all_kernels.ts", "../../../tfjs-backend-cpu/src/kernels/_FusedMatMul.ts", "../../../tfjs-backend-cpu/src/kernels/Elu.ts", "../../../tfjs-backend-cpu/src/kernels/LeakyRelu.ts", "../../../tfjs-backend-cpu/src/kernels/Prelu.ts", "../../../tfjs-backend-cpu/src/kernels/Relu.ts", "../../../tfjs-backend-cpu/src/kernels/Relu6.ts", "../../../tfjs-backend-cpu/src/utils/fused_utils.ts", "../../../tfjs-backend-cpu/src/kernels/BatchMatMul.ts", "../../../tfjs-backend-cpu/src/kernels/Reshape.ts", "../../../tfjs-backend-cpu/src/kernels/Acos.ts", "../../../tfjs-backend-cpu/src/kernels/Acosh.ts", "../../../tfjs-backend-cpu/src/kernels/AddN.ts", "../../../tfjs-backend-cpu/src/kernels/All.ts", "../../../tfjs-backend-cpu/src/kernels/Any.ts", "../../../tfjs-backend-cpu/src/kernels/ArgMax.ts", "../../../tfjs-backend-cpu/src/kernels/ArgMin.ts", "../../../tfjs-backend-cpu/src/kernels/Asin.ts", "../../../tfjs-backend-cpu/src/kernels/Asinh.ts", "../../../tfjs-backend-cpu/src/kernels/Atan.ts", "../../../tfjs-backend-cpu/src/kernels/Atan2.ts", "../../../tfjs-backend-cpu/src/kernels/Atanh.ts", "../../../tfjs-backend-cpu/src/kernels/AvgPool.ts", "../../../tfjs-backend-cpu/src/utils/pool_utils.ts", "../../../tfjs-backend-cpu/src/kernels/AvgPool3D.ts", "../../../tfjs-backend-cpu/src/kernels/AvgPool3DGrad.ts", "../../../tfjs-backend-cpu/src/kernels/AvgPoolGrad.ts", "../../../tfjs-backend-cpu/src/kernels/BatchNorm.ts", "../../../tfjs-backend-cpu/src/kernels/BatchToSpaceND.ts", "../../../tfjs-backend-cpu/src/kernels/Bincount.ts", "../../../tfjs-backend-cpu/src/kernels/BroadcastArgs.ts", "../../../tfjs-backend-cpu/src/kernels/Clip.ts", "../../../tfjs-backend-cpu/src/kernels/ComplexAbs.ts", "../../../tfjs-backend-cpu/src/kernels/Concat.ts", "../../../tfjs-backend-cpu/src/kernels/Imag.ts", "../../../tfjs-backend-cpu/src/kernels/Conv2D.ts", "../../../tfjs-backend-cpu/src/kernels/Conv2DBackpropFilter.ts", "../../../tfjs-backend-cpu/src/kernels/Conv2DBackpropInput.ts", "../../../tfjs-backend-cpu/src/kernels/Conv3D.ts", "../../../tfjs-backend-cpu/src/kernels/Conv3DBackpropFilterV2.ts", "../../../tfjs-backend-cpu/src/kernels/Conv3DBackpropInputV2.ts", "../../../tfjs-backend-cpu/src/kernels/Cos.ts", "../../../tfjs-backend-cpu/src/kernels/Cosh.ts", "../../../tfjs-backend-cpu/src/kernels/CropAndResize.ts", "../../../tfjs-backend-cpu/src/kernels/Cumsum.ts", "../../../tfjs-backend-cpu/src/kernels/DenseBincount.ts", "../../../tfjs-backend-cpu/src/kernels/DepthToSpace.ts", "../../../tfjs-backend-cpu/src/kernels/DepthwiseConv2dNative.ts", "../../../tfjs-backend-cpu/src/kernels/DepthwiseConv2dNativeBackpropFilter.ts", "../../../tfjs-backend-cpu/src/kernels/DepthwiseConv2dNativeBackpropInput.ts", "../../../tfjs-backend-cpu/src/kernels/Diag.ts", "../../../tfjs-backend-cpu/src/kernels/Dilation2D.ts", "../../../tfjs-backend-cpu/src/kernels/Dilation2DBackpropFilter.ts", "../../../tfjs-backend-cpu/src/kernels/Dilation2DBackpropInput.ts", "../../../tfjs-backend-cpu/src/kernels/Einsum.ts", "../../../tfjs-backend-cpu/src/kernels/Sum.ts", "../../../tfjs-backend-cpu/src/kernels/EluGrad.ts", "../../../tfjs-backend-cpu/src/kernels/Erf.ts", "../../../tfjs-backend-cpu/src/kernels/ExpandDims.ts", "../../../tfjs-backend-cpu/src/kernels/FFT.ts", "../../../tfjs-backend-cpu/src/utils/fft_utils.ts", "../../../tfjs-backend-cpu/src/kernels/RealDiv.ts", "../../../tfjs-backend-cpu/src/kernels/Fill.ts", "../../../tfjs-backend-cpu/src/kernels/FlipLeftRight.ts", "../../../tfjs-backend-cpu/src/kernels/FloorDiv.ts", "../../../tfjs-backend-cpu/src/kernels/FusedConv2D.ts", "../../../tfjs-backend-cpu/src/kernels/FusedDepthwiseConv2D.ts", "../../../tfjs-backend-cpu/src/kernels/GatherNd.ts", "../../../tfjs-backend-cpu/src/kernels/GatherV2.ts", "../../../tfjs-backend-cpu/src/kernels/IFFT.ts", "../../../tfjs-backend-cpu/src/kernels/IsFinite.ts", "../../../tfjs-backend-cpu/src/kernels/IsInf.ts", "../../../tfjs-backend-cpu/src/kernels/IsNaN.ts", "../../../tfjs-backend-cpu/src/kernels/LinSpace.ts", "../../../tfjs-backend-cpu/src/kernels/Log1p.ts", "../../../tfjs-backend-cpu/src/kernels/LogicalAnd.ts", "../../../tfjs-backend-cpu/src/kernels/LogicalNot.ts", "../../../tfjs-backend-cpu/src/kernels/LogicalOr.ts", "../../../tfjs-backend-cpu/src/kernels/LRN.ts", "../../../tfjs-backend-cpu/src/kernels/LRNGrad.ts", "../../../tfjs-backend-cpu/src/kernels/Max.ts", "../../../tfjs-backend-cpu/src/kernels/MaxPool.ts", "../../../tfjs-backend-cpu/src/kernels/MaxPool3D.ts", "../../../tfjs-backend-cpu/src/kernels/MaxPool3DGrad.ts", "../../../tfjs-backend-cpu/src/kernels/MaxPoolGrad.ts", "../../../tfjs-backend-cpu/src/kernels/MaxPoolWithArgmax.ts", "../../../tfjs-backend-cpu/src/kernels/MaxPoolWithArgmax_impl.ts", "../../../tfjs-backend-cpu/src/kernels/Mean.ts", "../../../tfjs-backend-cpu/src/kernels/Min.ts", "../../../tfjs-backend-cpu/src/kernels/MirrorPad.ts", "../../../tfjs-backend-cpu/src/kernels/Mod.ts", "../../../tfjs-backend-cpu/src/kernels/Multinomial.ts", "../../../tfjs-backend-cpu/src/kernels/Softmax.ts", "../../../tfjs-backend-cpu/src/kernels/NonMaxSuppressionV3.ts", "../../../tfjs-backend-cpu/src/kernels/NonMaxSuppressionV4.ts", "../../../tfjs-backend-cpu/src/kernels/NonMaxSuppressionV5.ts", "../../../tfjs-backend-cpu/src/kernels/OneHot.ts", "../../../tfjs-backend-cpu/src/kernels/OnesLike.ts", "../../../tfjs-backend-cpu/src/kernels/ZerosLike.ts", "../../../tfjs-backend-cpu/src/kernels/Pack.ts", "../../../tfjs-backend-cpu/src/kernels/PadV2.ts", "../../../tfjs-backend-cpu/src/kernels/Pow.ts", "../../../tfjs-backend-cpu/src/kernels/Range.ts", "../../../tfjs-backend-cpu/src/kernels/Reciprocal.ts", "../../../tfjs-backend-cpu/src/kernels/ResizeBilinear.ts", "../../../tfjs-backend-cpu/src/kernels/ResizeBilinearGrad.ts", "../../../tfjs-backend-cpu/src/kernels/ResizeNearestNeighbor.ts", "../../../tfjs-backend-cpu/src/kernels/ResizeNearestNeighborGrad.ts", "../../../tfjs-backend-cpu/src/kernels/Reverse.ts", "../../../tfjs-backend-cpu/src/kernels/RotateWithOffset.ts", "../../../tfjs-backend-cpu/src/kernels/Round.ts", "../../../tfjs-backend-cpu/src/kernels/ScatterNd.ts", "../../../tfjs-backend-cpu/src/kernels/Scatter_impl.ts", "../../../tfjs-backend-cpu/src/kernels/Select.ts", "../../../tfjs-backend-cpu/src/kernels/Selu.ts", "../../../tfjs-backend-cpu/src/kernels/Sign.ts", "../../../tfjs-backend-cpu/src/kernels/Sin.ts", "../../../tfjs-backend-cpu/src/kernels/Sinh.ts", "../../../tfjs-backend-cpu/src/kernels/Softplus.ts", "../../../tfjs-backend-cpu/src/kernels/SpaceToBatchND.ts", "../../../tfjs-backend-cpu/src/kernels/SparseFillEmptyRows.ts", "../../../tfjs-backend-cpu/src/kernels/SparseReshape.ts", "../../../tfjs-backend-cpu/src/kernels/SparseSegmentMean.ts", "../../../tfjs-backend-cpu/src/kernels/SparseSegmentSum.ts", "../../../tfjs-backend-cpu/src/kernels/SparseToDense.ts", "../../../tfjs-backend-cpu/src/kernels/SplitV.ts", "../../../tfjs-backend-cpu/src/kernels/Square.ts", "../../../tfjs-backend-cpu/src/kernels/Step.ts", "../../../tfjs-backend-cpu/src/kernels/StridedSlice.ts", "../../../tfjs-backend-cpu/src/kernels/StringNGrams.ts", "../../../tfjs-backend-cpu/src/kernels/StringSplit.ts", "../../../tfjs-backend-cpu/src/kernels/StringToHashBucketFast.ts", "../../../tfjs-backend-cpu/src/kernels/Tan.ts", "../../../tfjs-backend-cpu/src/kernels/Tanh.ts", "../../../tfjs-backend-cpu/src/kernels/Tile.ts", "../../../tfjs-backend-cpu/src/kernels/TopK.ts", "../../../tfjs-backend-cpu/src/kernels/Transform.ts", "../../../tfjs-backend-cpu/src/kernels/Unique.ts", "../../../tfjs-backend-cpu/src/kernels/Unpack.ts", "../../../tfjs-backend-cpu/src/kernels/UnsortedSegmentSum.ts", "../../../tfjs-backend-cpu/src/index.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/*\n * base.ts contains all the exports from tfjs-backend-cpu\n * without auto-kernel registration\n */\nimport {registerBackend} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from './backend_cpu';\nimport * as shared from './shared';\n\nexport {MathBackendCPU} from './backend_cpu';\nexport {version as version_cpu} from './version';\nexport {shared};\n\n// Side effects for default initialization of MathBackendCPU\nregisterBackend('cpu', () => new MathBackendCPU(), 1 /* priority */);\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BackendTimingInfo, buffer, DataStorage, DataType, DataValues, engine, env, kernel_impls, KernelBackend, Rank, ShapeMap, Tensor, Tensor2D, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nconst whereImpl = kernel_impls.whereImpl;\nimport {assertNotComplex} from './cpu_util';\n\ninterface DataId {}\n\nexport interface TensorData<D extends DataType> {\n  values?: backend_util.BackendValues;\n  dtype: D;\n  // For complex numbers, the real and imaginary parts are stored as their own\n  // individual tensors, with a parent joining the two with the\n  // complexTensorInfos field.\n  complexTensorInfos?: {real: TensorInfo, imag: TensorInfo};\n  // refCount keeps track of how many tensors reference it. Used for memory\n  // management.\n  refCount: number;\n}\n\nexport class MathBackendCPU extends KernelBackend {\n  public blockSize = 48;\n\n  data: DataStorage<TensorData<DataType>>;\n  private firstUse = true;\n  private static nextDataId = 0;\n  private nextDataId(): number {\n    return MathBackendCPU.nextDataId++;\n  }\n\n  constructor() {\n    super();\n    this.data = new DataStorage(this, engine());\n  }\n\n  write(values: backend_util.BackendValues, shape: number[], dtype: DataType):\n      DataId {\n    if (this.firstUse) {\n      this.firstUse = false;\n      if (env().get('IS_NODE')) {\n        backend_util.warn(\n            '\\n============================\\n' +\n            'Hi there \uD83D\uDC4B. Looks like you are running TensorFlow.js in ' +\n            'Node.js. To speed things up dramatically, install our node ' +\n            'backend, which binds to TensorFlow C++, by running ' +\n            'npm i @tensorflow/tfjs-node, ' +\n            'or npm i @tensorflow/tfjs-node-gpu if you have CUDA. ' +\n            'Then call require(\\'@tensorflow/tfjs-node\\'); (-gpu ' +\n            'suffix for CUDA) at the start of your program. ' +\n            'Visit https://github.com/tensorflow/tfjs-node for more details.' +\n            '\\n============================');\n      }\n    }\n    const dataId = {id: this.nextDataId()};\n\n    this.data.set(dataId, {values, dtype, refCount: 1});\n\n    return dataId;\n  }\n\n  /**\n   * Create a data bucket in cpu backend.\n   * @param shape Shape of the `TensorInfo`.\n   * @param dtype DType of the `TensorInfo`.\n   * @param values The value of the `TensorInfo` stored as a flattened array.\n   */\n  makeTensorInfo(\n      shape: number[], dtype: DataType,\n      values?: backend_util.BackendValues|string[]): TensorInfo {\n    let outId;\n    if (dtype === 'string' && values != null && values.length > 0 &&\n        util.isString(values[0])) {\n      const encodedValues =\n          (values as {} as string[]).map(d => util.encodeString(d));\n\n      outId = this.write(encodedValues, shape, dtype);\n    } else {\n      outId = this.write(values as TypedArray, shape, dtype);\n    }\n\n    return {dataId: outId, shape, dtype};\n  }\n\n  /** Return refCount of a `TensorData`. */\n  refCount(dataId: DataId): number {\n    if (this.data.has(dataId)) {\n      const tensorData = this.data.get(dataId);\n      return tensorData.refCount;\n    }\n    return 0;\n  }\n\n  /** Increase refCount of a `TensorData`. */\n  incRef(dataId: DataId): void {\n    const tensorData = this.data.get(dataId);\n    tensorData.refCount++;\n  }\n\n  /** Decrease refCount of a `TensorData`. */\n  decRef(dataId: DataId): void {\n    if (this.data.has(dataId)) {\n      const tensorData = this.data.get(dataId);\n      tensorData.refCount--;\n    }\n  }\n\n  move(\n      dataId: DataId, values: backend_util.BackendValues, shape: number[],\n      dtype: DataType, refCount: number): void {\n    this.data.set(dataId, {values, dtype, refCount});\n  }\n\n  numDataIds(): number {\n    return this.data.numDataIds();\n  }\n\n  async read(dataId: DataId): Promise<backend_util.BackendValues> {\n    return this.readSync(dataId);\n  }\n  readSync(dataId: DataId): backend_util.BackendValues {\n    const {dtype, complexTensorInfos} = this.data.get(dataId);\n\n    if (dtype === 'complex64') {\n      const realValues =\n          this.readSync(complexTensorInfos.real.dataId) as Float32Array;\n      const imagValues =\n          this.readSync(complexTensorInfos.imag.dataId) as Float32Array;\n      return backend_util.mergeRealAndImagArrays(realValues, imagValues);\n    }\n\n    return this.data.get(dataId).values;\n  }\n\n  bufferSync<R extends Rank>(t: TensorInfo): TensorBuffer<R> {\n    const data = this.readSync(t.dataId);\n    let decodedData = data as DataValues;\n    if (t.dtype === 'string') {\n      try {\n        // Decode the bytes into string.\n        decodedData = (data as Uint8Array[]).map(d => util.decodeString(d));\n      } catch {\n        throw new Error('Failed to decode encoded string bytes into utf-8');\n      }\n    }\n    return buffer(t.shape as ShapeMap[R], t.dtype, decodedData) as\n        TensorBuffer<R>;\n  }\n\n  makeOutput<T extends Tensor>(\n      values: backend_util.BackendValues, shape: number[], dtype: DataType): T {\n    const dataId = this.write(values, shape, dtype);\n    return engine().makeTensorFromDataId(dataId, shape, dtype, this) as T;\n  }\n\n  /**\n   * Dispose the memory if the dataId has 0 refCount. Return true if the memory\n   * is released or memory is not managed in this backend, false if memory is\n   * not cleared.\n   * @param dataId\n   * @oaram force Optional, remove the data regardless of refCount\n   */\n  disposeData(dataId: DataId, force = false): boolean {\n    if (this.data.has(dataId)) {\n      this.data.get(dataId).refCount--;\n      if (!force && this.data.get(dataId).refCount > 0) {\n        return false;\n      }\n\n      const {complexTensorInfos} = this.data.get(dataId);\n\n      if (complexTensorInfos != null) {\n        this.disposeData(complexTensorInfos.real.dataId, true);\n        this.disposeData(complexTensorInfos.imag.dataId, true);\n      }\n\n      this.data.delete(dataId);\n    }\n    return true;\n  }\n\n  disposeIntermediateTensorInfo(tensorInfo: TensorInfo): void {\n    this.disposeData(tensorInfo.dataId);\n  }\n\n  async time(f: () => void): Promise<BackendTimingInfo> {\n    const start = util.now();\n    f();\n    const kernelMs = util.now() - start;\n    return {kernelMs};\n  }\n\n  memory() {\n    return {\n      // Unreliable due to automatic gc. The numbers above are cumulative.\n      unreliable: true,\n      reasons:\n          ['The reported memory is an upper bound. Due to automatic garbage ' +\n           'collection, the true allocated memory may be less.']\n    };\n  }\n\n  where(condition: Tensor): Tensor2D {\n    assertNotComplex([condition], 'where');\n\n    const condVals = this.readSync(condition.dataId) as TypedArray;\n    return whereImpl(condition.shape, condVals);\n  }\n\n  dispose() {}\n\n  floatPrecision(): 16|32 {\n    return 32;\n  }\n\n  /** Returns the smallest representable number.  */\n  epsilon(): number {\n    return super.epsilon();\n  }\n}\n", "/** @license See the LICENSE file. */\n\n// This code is auto-generated, do not modify this file!\nconst version = '3.9.0';\nexport {version};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// We explicitly import the modular kernels so they get registered in the\n// global registry when we compile the library. A modular build would replace\n// the contents of this file and import only the kernels that are needed.\nimport { KernelConfig, registerKernel } from '@tensorflow/tfjs-core';\n\nimport {_fusedMatMulConfig} from './kernels/_FusedMatMul';\nimport {absConfig} from './kernels/Abs';\nimport {acosConfig} from './kernels/Acos';\nimport {acoshConfig} from './kernels/Acosh';\nimport {addConfig} from './kernels/Add';\nimport {addNConfig} from './kernels/AddN';\nimport {allConfig} from './kernels/All';\nimport {anyConfig} from './kernels/Any';\nimport {argMaxConfig} from './kernels/ArgMax';\nimport {argMinConfig} from './kernels/ArgMin';\nimport {asinConfig} from './kernels/Asin';\nimport {asinhConfig} from './kernels/Asinh';\nimport {atanConfig} from './kernels/Atan';\nimport {atan2Config} from './kernels/Atan2';\nimport {atanhConfig} from './kernels/Atanh';\nimport {avgPoolConfig} from './kernels/AvgPool';\nimport {avgPool3DConfig} from './kernels/AvgPool3D';\nimport {avgPool3DGradConfig} from './kernels/AvgPool3DGrad';\nimport {avgPoolGradConfig} from './kernels/AvgPoolGrad';\nimport {batchMatMulConfig} from './kernels/BatchMatMul';\nimport {batchNormConfig} from './kernels/BatchNorm';\nimport {batchToSpaceNDConfig} from './kernels/BatchToSpaceND';\nimport {bincountConfig} from './kernels/Bincount';\nimport {broadcastArgsConfig} from './kernels/BroadcastArgs';\nimport {castConfig} from './kernels/Cast';\nimport {ceilConfig} from './kernels/Ceil';\nimport {clipConfig} from './kernels/Clip';\nimport {complexConfig} from './kernels/Complex';\nimport {complexAbsConfig} from './kernels/ComplexAbs';\nimport {concatConfig} from './kernels/Concat';\nimport {conv2DConfig} from './kernels/Conv2D';\nimport {conv2DBackpropFilterConfig} from './kernels/Conv2DBackpropFilter';\nimport {conv2DBackpropInputConfig} from './kernels/Conv2DBackpropInput';\nimport {conv3DConfig} from './kernels/Conv3D';\nimport {conv3DBackpropFilterV2Config} from './kernels/Conv3DBackpropFilterV2';\nimport {conv3DBackpropInputV2Config} from './kernels/Conv3DBackpropInputV2';\nimport {cosConfig} from './kernels/Cos';\nimport {coshConfig} from './kernels/Cosh';\nimport {cropAndResizeConfig} from './kernels/CropAndResize';\nimport {cumsumConfig} from './kernels/Cumsum';\nimport {denseBincountConfig} from './kernels/DenseBincount';\nimport {depthToSpaceConfig} from './kernels/DepthToSpace';\nimport {depthwiseConv2dNativeConfig} from './kernels/DepthwiseConv2dNative';\nimport {depthwiseConv2dNativeBackpropFilterConfig} from './kernels/DepthwiseConv2dNativeBackpropFilter';\nimport {depthwiseConv2dNativeBackpropInputConfig} from './kernels/DepthwiseConv2dNativeBackpropInput';\nimport {diagConfig} from './kernels/Diag';\nimport {dilation2dConfig} from './kernels/Dilation2D';\nimport {dilation2dBackpropFilterConfig} from './kernels/Dilation2DBackpropFilter';\nimport {dilation2dBackpropInputConfig} from './kernels/Dilation2DBackpropInput';\nimport {einsumConfig} from './kernels/Einsum';\nimport {eluConfig} from './kernels/Elu';\nimport {eluGradConfig} from './kernels/EluGrad';\nimport {equalConfig} from './kernels/Equal';\nimport {erfConfig} from './kernels/Erf';\nimport {expConfig} from './kernels/Exp';\nimport {expandDimsConfig} from './kernels/ExpandDims';\nimport {expm1Config} from './kernels/Expm1';\nimport {fftConfig} from './kernels/FFT';\nimport {fillConfig} from './kernels/Fill';\nimport {flipLeftRightConfig} from './kernels/FlipLeftRight';\nimport {floorConfig} from './kernels/Floor';\nimport {floorDivConfig} from './kernels/FloorDiv';\nimport {fusedConv2DConfig} from './kernels/FusedConv2D';\nimport {fusedDepthwiseConv2DConfig} from './kernels/FusedDepthwiseConv2D';\nimport {gatherNdConfig} from './kernels/GatherNd';\nimport {gatherV2Config} from './kernels/GatherV2';\nimport {greaterConfig} from './kernels/Greater';\nimport {greaterEqualConfig} from './kernels/GreaterEqual';\nimport {identityConfig} from './kernels/Identity';\nimport {ifftConfig} from './kernels/IFFT';\nimport {imagConfig} from './kernels/Imag';\nimport {isFiniteConfig} from './kernels/IsFinite';\nimport {isInfConfig} from './kernels/IsInf';\nimport {isNaNConfig} from './kernels/IsNaN';\nimport {leakyReluConfig} from './kernels/LeakyRelu';\nimport {lessConfig} from './kernels/Less';\nimport {lessEqualConfig} from './kernels/LessEqual';\nimport {linSpaceConfig} from './kernels/LinSpace';\nimport {logConfig} from './kernels/Log';\nimport {log1pConfig} from './kernels/Log1p';\nimport {logicalAndConfig} from './kernels/LogicalAnd';\nimport {logicalNotConfig} from './kernels/LogicalNot';\nimport {logicalOrConfig} from './kernels/LogicalOr';\nimport {lRNConfig} from './kernels/LRN';\nimport {lRNGradConfig} from './kernels/LRNGrad';\nimport {maxConfig} from './kernels/Max';\nimport {maximumConfig} from './kernels/Maximum';\nimport {maxPoolConfig} from './kernels/MaxPool';\nimport {maxPool3DConfig} from './kernels/MaxPool3D';\nimport {maxPool3DGradConfig} from './kernels/MaxPool3DGrad';\nimport {maxPoolGradConfig} from './kernels/MaxPoolGrad';\nimport {maxPoolWithArgmaxConfig} from './kernels/MaxPoolWithArgmax';\nimport {meanConfig} from './kernels/Mean';\nimport {minConfig} from './kernels/Min';\nimport {minimumConfig} from './kernels/Minimum';\nimport {mirrorPadConfig} from './kernels/MirrorPad';\nimport {modConfig} from './kernels/Mod';\nimport {multinomialConfig} from './kernels/Multinomial';\nimport {multiplyConfig} from './kernels/Multiply';\nimport {negConfig} from './kernels/Neg';\nimport {nonMaxSuppressionV3Config} from './kernels/NonMaxSuppressionV3';\nimport {nonMaxSuppressionV4Config} from './kernels/NonMaxSuppressionV4';\nimport {nonMaxSuppressionV5Config} from './kernels/NonMaxSuppressionV5';\nimport {notEqualConfig} from './kernels/NotEqual';\nimport {oneHotConfig} from './kernels/OneHot';\nimport {onesLikeConfig} from './kernels/OnesLike';\nimport {packConfig} from './kernels/Pack';\nimport {padV2Config} from './kernels/PadV2';\nimport {powConfig} from './kernels/Pow';\nimport {preluConfig} from './kernels/Prelu';\nimport {prodConfig} from './kernels/Prod';\nimport {rangeConfig} from './kernels/Range';\nimport {realConfig} from './kernels/Real';\nimport {realDivConfig} from './kernels/RealDiv';\nimport {reciprocalConfig} from './kernels/Reciprocal';\nimport {reluConfig} from './kernels/Relu';\nimport {relu6Config} from './kernels/Relu6';\nimport {reshapeConfig} from './kernels/Reshape';\nimport {resizeBilinearConfig} from './kernels/ResizeBilinear';\nimport {resizeBilinearGradConfig} from './kernels/ResizeBilinearGrad';\nimport {resizeNearestNeighborConfig} from './kernels/ResizeNearestNeighbor';\nimport {resizeNearestNeighborGradConfig} from './kernels/ResizeNearestNeighborGrad';\nimport {reverseConfig} from './kernels/Reverse';\nimport {rotateWithOffsetConfig} from './kernels/RotateWithOffset';\nimport {roundConfig} from './kernels/Round';\nimport {rsqrtConfig} from './kernels/Rsqrt';\nimport {scatterNdConfig} from './kernels/ScatterNd';\nimport {selectConfig} from './kernels/Select';\nimport {seluConfig} from './kernels/Selu';\nimport {sigmoidConfig} from './kernels/Sigmoid';\nimport {signConfig} from './kernels/Sign';\nimport {sinConfig} from './kernels/Sin';\nimport {sinhConfig} from './kernels/Sinh';\nimport {sliceConfig} from './kernels/Slice';\nimport {softmaxConfig} from './kernels/Softmax';\nimport {softplusConfig} from './kernels/Softplus';\nimport {spaceToBatchNDConfig} from './kernels/SpaceToBatchND';\nimport {sparseFillEmptyRowsConfig} from './kernels/SparseFillEmptyRows';\nimport {sparseReshapeConfig} from './kernels/SparseReshape';\nimport {sparseSegmentMeanConfig} from './kernels/SparseSegmentMean';\nimport {sparseSegmentSumConfig} from './kernels/SparseSegmentSum';\nimport {sparseToDenseConfig} from './kernels/SparseToDense';\nimport {splitVConfig} from './kernels/SplitV';\nimport {sqrtConfig} from './kernels/Sqrt';\nimport {squareConfig} from './kernels/Square';\nimport {squaredDifferenceConfig} from './kernels/SquaredDifference';\nimport {stepConfig} from './kernels/Step';\nimport {stridedSliceConfig} from './kernels/StridedSlice';\nimport {stringNGramsConfig} from './kernels/StringNGrams';\nimport {stringSplitConfig} from './kernels/StringSplit';\nimport {stringToHashBucketFastConfig} from './kernels/StringToHashBucketFast';\nimport {subConfig} from './kernels/Sub';\nimport {sumConfig} from './kernels/Sum';\nimport {tanConfig} from './kernels/Tan';\nimport {tanhConfig} from './kernels/Tanh';\nimport {tileConfig} from './kernels/Tile';\nimport {topKConfig} from './kernels/TopK';\nimport {transformConfig} from './kernels/Transform';\nimport {transposeConfig} from './kernels/Transpose';\nimport {uniqueConfig} from './kernels/Unique';\nimport {unpackConfig} from './kernels/Unpack';\nimport {unsortedSegmentSumConfig} from './kernels/UnsortedSegmentSum';\nimport {zerosLikeConfig} from './kernels/ZerosLike';\n\n// List all kernel configs here\nconst kernelConfigs: KernelConfig[] = [\n  _fusedMatMulConfig,\n  absConfig,\n  acosConfig,\n  acoshConfig,\n  addConfig,\n  addNConfig,\n  allConfig,\n  anyConfig,\n  argMaxConfig,\n  argMinConfig,\n  asinConfig,\n  asinhConfig,\n  atanConfig,\n  atan2Config,\n  atanhConfig,\n  avgPoolConfig,\n  avgPool3DConfig,\n  avgPool3DGradConfig,\n  avgPoolGradConfig,\n  batchMatMulConfig,\n  batchNormConfig,\n  batchToSpaceNDConfig,\n  bincountConfig,\n  broadcastArgsConfig,\n  castConfig,\n  ceilConfig,\n  clipConfig,\n  complexConfig,\n  complexAbsConfig,\n  concatConfig,\n  conv2DBackpropFilterConfig,\n  conv2DBackpropInputConfig,\n  conv2DConfig,\n  conv3DBackpropFilterV2Config,\n  conv3DBackpropInputV2Config,\n  conv3DConfig,\n  cosConfig,\n  coshConfig,\n  cropAndResizeConfig,\n  cumsumConfig,\n  denseBincountConfig,\n  depthToSpaceConfig,\n  depthwiseConv2dNativeConfig,\n  depthwiseConv2dNativeBackpropFilterConfig,\n  depthwiseConv2dNativeBackpropInputConfig,\n  diagConfig,\n  dilation2dConfig,\n  dilation2dBackpropInputConfig,\n  dilation2dBackpropFilterConfig,\n  realDivConfig,\n  einsumConfig,\n  eluConfig,\n  eluGradConfig,\n  equalConfig,\n  erfConfig,\n  expConfig,\n  expandDimsConfig,\n  expm1Config,\n  fftConfig,\n  fillConfig,\n  flipLeftRightConfig,\n  floorConfig,\n  floorDivConfig,\n  fusedConv2DConfig,\n  fusedDepthwiseConv2DConfig,\n  gatherNdConfig,\n  gatherV2Config,\n  greaterConfig,\n  greaterEqualConfig,\n  identityConfig,\n  ifftConfig,\n  imagConfig,\n  isFiniteConfig,\n  isInfConfig,\n  isNaNConfig,\n  leakyReluConfig,\n  lessConfig,\n  lessEqualConfig,\n  linSpaceConfig,\n  logConfig,\n  log1pConfig,\n  logicalAndConfig,\n  logicalNotConfig,\n  logicalOrConfig,\n  lRNConfig,\n  lRNGradConfig,\n  maximumConfig,\n  maxPoolConfig,\n  maxPool3DConfig,\n  maxPool3DGradConfig,\n  maxPoolGradConfig,\n  maxPoolWithArgmaxConfig,\n  maxConfig,\n  meanConfig,\n  minConfig,\n  minimumConfig,\n  mirrorPadConfig,\n  modConfig,\n  multinomialConfig,\n  multiplyConfig,\n  negConfig,\n  nonMaxSuppressionV3Config,\n  nonMaxSuppressionV4Config,\n  nonMaxSuppressionV5Config,\n  notEqualConfig,\n  oneHotConfig,\n  onesLikeConfig,\n  packConfig,\n  padV2Config,\n  powConfig,\n  preluConfig,\n  prodConfig,\n  rangeConfig,\n  realConfig,\n  reciprocalConfig,\n  reluConfig,\n  relu6Config,\n  reshapeConfig,\n  resizeBilinearConfig,\n  resizeBilinearGradConfig,\n  resizeNearestNeighborConfig,\n  resizeNearestNeighborGradConfig,\n  reverseConfig,\n  rotateWithOffsetConfig,\n  roundConfig,\n  rsqrtConfig,\n  scatterNdConfig,\n  selectConfig,\n  seluConfig,\n  sigmoidConfig,\n  signConfig,\n  sinConfig,\n  sinhConfig,\n  sliceConfig,\n  softmaxConfig,\n  softplusConfig,\n  spaceToBatchNDConfig,\n  sparseFillEmptyRowsConfig,\n  sparseReshapeConfig,\n  sparseSegmentMeanConfig,\n  sparseSegmentSumConfig,\n  sparseToDenseConfig,\n  splitVConfig,\n  sqrtConfig,\n  squareConfig,\n  squaredDifferenceConfig,\n  stepConfig,\n  stridedSliceConfig,\n  stringNGramsConfig,\n  stringSplitConfig,\n  stringToHashBucketFastConfig,\n  subConfig,\n  sumConfig,\n  tanConfig,\n  tanhConfig,\n  tileConfig,\n  topKConfig,\n  transposeConfig,\n  transformConfig,\n  uniqueConfig,\n  unpackConfig,\n  unsortedSegmentSumConfig,\n  zerosLikeConfig\n];\n\nfor (const kernelConfig of kernelConfigs) {\n  registerKernel(kernelConfig);\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {_FusedMatMul, _FusedMatMulAttrs, _FusedMatMulInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {applyActivation} from '../utils/fused_utils';\n\nimport {add} from './Add';\nimport {batchMatMul} from './BatchMatMul';\n\nexport function _fusedMatMul(args: {\n  inputs: _FusedMatMulInputs,\n  attrs: _FusedMatMulAttrs,\n  backend: MathBackendCPU\n}) {\n  const {inputs, backend, attrs} = args;\n  const {a, b, bias, preluActivationWeights} = inputs;\n  const {transposeA, transposeB, activation, leakyreluAlpha} = attrs;\n\n  let current;\n  let addRes;\n  let activationRes;\n\n  const intermediates: TensorInfo[] = [];\n\n  const matMulRes =\n      batchMatMul({inputs: {a, b}, attrs: {transposeA, transposeB}, backend});\n  current = matMulRes;\n\n  if (bias) {\n    addRes = add({inputs: {a: current, b: bias}, backend}) as TensorInfo;\n    intermediates.push(current);\n    current = addRes;\n  }\n  if (activation) {\n    activationRes = applyActivation(\n        backend, current, activation, preluActivationWeights, leakyreluAlpha);\n    intermediates.push(current);\n    current = activationRes;\n  }\n\n  for (const i of intermediates) {\n    backend.disposeIntermediateTensorInfo(i);\n  }\n\n  return current;\n}\n\nexport const _fusedMatMulConfig: KernelConfig = {\n  kernelName: _FusedMatMul,\n  backendName: 'cpu',\n  kernelFunc: _fusedMatMul as {} as KernelFunc,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Elu, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const elu =\n    unaryKernelFunc(Elu, (xi) => xi >= 0 ? xi : (Math.exp(xi) - 1));\n\nexport const eluConfig: KernelConfig = {\n  kernelName: Elu,\n  backendName: 'cpu',\n  kernelFunc: elu,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LeakyRelu, LeakyReluAttrs, LeakyReluInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function leakyRelu(args: {\n  inputs: LeakyReluInputs,\n  backend: MathBackendCPU,\n  attrs: LeakyReluAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {alpha} = attrs;\n\n  assertNotComplex([x], 'leakyRelu');\n\n  const xSize = util.sizeFromShape(x.shape);\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const outVals = util.getTypedArrayFromDType('float32', xSize);\n\n  for (let i = 0; i < xVals.length; i++) {\n    outVals[i] = xVals[i] < 0 ? alpha * xVals[i] : xVals[i];\n  }\n\n  return backend.makeTensorInfo(x.shape, 'float32', outVals);\n}\n\nexport const leakyReluConfig: KernelConfig = {\n  kernelName: LeakyRelu,\n  backendName: 'cpu',\n  kernelFunc: leakyRelu as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Prelu, PreluInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\n\nconst preluImpl = createSimpleBinaryKernelImpl(\n    (xValue: number, aValue: number) => xValue < 0 ? aValue * xValue : xValue);\n\nexport function prelu(args: {inputs: PreluInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x, alpha} = inputs;\n\n  assertNotComplex([x, alpha], 'prelu');\n\n  const aVals = backend.data.get(x.dataId).values as TypedArray;\n  const bVals = backend.data.get(alpha.dataId).values as TypedArray;\n\n  const [resultData, resultShape] =\n      preluImpl(x.shape, alpha.shape, aVals, bVals, x.dtype);\n\n  return backend.makeTensorInfo(resultShape, x.dtype, resultData);\n}\n\nexport const preluConfig: KernelConfig = {\n  kernelName: Prelu,\n  backendName: 'cpu',\n  kernelFunc: prelu,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Relu} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const relu = unaryKernelFunc(Relu, (xi) => Math.max(0, xi));\n\nexport const reluConfig: KernelConfig = {\n  kernelName: Relu,\n  backendName: 'cpu',\n  kernelFunc: relu,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Relu6} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const relu6 =\n    unaryKernelFunc(Relu6, (xi) => Math.min(Math.max(0, xi), 6));\n\nexport const relu6Config: KernelConfig = {\n  kernelName: Relu6,\n  backendName: 'cpu',\n  kernelFunc: relu6,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {_FusedMatMul, _FusedMatMulAttrs, _FusedMatMulInputs, backend_util, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {elu} from '../kernels/Elu';\nimport {identity} from '../kernels/Identity';\nimport {leakyRelu} from '../kernels/LeakyRelu';\nimport {prelu} from '../kernels/Prelu';\nimport {relu} from '../kernels/Relu';\nimport {relu6} from '../kernels/Relu6';\nimport {sigmoid} from '../kernels/Sigmoid';\n\nexport function applyActivation(\n    backend: MathBackendCPU, x: TensorInfo, activation: backend_util.Activation,\n    preluActivationWeights?: TensorInfo, leakyreluAlpha?: number): TensorInfo {\n  if (activation === 'linear') {\n    return identity({inputs: {x}, backend});\n  } else if (activation === 'relu') {\n    return relu({inputs: {x}, backend}) as TensorInfo;\n  } else if (activation === 'elu') {\n    return elu({inputs: {x}, backend}) as TensorInfo;\n  } else if (activation === 'relu6') {\n    return relu6({inputs: {x}, backend}) as TensorInfo;\n  } else if (activation === 'prelu') {\n    return prelu({inputs: {x, alpha: preluActivationWeights}, backend});\n  } else if (activation === 'leakyrelu') {\n    return leakyRelu({inputs: {x}, backend, attrs: {alpha: leakyreluAlpha}});\n  } else if (activation === 'sigmoid') {\n    return sigmoid({inputs: {x}, backend}) as TensorInfo;\n  }\n  throw new Error(\n      `Activation ${activation} has not been implemented for the CPU backend.`);\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BatchMatMul, BatchMatMulAttrs, BatchMatMulInputs, buffer, KernelConfig, KernelFunc, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {reshape} from './Reshape';\n\nexport function batchMatMul(args: {\n  inputs: BatchMatMulInputs,\n  attrs: BatchMatMulAttrs,\n  backend: MathBackendCPU\n}) {\n  const {inputs, backend, attrs} = args;\n  const {a, b} = inputs;\n  const {transposeA, transposeB} = attrs;\n\n  assertNotComplex([a, b], 'matMul');\n\n  const aRank = a.shape.length;\n  const bRank = b.shape.length;\n\n  const innerShapeA = transposeA ? a.shape[aRank - 2] : a.shape[aRank - 1];\n  const innerShapeB = transposeB ? b.shape[bRank - 1] : b.shape[bRank - 2];\n\n  const outerShapeA = transposeA ? a.shape[aRank - 1] : a.shape[aRank - 2];\n  const outerShapeB = transposeB ? b.shape[bRank - 2] : b.shape[bRank - 1];\n\n  const outerDimsA = a.shape.slice(0, -2);\n  const outerDimsB = b.shape.slice(0, -2);\n\n  const batchDimA = util.sizeFromShape(outerDimsA);\n  const batchDimB = util.sizeFromShape(outerDimsB);\n\n  const batchDimsCompatible =\n      batchDimA === batchDimB || batchDimA === 1 || batchDimB === 1;\n\n  util.assert(\n      aRank >= 2 && bRank >= 2 && batchDimsCompatible,\n      () => `Error in matMul: the input batch dimensions must either be the ` +\n          `same or at least one input batch dimension must be 1. Got input ` +\n          `batch dimensions of (${outerDimsA}) and (${outerDimsB}).`);\n\n  const outShapeOuterDims =\n      batchDimA > batchDimB ? a.shape.slice(0, -2) : b.shape.slice(0, -2);\n  const outShape = outShapeOuterDims.concat([outerShapeA, outerShapeB]);\n\n  util.assert(\n      innerShapeA === innerShapeB,\n      () => `Error in matMul: inner shapes (${innerShapeA}) and (` +\n          `${innerShapeB}) of Tensors with shapes ${a.shape} and ` +\n          `${b.shape} and transposeA=${transposeA}` +\n          ` and transposeB=${transposeB} must match.`);\n\n  const a3dShape = transposeA ? [batchDimA, innerShapeA, outerShapeA] :\n                                [batchDimA, outerShapeA, innerShapeA];\n  const b3dShape = transposeB ? [batchDimB, outerShapeB, innerShapeB] :\n                                [batchDimB, innerShapeB, outerShapeB];\n\n  // The rest of the implementation is designed to operate on rank-3 tensors\n  const a3d = reshape({inputs: {x: a}, backend, attrs: {shape: a3dShape}});\n  const b3d = reshape({inputs: {x: b}, backend, attrs: {shape: b3dShape}});\n\n  const sharedDim = transposeA ? a3d.shape[1] : a3d.shape[2];\n  const leftDim = transposeA ? a3d.shape[2] : a3d.shape[1];\n  const rightDim = transposeB ? b3d.shape[1] : b3d.shape[2];\n  const batchDim = Math.max(batchDimA, batchDimB);\n\n  const a3dValues = backend.data.get(a3d.dataId).values as TypedArray;\n  const b3dValues = backend.data.get(b3d.dataId).values as TypedArray;\n\n  const a3dStrides = util.computeStrides(a3d.shape);\n  const b3dStrides = util.computeStrides(b3d.shape);\n\n  const [aBatch, aOuterStep, aInnerStep] = transposeA ?\n      [a3dStrides[0], 1, a3dStrides[1]] :\n      [a3dStrides[0], a3dStrides[1], 1];\n  const [bInnerStep, bOuterStep, bBatch] = transposeB ?\n      [1, b3dStrides[1], b3dStrides[0]] :\n      [b3dStrides[1], 1, b3dStrides[0]];\n\n  const size = leftDim * rightDim;\n  const result = buffer([batchDim, leftDim, rightDim], a3d.dtype);\n\n  const resVals = result.values as TypedArray;\n  const blockSize = backend.blockSize;\n\n  for (let bi = 0; bi < batchDim; bi++) {\n    for (let i0 = 0; i0 < leftDim; i0 += blockSize) {\n      for (let j0 = 0; j0 < rightDim; j0 += blockSize) {\n        for (let k0 = 0; k0 < sharedDim; k0 += blockSize) {\n          // for when blockSize doesn't evenly divide the input\n          const iBlock = Math.min(i0 + blockSize, leftDim);\n          const jBlock = Math.min(j0 + blockSize, rightDim);\n          const kBlock = Math.min(k0 + blockSize, sharedDim);\n\n          for (let i = i0; i < iBlock; i++) {\n            for (let j = j0; j < jBlock; j++) {\n              let sum = 0.0;\n\n              for (let k = k0; k < kBlock; k++) {\n                const batchOffsetA = Math.min(bi, batchDimA - 1) * aBatch;\n                const batchOffsetB = Math.min(bi, batchDimB - 1) * bBatch;\n                const aVal =\n                    a3dValues[batchOffsetA + i * aOuterStep + k * aInnerStep];\n                const bVal =\n                    b3dValues[k * bInnerStep + j * bOuterStep + batchOffsetB];\n                sum += aVal * bVal;\n              }\n              resVals[bi * size + (i * rightDim + j)] += sum;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  backend.disposeIntermediateTensorInfo(a3d);\n  backend.disposeIntermediateTensorInfo(b3d);\n\n  // set correct shape on output.\n  return backend.makeTensorInfo(\n      outShape, result.dtype, result.values as TypedArray);\n}\n\nexport const batchMatMulConfig: KernelConfig = {\n  kernelName: BatchMatMul,\n  backendName: 'cpu',\n  kernelFunc: batchMatMul as {} as KernelFunc,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Reshape, ReshapeAttrs, ReshapeInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function reshape(\n    args:\n        {inputs: ReshapeInputs, backend: MathBackendCPU, attrs: ReshapeAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {shape} = attrs;\n\n  const xSize = util.sizeFromShape(x.shape);\n  const $shape = util.inferFromImplicitShape(shape, xSize);\n  const $xSize = util.sizeFromShape($shape);\n\n  util.assert(\n      xSize === $xSize,\n      () => `The new shape (${$shape}) has ${$xSize} elements and the old ` +\n          `shape (${x.shape}) has ${xSize} elements. The new shape and old ` +\n          `shape must have the same number of elements.`);\n\n  backend.incRef(x.dataId);\n\n  const xData = backend.data.get(x.dataId);\n\n  if (xData.complexTensorInfos != null) {\n    const real = xData.complexTensorInfos.real;\n    const imag = xData.complexTensorInfos.imag;\n\n    real.shape = $shape;\n    imag.shape = $shape;\n  }\n\n  return {dataId: x.dataId, shape: $shape, dtype: x.dtype};\n}\n\nexport const reshapeConfig: KernelConfig = {\n  kernelName: Reshape,\n  backendName: 'cpu',\n  kernelFunc: reshape as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Acos, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const acos = unaryKernelFunc(Acos, (xi) => Math.acos(xi));\n\nexport const acosConfig: KernelConfig = {\n  kernelName: Acos,\n  backendName: 'cpu',\n  kernelFunc: acos,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Acosh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const acosh = unaryKernelFunc(Acosh, (xi) => Math.acosh(xi));\n\nexport const acoshConfig: KernelConfig = {\n  kernelName: Acosh,\n  backendName: 'cpu',\n  kernelFunc: acosh,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AddN, AddNInputs, buffer, KernelConfig, KernelFunc, Tensor, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function addN(args: {inputs: AddNInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const tensors = inputs as Tensor[];\n\n  assertNotComplex(inputs, 'addN');\n\n  const vals =\n      tensors.map(t => backend.data.get(t.dataId).values as TypedArray);\n  const outBuf = buffer(tensors[0].shape, tensors[0].dtype as 'float32');\n  const outVals = outBuf.values;\n  for (let i = 0; i < tensors.length; i++) {\n    const currVals = vals[i];\n    for (let j = 0; j < outVals.length; j++) {\n      outVals[j] += currVals[j];\n    }\n  }\n\n  return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n}\n\nexport const addNConfig: KernelConfig = {\n  kernelName: AddN,\n  backendName: 'cpu',\n  kernelFunc: addN as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {All, AllAttrs, AllInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function all(\n    args: {inputs: AllInputs, backend: MathBackendCPU, attrs: AllAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'all');\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('all', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const vals = util.makeZerosTypedArray(util.sizeFromShape(outShape), $x.dtype);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let all = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      all = all && value;\n    }\n    vals[i] = all;\n  }\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo($x);\n  }\n\n  const result = backend.makeTensorInfo(outShape, $x.dtype, vals);\n\n  if (keepDims) {\n    const expandedShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    const reshapedResult =\n        reshape({inputs: {x: result}, backend, attrs: {shape: expandedShape}});\n\n    backend.disposeIntermediateTensorInfo(result);\n\n    return reshapedResult;\n  }\n\n  return result;\n}\n\nexport const allConfig: KernelConfig = {\n  kernelName: All,\n  backendName: 'cpu',\n  kernelFunc: all as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Any, AnyAttrs, AnyInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function any(\n    args: {inputs: AnyInputs, backend: MathBackendCPU, attrs: AnyAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'any');\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('any', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const vals = util.makeZerosTypedArray(util.sizeFromShape(outShape), $x.dtype);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let anyVal = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      anyVal = anyVal || value;\n    }\n    vals[i] = anyVal;\n  }\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo($x);\n  }\n\n  const result = backend.makeTensorInfo(outShape, $x.dtype, vals);\n\n  if (keepDims) {\n    const expandedShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    const reshapedResult =\n        reshape({inputs: {x: result}, backend, attrs: {shape: expandedShape}});\n\n    backend.disposeIntermediateTensorInfo(result);\n\n    return reshapedResult;\n  }\n\n  return result;\n}\n\nexport const anyConfig: KernelConfig = {\n  kernelName: Any,\n  backendName: 'cpu',\n  kernelFunc: any as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ArgMax, ArgMaxAttrs, ArgMaxInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function argMax(\n    args: {inputs: ArgMaxInputs, backend: MathBackendCPU, attrs: ArgMaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis} = attrs;\n\n  assertNotComplex(x, 'argMax');\n\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n\n  axes = [axes[0]];\n  backend_util.assertAxesAreInnerMostDims('argMax', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n\n  const outSize = util.sizeFromShape(outShape);\n  const vals = util.makeZerosTypedArray(outSize, 'int32');\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let max = aVals[offset];\n    let maxIndex = 0;\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (value > max) {\n        max = value;\n        maxIndex = j;\n      }\n    }\n    vals[i] = maxIndex;\n  }\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return backend.makeTensorInfo(outShape, 'int32', vals);\n}\n\nexport const argMaxConfig: KernelConfig = {\n  kernelName: ArgMax,\n  backendName: 'cpu',\n  kernelFunc: argMax as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ArgMin, ArgMinAttrs, ArgMinInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function argMin(\n    args: {inputs: ArgMinInputs, backend: MathBackendCPU, attrs: ArgMinAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis} = attrs;\n\n  assertNotComplex(x, 'argMin');\n\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n\n  axes = [axes[0]];\n  backend_util.assertAxesAreInnerMostDims('argMin', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n\n  const outSize = util.sizeFromShape(outShape);\n  const vals = util.makeZerosTypedArray(outSize, 'int32');\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let min = aVals[offset];\n    let minIndex = 0;\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (value < min) {\n        min = value;\n        minIndex = j;\n      }\n    }\n    vals[i] = minIndex;\n  }\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return backend.makeTensorInfo(outShape, 'int32', vals);\n}\n\nexport const argMinConfig: KernelConfig = {\n  kernelName: ArgMin,\n  backendName: 'cpu',\n  kernelFunc: argMin as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Asin, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const asin = unaryKernelFunc(Asin, (xi) => Math.asin(xi));\n\nexport const asinConfig: KernelConfig = {\n  kernelName: Asin,\n  backendName: 'cpu',\n  kernelFunc: asin,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Asinh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const asinh = unaryKernelFunc(Asinh, (xi) => Math.asinh(xi));\n\nexport const asinhConfig: KernelConfig = {\n  kernelName: Asinh,\n  backendName: 'cpu',\n  kernelFunc: asinh,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atan, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const atan = unaryKernelFunc(Atan, (xi) => Math.atan(xi));\n\nexport const atanConfig: KernelConfig = {\n  kernelName: Atan,\n  backendName: 'cpu',\n  kernelFunc: atan,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atan2, KernelConfig} from '@tensorflow/tfjs-core';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const atan2Impl = createSimpleBinaryKernelImpl(\n    (aValue, bValue) => Math.atan2(aValue as number, bValue as number));\n\nexport const atan2 = binaryKernelFunc(Atan2, atan2Impl);\n\nexport const atan2Config: KernelConfig = {\n  kernelName: Atan2,\n  backendName: 'cpu',\n  kernelFunc: atan2,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atanh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const atanh = unaryKernelFunc(Atanh, (xi) => Math.atanh(xi));\n\nexport const atanhConfig: KernelConfig = {\n  kernelName: Atanh,\n  backendName: 'cpu',\n  kernelFunc: atanh,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPool, AvgPoolAttrs, AvgPoolInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {pool} from '../utils/pool_utils';\nimport {identity} from './Identity';\n\nexport function avgPool(\n    args:\n        {inputs: AvgPoolInputs, backend: MathBackendCPU, attrs: AvgPoolAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  assertNotComplex(x, 'avgPool');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations = 1;\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in avgPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  let res: TensorInfo;\n\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n      util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    res = identity({inputs: {x}, backend});\n  } else {\n    const xValues = backend.data.get(x.dataId).values as TypedArray;\n    const strides = util.computeStrides(x.shape);\n    const buffer = pool(xValues, x.shape, x.dtype, strides, convInfo, 'avg');\n    res = backend.makeTensorInfo(\n        convInfo.outShape, x.dtype, buffer.values as TypedArray);\n  }\n  return res;\n}\n\nexport const avgPoolConfig: KernelConfig = {\n  kernelName: AvgPool,\n  backendName: 'cpu',\n  kernelFunc: avgPool as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, buffer, DataType, Rank, TensorBuffer, TypedArray} from '@tensorflow/tfjs-core';\n\nexport function pool(\n    xValues: TypedArray, xShape: number[], dtype: DataType, strides: number[],\n    convInfo: backend_util.Conv2DInfo,\n    poolType: 'max'|'avg'): TensorBuffer<Rank, DataType> {\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  const initialValue =\n      (poolType === 'max' ? Number.NEGATIVE_INFINITY :\n                            Number.POSITIVE_INFINITY);\n\n  const output = buffer(convInfo.outShape, dtype);\n  const outputVals = output.values;\n\n  const outputBatchStrides =\n      convInfo.outShape[1] * convInfo.outShape[2] * convInfo.outShape[3];\n  const outputRowStrides = convInfo.outShape[2] * convInfo.outShape[3];\n  const outputColStrides = convInfo.outShape[3];\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const outputBatchOffset = b * outputBatchStrides;\n    const inputBatchOffset = b * strides[0];\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n        const xRCorner = yR * strideHeight - padTop;\n        const xRMin = Math.max(0, xRCorner);\n        const xRMax =\n            Math.min(convInfo.inHeight, effectiveFilterHeight + xRCorner);\n        const outputRowOffset = outputBatchOffset + yR * outputRowStrides;\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const xCCorner = yC * strideWidth - padLeft;\n          const xCMin = Math.max(0, xCCorner);\n          const xCMax =\n              Math.min(convInfo.inWidth, effectiveFilterWidth + xCCorner);\n          let minMaxValue = initialValue;\n          let avgValue = 0;\n          let count = 0;\n          for (let xR = xRMin; xR < xRMax; xR += dilationHeight) {\n            const xROffset = inputBatchOffset + xR * strides[1];\n            for (let xC = xCMin; xC < xCMax; xC += dilationWidth) {\n              const xCOffset = xROffset + xC * strides[2];\n              const pixel = xValues[xCOffset + d];\n              if ((poolType === 'max' && pixel > minMaxValue)) {\n                minMaxValue = pixel;\n              } else if (poolType === 'avg') {\n                avgValue += pixel;\n                count++;\n              }\n            }\n            if (isNaN(minMaxValue)) {\n              break;\n            }\n          }\n          const outputOffset = outputRowOffset + yC * outputColStrides + d;\n          outputVals[outputOffset] =\n              poolType === 'avg' ? avgValue / count : minMaxValue;\n        }\n      }\n    }\n  }\n  return output;\n}\n\nexport function maxPoolPositions(\n    xValues: TypedArray, xShape: number[], dtype: DataType,\n    convInfo: backend_util.Conv2DInfo, flattenPositions = false,\n    includeBatchInIndex = false): TensorBuffer<Rank, 'int32'> {\n  const maxPositions = buffer(convInfo.outShape, 'int32');\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  const xBuf = buffer(xShape, dtype, xValues);\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n        const xRCorner = yR * strideHeight - padTop;\n        let xRMin = xRCorner;\n        while (xRMin < 0) {\n          xRMin += dilationHeight;\n        }\n        // const xRMin = Math.max(0, xRCorner);\n        const xRMax =\n            Math.min(convInfo.inHeight, effectiveFilterHeight + xRCorner);\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const xCCorner = yC * strideWidth - padLeft;\n          let xCMin = xCCorner;\n          while (xCMin < 0) {\n            xCMin += dilationWidth;\n          }\n          const xCMax =\n              Math.min(convInfo.inWidth, effectiveFilterWidth + xCCorner);\n          let maxValue = Number.NEGATIVE_INFINITY;\n          let maxPosition = -1;\n\n          for (let xR = xRMin; xR < xRMax; xR += dilationHeight) {\n            const wR = xR - xRCorner;\n            for (let xC = xCMin; xC < xCMax; xC += dilationWidth) {\n              const wC = xC - xCCorner;\n              const pixel = xBuf.get(b, xR, xC, d);\n              if (pixel > maxValue) {\n                maxValue = pixel as number;\n                if (flattenPositions) {\n                  maxPosition = includeBatchInIndex ?\n                      ((b * convInfo.inHeight + xR) * convInfo.inWidth + xC) *\n                              convInfo.inChannels +\n                          d :\n                      (xR * convInfo.inWidth + xC) * convInfo.inChannels + d;\n                } else {\n                  maxPosition = wR * effectiveFilterWidth + wC;\n                }\n              }\n            }\n          }\n          maxPositions.set(maxPosition, b, yR, yC, d);\n        }\n      }\n    }\n  }\n  return maxPositions;\n}\n\nexport function pool3d(\n    xValues: TypedArray, xShape: number[], dtype: DataType, strides: number[],\n    convInfo: backend_util.Conv3DInfo,\n    poolType: 'max'|'avg'): TensorBuffer<Rank, DataType> {\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = convInfo.padInfo.front;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  const initialValue =\n      (poolType === 'max' ? Number.NEGATIVE_INFINITY :\n                            Number.POSITIVE_INFINITY);\n\n  const output = buffer(convInfo.outShape, dtype);\n  const outputVals = output.values;\n\n  const outputBatchStrides = convInfo.outShape[1] * convInfo.outShape[2] *\n      convInfo.outShape[3] * convInfo.outShape[4];\n  const outputDepthStrides =\n      convInfo.outShape[2] * convInfo.outShape[3] * convInfo.outShape[4];\n  const outputRowStrides = convInfo.outShape[3] * convInfo.outShape[4];\n  const outputColStrides = convInfo.outShape[4];\n\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    const outputBatchOffset = batch * outputBatchStrides;\n    const inputBatchOffset = batch * strides[0];\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let yDepth = 0; yDepth < convInfo.outDepth; ++yDepth) {\n        const xDepthCorner = yDepth * strideDepth - padFront;\n        let xDepthMin = xDepthCorner;\n        while (xDepthMin < 0) {\n          xDepthMin += dilationDepth;\n        }\n        const xDepthMax =\n            Math.min(convInfo.inDepth, effectiveFilterDepth + xDepthCorner);\n        const outputDepthOffset =\n            outputBatchOffset + yDepth * outputDepthStrides;\n        for (let yRow = 0; yRow < convInfo.outHeight; ++yRow) {\n          const xRowCorner = yRow * strideHeight - padTop;\n          let xRowMin = xRowCorner;\n          while (xRowMin < 0) {\n            xRowMin += dilationHeight;\n          }\n          const xRowMax =\n              Math.min(convInfo.inHeight, effectiveFilterHeight + xRowCorner);\n          const outputRowOffset = outputDepthOffset + yRow * outputRowStrides;\n          for (let yCol = 0; yCol < convInfo.outWidth; ++yCol) {\n            const xColCorner = yCol * strideWidth - padLeft;\n            let xColMin = xColCorner;\n            while (xColMin < 0) {\n              xColMin += dilationWidth;\n            }\n            const xColMax =\n                Math.min(convInfo.inWidth, effectiveFilterWidth + xColCorner);\n            // Shader code begins\n            const outputColOffset = outputRowOffset + yCol * outputColStrides;\n            let minMaxValue = initialValue;\n            let avgValue = 0;\n            let count = 0;\n            for (let xDepth = xDepthMin; xDepth < xDepthMax;\n                 xDepth += dilationDepth) {\n              const xDepthOffset = inputBatchOffset + xDepth * strides[1];\n              for (let xRow = xRowMin; xRow < xRowMax; xRow += dilationHeight) {\n                const xRowOffset = xDepthOffset + xRow * strides[2];\n                for (let xCol = xColMin; xCol < xColMax;\n                     xCol += dilationWidth) {\n                  const xColOffset = xRowOffset + xCol * strides[3];\n                  const pixel = xValues[xColOffset + channel];\n                  if ((poolType === 'max' && pixel > minMaxValue)) {\n                    minMaxValue = pixel;\n                  } else if (poolType === 'avg') {\n                    avgValue += pixel;\n                    count++;\n                  }\n                  if (isNaN(minMaxValue)) {\n                    break;\n                  }\n                }\n                if (isNaN(minMaxValue)) {\n                  break;\n                }\n              }\n              if (isNaN(minMaxValue)) {\n                break;\n              }\n            }\n            const outputOffset = outputColOffset + channel;\n            outputVals[outputOffset] =\n                poolType === 'avg' ? avgValue / count : minMaxValue;\n          }\n        }\n      }\n    }\n  }\n\n  return output;\n}\n\nexport function maxPool3dPositions(\n    xBuf: TensorBuffer<Rank, DataType>,\n    convInfo: backend_util.Conv3DInfo): TensorBuffer<Rank, DataType> {\n  const maxPositions = buffer(convInfo.outShape, 'int32');\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = convInfo.padInfo.front;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let yDepth = 0; yDepth < convInfo.outDepth; ++yDepth) {\n        const xDepthCorner = yDepth * strideDepth - padFront;\n        let xDepthMin = xDepthCorner;\n        while (xDepthMin < 0) {\n          xDepthMin += dilationDepth;\n        }\n        const xDepthMax =\n            Math.min(convInfo.inDepth, effectiveFilterDepth + xDepthCorner);\n        for (let yRow = 0; yRow < convInfo.outHeight; ++yRow) {\n          const xRowCorner = yRow * strideHeight - padTop;\n          let xRowMin = xRowCorner;\n          while (xRowMin < 0) {\n            xRowMin += dilationHeight;\n          }\n          const xRowMax =\n              Math.min(convInfo.inHeight, effectiveFilterHeight + xRowCorner);\n          for (let yCol = 0; yCol < convInfo.outWidth; ++yCol) {\n            const xColCorner = yCol * strideWidth - padLeft;\n            let xColMin = xColCorner;\n            while (xColMin < 0) {\n              xColMin += dilationWidth;\n            }\n            const xColMax =\n                Math.min(convInfo.inWidth, effectiveFilterWidth + xColCorner);\n\n            // Shader code begins\n            let maxValue = Number.NEGATIVE_INFINITY;\n            let maxPosition = -1;\n\n            for (let xDepth = xDepthMin; xDepth < xDepthMax;\n                 xDepth += dilationDepth) {\n              const wDepth = xDepth - xDepthCorner;\n              for (let xRow = xRowMin; xRow < xRowMax; xRow += dilationHeight) {\n                const wRow = xRow - xRowCorner;\n                for (let xCol = xColMin; xCol < xColMax;\n                     xCol += dilationWidth) {\n                  const wCol = xCol - xColCorner;\n                  const pixel = xBuf.get(batch, xDepth, xRow, xCol, channel);\n                  if (pixel >= maxValue) {\n                    maxValue = pixel as number;\n                    maxPosition =\n                        wDepth * effectiveFilterHeight * effectiveFilterWidth +\n                        wRow * effectiveFilterHeight + wCol;\n                  }\n                }\n              }\n            }\n\n            maxPositions.set(maxPosition, batch, yDepth, yRow, yCol, channel);\n          }\n        }\n      }\n    }\n  }\n\n  return maxPositions;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AvgPool3D, AvgPool3DAttrs, AvgPool3DInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {pool3d} from '../utils/pool_utils';\n\nexport function avgPool3D(args: {\n  inputs: AvgPool3DInputs,\n  backend: MathBackendCPU,\n  attrs: AvgPool3DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode, dataFormat} = attrs;\n\n  assertNotComplex(x, 'avgPool3d');\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad, dimRoundingMode, dataFormat);\n\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const outBuf = pool3d(\n      xValues, x.shape, x.dtype, util.computeStrides(x.shape), convInfo, 'avg');\n\n  return backend.makeTensorInfo(outBuf.shape, 'float32', outBuf.values);\n}\n\nexport const avgPool3DConfig: KernelConfig = {\n  kernelName: AvgPool3D,\n  backendName: 'cpu',\n  kernelFunc: avgPool3D as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AvgPool3DGrad, AvgPool3DGradAttrs, AvgPool3DGradInputs, backend_util, buffer, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function avgPool3DGrad(args: {\n  inputs: AvgPool3DGradInputs,\n  backend: MathBackendCPU,\n  attrs: AvgPool3DGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n\n  assertNotComplex([dy, input], 'avgPool3DGrad');\n\n  const convInfo = backend_util.computePool3DInfo(\n      input.shape as [number, number, number, number, number], filterSize,\n      strides, 1 /* dilations */, pad, dimRoundingMode);\n\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const filterDepth = convInfo.filterDepth;\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx = buffer(input.shape, 'float32');\n\n  const avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);\n\n  const dyBuf = backend.bufferSync(dy);\n\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth) {\n        for (let dxRow = 0; dxRow < convInfo.inHeight; ++dxRow) {\n          for (let dxCol = 0; dxCol < convInfo.inWidth; ++dxCol) {\n            // Shader code begins.\n            const dyDepthCorner = dxDepth - padFront;\n            const dyRowCorner = dxRow - padTop;\n            const dyColCorner = dxCol - padLeft;\n            let dotProd = 0;\n            for (let wDepth = 0; wDepth < effectiveFilterDepth;\n                 wDepth += dilationDepth) {\n              const dyDepth = (dyDepthCorner + wDepth) / strideDepth;\n              if (dyDepth < 0 || dyDepth >= convInfo.outDepth ||\n                  Math.floor(dyDepth) !== dyDepth) {\n                continue;\n              }\n              for (let wRow = 0; wRow < effectiveFilterHeight;\n                   wRow += dilationHeight) {\n                const dyRow = (dyRowCorner + wRow) / strideHeight;\n                if (dyRow < 0 || dyRow >= convInfo.outHeight ||\n                    Math.floor(dyRow) !== dyRow) {\n                  continue;\n                }\n                for (let wCol = 0; wCol < effectiveFilterWidth;\n                     wCol += dilationWidth) {\n                  const dyCol = (dyColCorner + wCol) / strideWidth;\n                  if (dyCol < 0 || dyCol >= convInfo.outWidth ||\n                      Math.floor(dyCol) !== dyCol) {\n                    continue;\n                  }\n\n                  const pixel =\n                      dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                  dotProd += pixel;\n                }\n              }\n            }\n            dx.set(\n                dotProd * avgMultiplier, batch, dxDepth, dxRow, dxCol, channel);\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const avgPool3DGradConfig: KernelConfig = {\n  kernelName: AvgPool3DGrad,\n  backendName: 'cpu',\n  kernelFunc: avgPool3DGrad as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPoolGrad, AvgPoolGradAttrs, AvgPoolGradInputs, backend_util, buffer, KernelConfig, KernelFunc, Rank, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function avgPoolGrad(args: {\n  inputs: AvgPoolGradInputs,\n  backend: MathBackendCPU,\n  attrs: AvgPoolGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const x = input;\n  assertNotComplex([dy, input], 'avgPoolGrad');\n  const {filterSize, strides, pad} = attrs;\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad);\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx =\n      buffer<Rank.R4>(x.shape as [number, number, number, number], 'float32');\n\n  const avgMultiplier = 1 / (filterHeight * filterWidth);\n\n  const dyData = backend.data.get(dy.dataId).values as Float32Array;\n  const dyBuf = buffer<Rank.R4>(\n      dy.shape as [number, number, number, number], 'float32', dyData);\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let dxR = 0; dxR < convInfo.inHeight; ++dxR) {\n        for (let dxC = 0; dxC < convInfo.inWidth; ++dxC) {\n          // Shader code begins.\n          const dyRCorner = dxR - padTop;\n          const dyCCorner = dxC - padLeft;\n          let dotProd = 0;\n          for (let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight) {\n            const dyR = (dyRCorner + wR) / strideHeight;\n            if (dyR < 0 || dyR >= convInfo.outHeight ||\n                Math.floor(dyR) !== dyR) {\n              continue;\n            }\n            for (let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth) {\n              const dyC = (dyCCorner + wC) / strideWidth;\n              if (dyC < 0 || dyC >= convInfo.outWidth ||\n                  Math.floor(dyC) !== dyC) {\n                continue;\n              }\n\n              const pixel = dyBuf.get(b, dyR, dyC, d);\n              dotProd += pixel;\n            }\n          }\n          dx.set(dotProd * avgMultiplier, b, dxR, dxC, d);\n        }\n      }\n    }\n  }\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const avgPoolGradConfig: KernelConfig = {\n  kernelName: AvgPoolGrad,\n  backendName: 'cpu',\n  kernelFunc: avgPoolGrad as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FusedBatchNorm, FusedBatchNormAttrs, FusedBatchNormInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function batchNorm(args: {\n  inputs: FusedBatchNormInputs,\n  backend: MathBackendCPU,\n  attrs: FusedBatchNormAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, scale, offset, mean, variance} = inputs;\n\n  util.assert(\n      mean.shape.length === variance.shape.length,\n      () => 'Batch normalization gradient requires mean and variance to have ' +\n          'equal ranks.');\n  util.assert(\n      offset == null || mean.shape.length === offset.shape.length,\n      () => 'Batch normalization gradient requires mean and offset to have ' +\n          'equal ranks.');\n  util.assert(\n      scale == null || mean.shape.length === scale.shape.length,\n      () => 'Batch normalization gradient requires mean and scale to have ' +\n          'equal ranks.');\n\n  assertNotComplex([x, mean, variance, scale, offset], 'batchNorm');\n\n  let {varianceEpsilon} = attrs;\n  if (varianceEpsilon == null) {\n    varianceEpsilon = 0.001;\n  }\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const mVals = backend.data.get(mean.dataId).values as TypedArray;\n  const varVals = backend.data.get(variance.dataId).values as TypedArray;\n  const sVals = scale ? backend.data.get(scale.dataId).values as TypedArray :\n                        new Float32Array([1]);\n  const offVals = offset ?\n      backend.data.get(offset.dataId).values as TypedArray :\n      new Float32Array([0]);\n  const outVals = new Float32Array(xVals.length);\n\n  const offValsLength = offVals.length;\n  const sValsLength = sVals.length;\n  const varValsLength = varVals.length;\n  const mValsLength = mVals.length;\n\n  let offi = 0;\n  let mi = 0;\n  let si = 0;\n  let vi = 0;\n  for (let i = 0; i < xVals.length; ++i) {\n    outVals[i] = offVals[offi++] +\n        (xVals[i] - mVals[mi++]) * sVals[si++] /\n            Math.sqrt(varVals[vi++] + varianceEpsilon);\n    if (offi >= offValsLength) {\n      offi = 0;\n    }\n    if (mi >= mValsLength) {\n      mi = 0;\n    }\n    if (si >= sValsLength) {\n      si = 0;\n    }\n    if (vi >= varValsLength) {\n      vi = 0;\n    }\n  }\n  return backend.makeTensorInfo(x.shape, x.dtype, outVals);\n}\n\nexport const batchNormConfig: KernelConfig = {\n  kernelName: FusedBatchNorm,\n  backendName: 'cpu',\n  kernelFunc: batchNorm as {} as KernelFunc,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BatchToSpaceND, BatchToSpaceNDAttrs, BatchToSpaceNDInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\nimport {transpose} from './Transpose';\n\nexport function batchToSpaceND(args: {\n  inputs: BatchToSpaceNDInputs,\n  backend: MathBackendCPU,\n  attrs: BatchToSpaceNDAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, crops} = attrs;\n\n  assertNotComplex([x], 'batchToSpaceND');\n\n  const prod = blockShape.reduce((a, b) => a * b);\n\n  const reshaped = backend_util.getReshaped(x.shape, blockShape, prod);\n  const permuted = backend_util.getPermuted(reshaped.length, blockShape.length);\n  const reshapedPermuted =\n      backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n  const sliceBeginCoords =\n      backend_util.getSliceBeginCoords(crops, blockShape.length);\n  const sliceSize =\n      backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n\n  const xReshaped = reshape({inputs: {x}, backend, attrs: {shape: reshaped}});\n  const xTransposed =\n      transpose({inputs: {x: xReshaped}, backend, attrs: {perm: permuted}});\n  const xTransposedReshaped = reshape(\n      {inputs: {x: xTransposed}, backend, attrs: {shape: reshapedPermuted}});\n  const result = slice({\n    inputs: {x: xTransposedReshaped},\n    backend,\n    attrs: {begin: sliceBeginCoords, size: sliceSize}\n  });\n\n  backend.disposeIntermediateTensorInfo(xReshaped);\n  backend.disposeIntermediateTensorInfo(xTransposed);\n  backend.disposeIntermediateTensorInfo(xTransposedReshaped);\n\n  return result;\n}\n\nexport const batchToSpaceNDConfig: KernelConfig = {\n  kernelName: BatchToSpaceND,\n  backendName: 'cpu',\n  kernelFunc: batchToSpaceND as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Bincount, BincountAttrs, BincountInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {bincountImpl} from './Bincount_impl';\n\nexport function bincount(args: {\n  inputs: BincountInputs,\n  backend: MathBackendCPU,\n  attrs: BincountAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, weights} = inputs;\n  const {size} = attrs;\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const weightsVals = backend.data.get(weights.dataId).values as TypedArray;\n\n  const outVals =\n      bincountImpl(xVals, weightsVals, weights.dtype, weights.shape, size);\n\n  return backend.makeTensorInfo([size], weights.dtype, outVals);\n}\n\nexport const bincountConfig: KernelConfig = {\n  kernelName: Bincount,\n  backendName: 'cpu',\n  kernelFunc: bincount as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BroadcastArgs, BroadcastArgsInputs, KernelConfig, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function broadcastArgs(args: {\n  inputs: BroadcastArgsInputs,\n  backend: MathBackendCPU,\n}): TensorInfo {\n  const {inputs, backend} = args;\n  const {s0, s1} = inputs;\n\n  const s0Vals = backend.data.get(s0.dataId).values as TypedArray;\n  const s1Vals = backend.data.get(s1.dataId).values as TypedArray;\n\n  const broadcastShape = backend_util.assertAndGetBroadcastShape(\n      Array.from(s0Vals), Array.from(s1Vals));\n\n  return backend.makeTensorInfo(\n      [broadcastShape.length], 'int32', Int32Array.from(broadcastShape));\n}\n\nexport const broadcastArgsConfig: KernelConfig = {\n  kernelName: BroadcastArgs,\n  backendName: 'cpu',\n  kernelFunc: broadcastArgs\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ClipByValue, ClipByValueAttrs, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const clip = unaryKernelFunc(ClipByValue, (xi, attrs) => {\n  const clipAttrs = attrs as {} as ClipByValueAttrs;\n  if (xi > clipAttrs.clipValueMax) {\n    return clipAttrs.clipValueMax;\n  }\n  return xi < clipAttrs.clipValueMin ? clipAttrs.clipValueMin : xi;\n});\n\nexport const clipConfig: KernelConfig = {\n  kernelName: ClipByValue,\n  backendName: 'cpu',\n  kernelFunc: clip,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ComplexAbs, ComplexAbsInputs, KernelConfig, KernelFunc, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const complexAbs =\n    (args: {inputs: ComplexAbsInputs, backend: MathBackendCPU}) => {\n      const {x} = args.inputs;\n      const cpuBackend = args.backend;\n      const resultValues = new Float32Array(util.sizeFromShape(x.shape));\n      const complexVals = cpuBackend.data.get(x.dataId);\n      const real = complexVals.complexTensorInfos.real;\n      const imag = complexVals.complexTensorInfos.imag;\n      const realVals = cpuBackend.data.get(real.dataId).values as Float32Array;\n      const imagVals = cpuBackend.data.get(imag.dataId).values as Float32Array;\n      for (let i = 0; i < realVals.length; i++) {\n        const real = realVals[i];\n        const imag = imagVals[i];\n        resultValues[i] = Math.hypot(real, imag);\n      }\n\n      return cpuBackend.makeOutput(resultValues, x.shape, 'float32');\n    };\n\nexport const complexAbsConfig: KernelConfig = {\n  kernelName: ComplexAbs,\n  backendName: 'cpu',\n  kernelFunc: complexAbs as {} as KernelFunc,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Concat, ConcatAttrs, ConcatInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {complex} from './Complex';\nimport {concatImpl} from './Concat_impl';\nimport {identity} from './Identity';\nimport {imag} from './Imag';\nimport {real} from './Real';\nimport {reshape} from './Reshape';\n\nexport function concat(\n    args: {inputs: ConcatInputs, backend: MathBackendCPU, attrs: ConcatAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {axis} = attrs;\n\n  const $axis = util.parseAxisParam(axis, inputs[0].shape)[0];\n  let outShape = backend_util.computeOutShape(inputs.map(t => t.shape), $axis);\n\n  if (util.sizeFromShape(outShape) === 0) {\n    return backend.makeTensorInfo(outShape, inputs[0].dtype, []);\n  }\n\n  // Keep only non-empty tensors (ignore tensors with 0 in their shape).\n  const $inputs = inputs.filter(t => util.sizeFromShape(t.shape) > 0);\n  if ($inputs.length === 1) {\n    return identity({inputs: {x: $inputs[0]}, backend});\n  }\n\n  const shapes = $inputs.map(t => t.shape);\n  backend_util.assertParamsConsistent(shapes, $axis);\n\n  if ($inputs[0].dtype === 'complex64') {\n    const reals = $inputs.map((t) => real({inputs: {input: t}, backend}));\n    const imags = $inputs.map((t) => imag({inputs: {input: t}, backend}));\n\n    const realConcated = concat({inputs: reals, backend, attrs: {axis: $axis}});\n    const imagConcated = concat({inputs: imags, backend, attrs: {axis: $axis}});\n\n    const result =\n        complex({inputs: {real: realConcated, imag: imagConcated}, backend});\n\n    reals.forEach(r => backend.disposeIntermediateTensorInfo(r));\n    imags.forEach(i => backend.disposeIntermediateTensorInfo(i));\n    backend.disposeIntermediateTensorInfo(realConcated);\n    backend.disposeIntermediateTensorInfo(imagConcated);\n\n    return result;\n  }\n\n  // Any concat of n-dimensional tensors across any axis can be reduced to\n  // a concatenation of two-dimensional tensors across the axis 1 by first\n  // partitioning the axes of the original tensors into those less than the\n  // axis to be concatenated and the rest. Then reshape the tensors\n  // into a two-dimensional tensor by collapsing these two sets of axes and\n  // concatenate the resulting matrices across the axis 1, finally reshaping\n  // the result to have the proper shape.\n  const inputs2D = $inputs.map(t => {\n    const innerSize = util.sizeFromShape(t.shape.slice($axis));\n    const shape = [-1, innerSize];\n    return reshape({inputs: {x: t}, backend, attrs: {shape}});\n  });\n\n  const inputsValShapes = inputs2D.map(t => {\n    return {vals: backend.data.get(t.dataId).values, shape: t.shape};\n  });\n\n  // Concats 2d tensors along axis=1.\n  outShape =\n      backend_util.computeOutShape(inputs2D.map(t => t.shape), 1 /* axis */);\n  const simplyConcat = inputs2D[0].shape[0] === 1;\n  const outVals =\n      concatImpl(inputsValShapes, outShape, inputs[0].dtype, simplyConcat);\n\n  const finalOutShape =\n      backend_util.computeOutShape($inputs.map(t => t.shape), $axis);\n\n  const outInfo =\n      backend.makeTensorInfo(finalOutShape, inputs[0].dtype, outVals);\n\n  inputs2D.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return outInfo;\n}\n\nexport const concatConfig: KernelConfig = {\n  kernelName: Concat,\n  backendName: 'cpu',\n  kernelFunc: concat as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Imag, ImagInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function imag(args: {inputs: ImagInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  const imag = backend.data.get(input.dataId).complexTensorInfos.imag;\n  const imagVal = backend.data.get(imag.dataId).values;\n\n  // When complex tensor is disposed, its underlying parts will be disposed too.\n  // Make new tensor out of the imag value of the complex. This makes sure the\n  // value is still accessible even if complex tensor is disposed.\n  return backend.makeTensorInfo(imag.shape, imag.dtype, imagVal);\n}\n\nexport const imagConfig: KernelConfig = {\n  kernelName: Imag,\n  backendName: 'cpu',\n  kernelFunc: imag as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2D, Conv2DAttrs, Conv2DInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv2D(\n    args: {inputs: Conv2DInputs, backend: MathBackendCPU, attrs: Conv2DAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dataFormat, dilations, dimRoundingMode} = attrs;\n\n  assertNotComplex([x, filter], 'conv2d');\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, dilations, pad,\n      dimRoundingMode, false /* depthwise */, $dataFormat);\n\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const padLeft = convInfo.padInfo.left;\n  const padTop = convInfo.padInfo.top;\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n  const y = new TensorBuffer(convInfo.outShape, x.dtype as 'float32');\n\n  const xStrides = util.computeStrides(x.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  const xBatchStride = xStrides[0];\n  const xRowStride = isChannelsLast ? xStrides[1] : xStrides[2];\n  const xColStride = isChannelsLast ? xStrides[2] : 1;\n  const xChannelStride = isChannelsLast ? 1 : xStrides[1];\n  const yBatchStride = y.strides[0];\n  const yRowStride = isChannelsLast ? y.strides[1] : y.strides[2];\n  const yColStride = isChannelsLast ? y.strides[2] : 1;\n  const yChannelStride = isChannelsLast ? 1 : y.strides[1];\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const wVals = backend.data.get(filter.dataId).values as TypedArray;\n  const yVals = y.values;\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const xOffset1 = b * xBatchStride;\n    const yOffset1 = b * yBatchStride;\n    for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n      const yOffset2 = yOffset1 + yR * yRowStride;\n      const xRCorner = yR * convInfo.strideHeight - padTop;\n      for (let wR = 0; wR < filterHeight; ++wR) {\n        const xR = xRCorner + wR * dilationHeight;\n        if (xR < 0 || xR >= convInfo.inHeight) {\n          continue;\n        }\n        const wOffset1 = wR * filterStrides[0];\n        const xOffset2 = xOffset1 + xR * xRowStride;\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const yOffset3 = yOffset2 + yC * yColStride;\n          const xCCorner = yC * convInfo.strideWidth - padLeft;\n          for (let wC = 0; wC < filterWidth; ++wC) {\n            const xC = xCCorner + wC * dilationWidth;\n            if (xC < 0 || xC >= convInfo.inWidth) {\n              continue;\n            }\n            const wOffset2 = wOffset1 + wC * filterStrides[1];\n            const xOffset3 = xOffset2 + xC * xColStride;\n            let wOffset3 = wOffset2;\n            for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n              const xVal = xVals[xOffset3 + d1 * xChannelStride];\n              for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                yVals[yOffset3 + d2 * yChannelStride] +=\n                    xVal * wVals[wOffset3 + d2];\n              }\n              wOffset3 += convInfo.outChannels;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, y.dtype, yVals);\n}\n\nexport const conv2DConfig: KernelConfig = {\n  kernelName: Conv2D,\n  backendName: 'cpu',\n  kernelFunc: conv2D as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2DBackpropFilter, Conv2DBackpropFilterAttrs, Conv2DBackpropFilterInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv2DBackpropFilter(args: {\n  inputs: Conv2DBackpropFilterInputs,\n  backend: MathBackendCPU,\n  attrs: Conv2DBackpropFilterAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, pad, dataFormat, dimRoundingMode, filterShape} = attrs;\n\n  assertNotComplex([x, dy], 'conv2dBackpropFilter');\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number], filterShape, strides,\n      1 /* dilations */, pad, dimRoundingMode, false /* depthwise */,\n      $dataFormat);\n\n  const {strideHeight, strideWidth, filterHeight, filterWidth} = convInfo;\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n  const dW = new TensorBuffer(convInfo.filterShape, 'float32');\n\n  const leftPad = convInfo.padInfo.left;\n  const topPad = convInfo.padInfo.top;\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const dyVals = backend.data.get(dy.dataId).values as TypedArray;\n\n  const xBuf = new TensorBuffer(x.shape, x.dtype, xVals);\n  const dyBuf = new TensorBuffer(dy.shape, dy.dtype, dyVals);\n\n  for (let wR = 0; wR < filterHeight; ++wR) {\n    const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n    const yRMax = Math.min(\n        convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n\n    for (let wC = 0; wC < filterWidth; ++wC) {\n      const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n      const yCMax = Math.min(\n          convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n\n      for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n        for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n          let dotProd = 0;\n          for (let b = 0; b < convInfo.batchSize; ++b) {\n            for (let yR = yRMin; yR < yRMax; ++yR) {\n              const xR = wR + yR * strideHeight - topPad;\n              for (let yC = yCMin; yC < yCMax; ++yC) {\n                const xC = wC + yC * strideWidth - leftPad;\n                if (isChannelsLast) {\n                  dotProd += (xBuf.get(b, xR, xC, d1) as number) *\n                      (dyBuf.get(b, yR, yC, d2) as number);\n                } else {\n                  dotProd += (xBuf.get(b, d1, xR, xC) as number) *\n                      (dyBuf.get(b, d2, yR, yC) as number);\n                }\n              }\n            }\n          }\n          dW.set(dotProd, wR, wC, d1, d2);\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dW.shape, dW.dtype, dW.values);\n}\n\nexport const conv2DBackpropFilterConfig: KernelConfig = {\n  kernelName: Conv2DBackpropFilter,\n  backendName: 'cpu',\n  kernelFunc: conv2DBackpropFilter as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2DBackpropInput, Conv2DBackpropInputAttrs, Conv2DBackpropInputInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv2DBackpropInput(args: {\n  inputs: Conv2DBackpropInputInputs,\n  backend: MathBackendCPU,\n  attrs: Conv2DBackpropInputAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {inputShape, strides, pad, dataFormat, dimRoundingMode} = attrs;\n\n  assertNotComplex([dy, filter], 'conv2dBackpropInput');\n\n  const filterStrides = util.computeStrides(filter.shape);\n  const dyStrides = util.computeStrides(dy.shape);\n\n  let $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      inputShape, filter.shape as [number, number, number, number], strides,\n      1 /* dilations */, pad, dimRoundingMode, false, $dataFormat);\n\n  const dx = new TensorBuffer(convInfo.inShape, 'float32');\n  const dxValues = dx.values;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const fltValues = backend.data.get(filter.dataId).values as TypedArray;\n  const [fltS0, fltS1, fltS2] = filterStrides;\n  const {\n    batchSize,\n    filterHeight,\n    filterWidth,\n    inChannels,\n    inHeight,\n    inWidth,\n    outChannels,\n    outHeight,\n    outWidth,\n    strideHeight,\n    strideWidth\n  } = convInfo;\n  $dataFormat = convInfo.dataFormat;\n  const topPad = filterHeight - 1 - convInfo.padInfo.top;\n  const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n\n  const isChannelsLast = $dataFormat === 'channelsLast';\n  const xBatchStride = dx.strides[0];\n  const xRowStride = isChannelsLast ? dx.strides[1] : dx.strides[2];\n  const xColStride = isChannelsLast ? dx.strides[2] : 1;\n  const xChannelStride = isChannelsLast ? 1 : dx.strides[1];\n  const yBatchStride = dyStrides[0];\n  const yRowStride = isChannelsLast ? dyStrides[1] : dyStrides[2];\n  const yColStride = isChannelsLast ? dyStrides[2] : 1;\n  const yChannelStride = isChannelsLast ? 1 : dyStrides[1];\n\n  for (let b = 0; b < batchSize; ++b) {\n    for (let d1 = 0; d1 < inChannels; ++d1) {\n      for (let xR = 0; xR < inHeight; ++xR) {\n        const xRCorner = xR - topPad;\n        const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n        const yRMax =\n            Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n\n        for (let xC = 0; xC < inWidth; ++xC) {\n          const xCCorner = xC - leftPad;\n          const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n          const yCMax =\n              Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n\n          let dotProd = 0;\n          for (let yR = xRMin; yR < yRMax; ++yR) {\n            const wR = yR * strideHeight - xRCorner;\n\n            for (let yC = xCMin; yC < yCMax; ++yC) {\n              const wC = yC * strideWidth - xCCorner;\n              const dyOffset =\n                  yBatchStride * b + yRowStride * yR + yColStride * yC;\n              const fltOffset = fltS0 * (filterHeight - 1 - wR) +\n                  fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n\n              for (let d2 = 0; d2 < outChannels; ++d2) {\n                const pixel = dyValues[dyOffset + yChannelStride * d2];\n                const weight = fltValues[fltOffset + d2];\n                dotProd += pixel * weight;\n              }\n            }\n          }\n          const dxOffset = xBatchStride * b + xRowStride * xR +\n              xColStride * xC + xChannelStride * d1;\n          dxValues[dxOffset] = dotProd;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const conv2DBackpropInputConfig: KernelConfig = {\n  kernelName: Conv2DBackpropInput,\n  backendName: 'cpu',\n  kernelFunc: conv2DBackpropInput as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3D, Conv3DAttrs, Conv3DInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv3D(\n    args: {inputs: Conv3DInputs, backend: MathBackendCPU, attrs: Conv3DAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations} = attrs;\n\n  assertNotComplex([x, filter], 'conv3d');\n\n  const convInfo = backend_util.computeConv3DInfo(\n      x.shape as [number, number, number, number, number],\n      filter.shape as [number, number, number, number, number], strides,\n      dilations, pad);\n\n  const {\n    filterDepth,\n    filterHeight,\n    filterWidth,\n    dilationDepth,\n    dilationHeight,\n    dilationWidth,\n    padInfo\n  } = convInfo;\n  const padFront = padInfo.front;\n  const padLeft = padInfo.left;\n  const padTop = padInfo.top;\n  const y = new TensorBuffer(convInfo.outShape, x.dtype as 'float32');\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const wVals = backend.data.get(filter.dataId).values as TypedArray;\n  const yVals = y.values;\n\n  const xStrides = util.computeStrides(x.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const xOffset1 = b * xStrides[0];\n    const yOffset1 = b * y.strides[0];\n    for (let yF = 0; yF < convInfo.outDepth; ++yF) {\n      const yOffset2 = yOffset1 + yF * y.strides[1];\n      const xFCorner = yF * convInfo.strideDepth - padFront;\n      for (let wF = 0; wF < filterDepth; ++wF) {\n        const xF = xFCorner + wF * dilationDepth;\n        if (xF < 0 || xF >= convInfo.inDepth) {\n          continue;\n        }\n        const wOffset1 = wF * filterStrides[0];\n        const xOffset2 = xOffset1 + xF * xStrides[1];\n\n        for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n          const yOffset3 = yOffset2 + yR * y.strides[2];\n          const xRCorner = yR * convInfo.strideHeight - padTop;\n          for (let wR = 0; wR < filterHeight; ++wR) {\n            const xR = xRCorner + wR * dilationHeight;\n            if (xR < 0 || xR >= convInfo.inHeight) {\n              continue;\n            }\n            const wOffset2 = wOffset1 + wR * filterStrides[1];\n            const xOffset3 = xOffset2 + xR * xStrides[2];\n            for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n              const yOffset4 = yOffset3 + yC * convInfo.outChannels;\n              const xCCorner = yC * convInfo.strideWidth - padLeft;\n              for (let wC = 0; wC < filterWidth; ++wC) {\n                const xC = xCCorner + wC * dilationWidth;\n                if (xC < 0 || xC >= convInfo.inWidth) {\n                  continue;\n                }\n                const wOffset3 = wOffset2 + wC * filterStrides[2];\n                const xOffset4 = xOffset3 + xC * convInfo.inChannels;\n                let wOffset4 = wOffset3;\n                for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                  const xVal = xVals[xOffset4 + d1];\n                  for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                    yVals[yOffset4 + d2] += xVal * wVals[wOffset4 + d2];\n                  }\n                  wOffset4 += convInfo.outChannels;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, y.dtype, y.values);\n}\n\nexport const conv3DConfig: KernelConfig = {\n  kernelName: Conv3D,\n  backendName: 'cpu',\n  kernelFunc: conv3D as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3DBackpropFilterV2, Conv3DBackpropFilterV2Attrs, Conv3DBackpropFilterV2Inputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv3DBackpropFilterV2(args: {\n  inputs: Conv3DBackpropFilterV2Inputs,\n  backend: MathBackendCPU,\n  attrs: Conv3DBackpropFilterV2Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, pad, filterShape} = attrs;\n\n  assertNotComplex([x, dy], 'conv3dBackpropFilterV2');\n\n  const xStrides = util.computeStrides(x.shape);\n  const dyStrides = util.computeStrides(dy.shape);\n\n  const convInfo = backend_util.computeConv3DInfo(\n      x.shape as [number, number, number, number, number], filterShape, strides,\n      1 /* dilations */, pad);\n\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const filterDepth = convInfo.filterDepth;\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n\n  const dw = new TensorBuffer(convInfo.filterShape, 'float32');\n  const dwValues = dw.values;\n  const [dwS0, dwS1, dwS2, dwS3] = dw.strides;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const [dyS0, dyS1, dyS2, dyS3] = dyStrides;\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const [xS0, xS1, xS2, xS3] = xStrides;\n\n  const frontPad = convInfo.padInfo.front;\n  const leftPad = convInfo.padInfo.left;\n  const topPad = convInfo.padInfo.top;\n\n  for (let wF = 0; wF < filterDepth; ++wF) {\n    const yFMin = Math.max(0, Math.ceil((frontPad - wF) / strideDepth));\n    const yFMax = Math.min(\n        convInfo.outDepth, (convInfo.inDepth + frontPad - wF) / strideDepth);\n    const wOffset1 = wF * dwS0;\n\n    for (let wR = 0; wR < filterHeight; ++wR) {\n      const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n      const yRMax = Math.min(\n          convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n      const wOffset2 = wR * dwS1 + wOffset1;\n\n      for (let wC = 0; wC < filterWidth; ++wC) {\n        const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n        const yCMax = Math.min(\n            convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n        const wOffset3 = wC * dwS2 + wOffset2;\n\n        for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n          const wOffset4 = d1 * dwS3 + wOffset3;\n\n          for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n            let dotProd = 0;\n            for (let b = 0; b < convInfo.batchSize; ++b) {\n              const xOffset1 = b * xS0;\n              const yOffset1 = b * dyS0;\n\n              for (let yF = yFMin; yF < yFMax; ++yF) {\n                const xF = wF + yF * strideDepth - frontPad;\n                const xOffset2 = xF * xS1 + xOffset1;\n                const yOffset2 = yF * dyS1 + yOffset1;\n\n                for (let yR = yRMin; yR < yRMax; ++yR) {\n                  const xR = wR + yR * strideHeight - topPad;\n                  const xOffset3 = xR * xS2 + xOffset2;\n                  const yOffset3 = yR * dyS2 + yOffset2;\n\n                  for (let yC = yCMin; yC < yCMax; ++yC) {\n                    const xC = wC + yC * strideWidth - leftPad;\n                    const xOffset4 = xC * xS3 + xOffset3;\n                    const yOffset4 = yC * dyS3 + yOffset3;\n\n                    dotProd += xValues[xOffset4 + d1] * dyValues[yOffset4 + d2];\n                  }\n                }\n              }\n            }\n            dwValues[wOffset4 + d2] = dotProd;\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dw.shape, dw.dtype, dw.values);\n}\n\nexport const conv3DBackpropFilterV2Config: KernelConfig = {\n  kernelName: Conv3DBackpropFilterV2,\n  backendName: 'cpu',\n  kernelFunc: conv3DBackpropFilterV2 as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3DBackpropInputV2, Conv3DBackpropInputV2Attrs, Conv3DBackpropInputV2Inputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv3DBackpropInputV2(args: {\n  inputs: Conv3DBackpropInputV2Inputs,\n  backend: MathBackendCPU,\n  attrs: Conv3DBackpropInputV2Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {pad, strides, inputShape} = attrs;\n\n  assertNotComplex([dy], 'conv3dBackpropInputV2');\n\n  const dyStrides = util.computeStrides(dy.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  const convInfo = backend_util.computeConv3DInfo(\n      inputShape, filter.shape as [number, number, number, number, number],\n      strides, 1 /* dilations */, pad);\n\n  const dx = new TensorBuffer(convInfo.inShape, 'float32');\n  const dxValues = dx.values;\n  const [dxS0, dxS1, dxS2, dxS3] = dx.strides;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const [dyS0, dyS1, dyS2, dyS3] = dyStrides;\n  const fltValues = backend.data.get(filter.dataId).values as TypedArray;\n  const [fltS0, fltS1, fltS2, fltS3] = filterStrides;\n  const {\n    batchSize,\n    filterDepth,\n    filterHeight,\n    filterWidth,\n    inChannels,\n    inDepth,\n    inHeight,\n    inWidth,\n    outChannels,\n    outDepth,\n    outHeight,\n    outWidth,\n    strideDepth,\n    strideHeight,\n    strideWidth\n  } = convInfo;\n  const frontPad = filterDepth - 1 - convInfo.padInfo.front;\n  const topPad = filterHeight - 1 - convInfo.padInfo.top;\n  const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n\n  for (let b = 0; b < batchSize; ++b) {\n    for (let d1 = 0; d1 < inChannels; ++d1) {\n      // Frames of depth\n      for (let xF = 0; xF < inDepth; ++xF) {\n        const xFCorner = xF - frontPad;\n        const xFMin = Math.max(0, Math.ceil(xFCorner / strideDepth));\n        const yFMax =\n            Math.min(outDepth, (filterDepth + xFCorner) / strideDepth);\n\n        // Rows as per standard 2d matrix notation\n        for (let xR = 0; xR < inHeight; ++xR) {\n          const xRCorner = xR - topPad;\n          const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n          const yRMax =\n              Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n          // Columns as per standard 2d matrix notation\n          for (let xC = 0; xC < inWidth; ++xC) {\n            const xCCorner = xC - leftPad;\n            const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n            const yCMax =\n                Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n\n            let dotProd = 0;\n            for (let yF = xFMin; yF < yFMax; ++yF) {\n              const wF = yF * strideDepth - xFCorner;\n\n              for (let yR = xRMin; yR < yRMax; ++yR) {\n                const wR = yR * strideHeight - xRCorner;\n\n                for (let yC = xCMin; yC < yCMax; ++yC) {\n                  const wC = yC * strideWidth - xCCorner;\n                  const dyOffset = dyS0 * b + dyS1 * yF + dyS2 * yR + dyS3 * yC;\n                  const fltOffset = fltS0 * (filterDepth - 1 - wF) +\n                      fltS1 * (filterHeight - 1 - wR) +\n                      fltS2 * (filterWidth - 1 - wC) + fltS3 * d1;\n\n                  for (let d2 = 0; d2 < outChannels; ++d2) {\n                    const pixel = dyValues[dyOffset + d2];\n                    const weight = fltValues[fltOffset + d2];\n                    dotProd += pixel * weight;\n                  }\n                }\n              }\n            }\n            dxValues[dxS0 * b + dxS1 * xF + dxS2 * xR + dxS3 * xC + d1] =\n                dotProd;\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const conv3DBackpropInputV2Config: KernelConfig = {\n  kernelName: Conv3DBackpropInputV2,\n  backendName: 'cpu',\n  kernelFunc: conv3DBackpropInputV2 as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cos, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const cos = unaryKernelFunc(Cos, (xi) => Math.cos(xi));\n\nexport const cosConfig: KernelConfig = {\n  kernelName: Cos,\n  backendName: 'cpu',\n  kernelFunc: cos,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cosh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const cosh = unaryKernelFunc(Cosh, (xi) => Math.cosh(xi));\n\nexport const coshConfig: KernelConfig = {\n  kernelName: Cosh,\n  backendName: 'cpu',\n  kernelFunc: cosh,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, CropAndResize, CropAndResizeAttrs, CropAndResizeInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function cropAndResize(args: {\n  inputs: CropAndResizeInputs,\n  backend: MathBackendCPU,\n  attrs: CropAndResizeAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {image, boxes, boxInd} = inputs;\n  const {cropSize, method, extrapolationValue} = attrs;\n\n  const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n  const numBoxes = boxes.shape[0];\n\n  const [cropHeight, cropWidth] = cropSize;\n  const output =\n      buffer([numBoxes, cropHeight, cropWidth, numChannels], 'float32');\n\n  const boxVals = backend.data.get(boxes.dataId).values as TypedArray;\n  const boxIndVals = backend.data.get(boxInd.dataId).values as TypedArray;\n  const imageVals = backend.data.get(image.dataId).values as TypedArray;\n\n  const inStride =\n      util.computeStrides(image.shape);  // to calculate flat indexes into image\n  const outStride = util.computeStrides(\n      output.shape);  // to calculate flat indexes into output\n\n  // Reference implementation\n  // tslint:disable-next-line:max-line-length\n  // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op.cc\n  for (let b = 0; b < numBoxes; b++) {\n    const startInd = b * 4;\n    const y1 = boxVals[startInd];\n    const x1 = boxVals[startInd + 1];\n    const y2 = boxVals[startInd + 2];\n    const x2 = boxVals[startInd + 3];\n\n    const bInd: number = boxIndVals[b];\n    if (bInd >= batch) {\n      continue;\n    }\n\n    const heightScale =\n        (cropHeight > 1) ? (y2 - y1) * (imageHeight - 1) / (cropHeight - 1) : 0;\n    const widthScale =\n        (cropWidth > 1) ? (x2 - x1) * (imageWidth - 1) / (cropWidth - 1) : 0;\n\n    for (let y = 0; y < cropHeight; y++) {\n      const yInd: number = (cropHeight > 1) ?\n          y1 * (imageHeight - 1) + y * (heightScale) :\n          0.5 * (y1 + y2) * (imageHeight - 1);\n\n      if (yInd < 0 || yInd > imageHeight - 1) {\n        for (let x = 0; x < cropWidth; x++) {\n          for (let c = 0; c < numChannels; c++) {\n            const ind =\n                c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n            output.values[ind] = extrapolationValue;\n          }\n        }\n        continue;\n      }\n\n      if (method === 'bilinear') {\n        const topInd = Math.floor(yInd);\n        const bottomInd = Math.ceil(yInd);\n        const yLerp = yInd - topInd;\n\n        for (let x = 0; x < cropWidth; x++) {\n          const xInd = (cropWidth > 1) ?\n              x1 * (imageWidth - 1) + x * widthScale :\n              0.5 * (x1 + x2) * (imageWidth - 1);\n\n          if (xInd < 0 || xInd > imageWidth - 1) {\n            for (let c = 0; c < numChannels; c++) {\n              const ind =\n                  c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n              output.values[ind] = extrapolationValue;\n            }\n            continue;\n          }\n\n          const leftInd = Math.floor(xInd);\n          const rightInd = Math.ceil(xInd);\n          const xLerp = xInd - leftInd;\n\n          for (let c = 0; c < numChannels; c++) {\n            let ind = c + leftInd * inStride[2] + topInd * inStride[1] +\n                bInd * inStride[0];\n            const topLeft = imageVals[ind];\n\n            ind = c + rightInd * inStride[2] + topInd * inStride[1] +\n                bInd * inStride[0];\n            const topRight = imageVals[ind];\n\n            ind = c + leftInd * inStride[2] + bottomInd * inStride[1] +\n                bInd * inStride[0];\n            const bottomLeft = imageVals[ind];\n\n            ind = c + rightInd * inStride[2] + bottomInd * inStride[1] +\n                bInd * inStride[0];\n            const bottomRight = imageVals[ind];\n\n            const top = topLeft + (topRight - topLeft) * xLerp;\n            const bottom = bottomLeft + (bottomRight - bottomLeft) * xLerp;\n\n            ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n            output.values[ind] = top + ((bottom - top) * yLerp);\n          }\n        }\n      } else {  // method == \"nearest\"\n        for (let x = 0; x < cropWidth; ++x) {\n          const xInd = (cropWidth > 1) ?\n              x1 * (imageWidth - 1) + x * widthScale :\n              0.5 * (x1 + x2) * (imageWidth - 1);\n\n          if (xInd < 0 || xInd > imageWidth - 1) {\n            for (let c = 0; c < numChannels; c++) {\n              const ind =\n                  c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n              output.values[ind] = extrapolationValue;\n            }\n            continue;\n          }\n\n          const closestX = Math.round(xInd);\n          const closestY = Math.round(yInd);\n          for (let c = 0; c < numChannels; c++) {\n            const inInd = c + closestX * inStride[2] + closestY * inStride[1] +\n                bInd * inStride[0];\n            const outInd =\n                c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n            output.values[outInd] = imageVals[inInd];\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(output.shape, output.dtype, output.values);\n}\n\nexport const cropAndResizeConfig: KernelConfig = {\n  kernelName: CropAndResize,\n  backendName: 'cpu',\n  kernelFunc: cropAndResize as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Cumsum, CumsumAttrs, CumsumInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function cumsum(\n    args: {inputs: CumsumInputs, backend: MathBackendCPU, attrs: CumsumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, exclusive, reverse} = attrs;\n\n  assertNotComplex(x, 'cumsum');\n\n  const permutation = backend_util.getAxesPermutation([axis], x.shape.length);\n  let $x = x;\n  if (permutation != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n  }\n  const permutedAxis = backend_util.getInnerMostAxes(1, x.shape.length)[0];\n\n  if (permutedAxis !== $x.shape.length - 1) {\n    throw new Error(\n        `backend.cumsum in CPU expects an inner-most ` +\n        `axis=${$x.shape.length - 1} but got axis=${permutedAxis}`);\n  }\n\n  const resultDtype = upcastType($x.dtype, 'int32');\n  const vals = util.makeZerosTypedArray(\n                   util.sizeFromShape($x.shape), resultDtype) as TypedArray;\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  const finalDim = $x.shape[$x.shape.length - 1];\n  const indexAdjuster = reverse ?\n      (i: number, j: number) => i + finalDim - j - 1 :\n      (i: number, j: number) => i + j;\n  for (let i = 0; i < aVals.length; i += finalDim) {\n    for (let j = 0; j < finalDim; j++) {\n      const idx = indexAdjuster(i, j);\n      if (j === 0) {\n        vals[idx] = exclusive ? 0 : aVals[idx];\n      } else {\n        const prevIdx = indexAdjuster(i, j - 1);\n        vals[idx] = exclusive ? aVals[prevIdx] + vals[prevIdx] :\n                                aVals[idx] + vals[prevIdx];\n      }\n    }\n  }\n\n  const result = backend.makeTensorInfo($x.shape, resultDtype, vals);\n\n  if (permutation != null) {\n    const reversePermutation = backend_util.getUndoAxesPermutation(permutation);\n    const reverseTransposedResult = transpose(\n        {inputs: {x: result}, backend, attrs: {perm: reversePermutation}});\n\n    backend.disposeIntermediateTensorInfo(result);\n    backend.disposeIntermediateTensorInfo($x);\n\n    return reverseTransposedResult;\n  }\n\n  return result;\n}\n\nexport const cumsumConfig: KernelConfig = {\n  kernelName: Cumsum,\n  backendName: 'cpu',\n  kernelFunc: cumsum as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DenseBincount, DenseBincountAttrs, DenseBincountInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {bincountImpl, bincountReduceImpl} from './Bincount_impl';\n\nexport function denseBincount(args: {\n  inputs: DenseBincountInputs,\n  backend: MathBackendCPU,\n  attrs: DenseBincountAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, weights} = inputs;\n  const {size, binaryOutput} = attrs;\n\n  if (x.shape.length === 1) {\n    const xVals = backend.data.get(x.dataId).values as TypedArray;\n    const weightsVals = backend.data.get(weights.dataId).values as TypedArray;\n\n    const outVals =\n        bincountImpl(xVals, weightsVals, weights.dtype, weights.shape, size);\n\n    return backend.makeTensorInfo([size], weights.dtype, outVals);\n  } else if (x.shape.length === 2) {\n    const xBuf = backend.bufferSync(x);\n    const weightsBuf = backend.bufferSync(weights);\n\n    const outBuf = bincountReduceImpl(xBuf, weightsBuf, size, binaryOutput);\n\n    return backend.makeTensorInfo(outBuf.shape, weights.dtype, outBuf.values);\n  }\n\n  throw new Error(\n      `Error in denseBincount: input must be at most rank 2, but got rank` +\n      `${x.shape.length}.`);\n}\n\nexport const denseBincountConfig: KernelConfig = {\n  kernelName: DenseBincount,\n  backendName: 'cpu',\n  kernelFunc: denseBincount as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DepthToSpace, DepthToSpaceAttrs, DepthToSpaceInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function depthToSpace(args: {\n  inputs: DepthToSpaceInputs,\n  backend: MathBackendCPU,\n  attrs: DepthToSpaceAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockSize, dataFormat} = attrs;\n\n  util.assert(\n      dataFormat === 'NHWC',\n      () => `Only NHWC dataFormat supported on CPU for depthToSpace. Got ${\n          dataFormat}`);\n  util.assert(\n      blockSize > 1,\n      () => `blockSize should be > 1 for depthToSpace, but was: ${blockSize}`);\n\n  const batchSize = x.shape[0];\n  const inputHeight = x.shape[1];\n  const inputWidth = x.shape[2];\n  const inputDepth = x.shape[3];\n\n  const outputHeight = inputHeight * blockSize;\n  const outputWidth = inputWidth * blockSize;\n  const outputDepth = inputDepth / (blockSize * blockSize);\n\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const result =\n      new Float32Array(batchSize * outputHeight * outputWidth * outputDepth);\n\n  let outputIdx = 0;\n  for (let b = 0; b < batchSize; ++b) {\n    for (let h = 0; h < outputHeight; ++h) {\n      const inH = Math.floor(h / blockSize);\n      const offsetH = (h % blockSize);\n      for (let w = 0; w < outputWidth; ++w) {\n        const inW = Math.floor(w / blockSize);\n        const offsetW = (w % blockSize);\n        const offsetD = (offsetH * blockSize + offsetW) * outputDepth;\n        for (let d = 0; d < outputDepth; ++d) {\n          const inD = d + offsetD;\n          const inputIdx =\n              inD + inputDepth * (inW + inputWidth * (inH + inputHeight * b));\n          result[outputIdx++] = xValues[inputIdx];\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(\n      [batchSize, outputHeight, outputWidth, outputDepth], x.dtype, result);\n}\n\nexport const depthToSpaceConfig: KernelConfig = {\n  kernelName: DepthToSpace,\n  backendName: 'cpu',\n  kernelFunc: depthToSpace as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNative, DepthwiseConv2dNativeAttrs, DepthwiseConv2dNativeInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function depthwiseConv2dNative(args: {\n  inputs: DepthwiseConv2dNativeInputs,\n  backend: MathBackendCPU,\n  attrs: DepthwiseConv2dNativeAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations, dimRoundingMode} = attrs;\n\n  assertNotComplex([x, filter], 'depthwiseConv2DNative');\n\n  const xStrides = util.computeStrides(x.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, $dilations),\n      () => 'Error in depthwiseConv2d: Either strides or dilations must be ' +\n          `1. Got strides ${strides} and dilations '${$dilations}'`);\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, $dilations,\n      pad, dimRoundingMode, true /* depthwise */);\n\n  const {filterHeight, filterWidth, dilationHeight, dilationWidth, padInfo} =\n      convInfo;\n  const padLeft = padInfo.left;\n  const padTop = padInfo.top;\n  const chMul = convInfo.outChannels / convInfo.inChannels;\n  const y = new TensorBuffer(convInfo.outShape, x.dtype as 'float32');\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const wVals = backend.data.get(filter.dataId).values as TypedArray;\n  const yVals = y.values;\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const xOffset1 = b * xStrides[0];\n    const yOffset1 = b * y.strides[0];\n    for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n      const yOffset2 = yOffset1 + yR * y.strides[1];\n      const xRCorner = yR * convInfo.strideHeight - padTop;\n      for (let wR = 0; wR < filterHeight; ++wR) {\n        const xR = xRCorner + wR * dilationHeight;\n        if (xR < 0 || xR >= convInfo.inHeight) {\n          continue;\n        }\n        const wOffset1 = wR * filterStrides[0];\n        const xOffset2 = xOffset1 + xR * xStrides[1];\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const yOffset3 = yOffset2 + yC * y.strides[2];\n          const xCCorner = yC * convInfo.strideWidth - padLeft;\n          for (let wC = 0; wC < filterWidth; ++wC) {\n            const xC = xCCorner + wC * dilationWidth;\n            if (xC < 0 || xC >= convInfo.inWidth) {\n              continue;\n            }\n            const wOffset2 = wOffset1 + wC * filterStrides[1];\n            const xOffset3 = xOffset2 + xC * convInfo.inChannels;\n            let yOffset4 = yOffset3;\n            let wOffset3 = wOffset2;\n            for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n              const xVal = xVals[xOffset3 + d1];\n              for (let q = 0; q < chMul; ++q) {\n                yVals[yOffset4 + q] += xVal * wVals[wOffset3 + q];\n              }\n              yOffset4 += chMul;\n              wOffset3 += chMul;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, y.dtype, y.values);\n}\n\nexport const depthwiseConv2dNativeConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNative,\n  backendName: 'cpu',\n  kernelFunc: depthwiseConv2dNative as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNativeBackpropFilter, DepthwiseConv2dNativeBackpropFilterAttrs, DepthwiseConv2dNativeBackpropFilterInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function depthwiseConv2dNativeBackpropFilter(args: {\n  inputs: DepthwiseConv2dNativeBackpropFilterInputs,\n  backend: MathBackendCPU,\n  attrs: DepthwiseConv2dNativeBackpropFilterAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, dilations, pad, dimRoundingMode, filterShape} = attrs;\n\n  assertNotComplex([x, dy], 'depthwiseConv2dNativeBackpropFilter');\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number], filterShape, strides,\n      dilations, pad, dimRoundingMode, true /* depthwise */);\n\n  const {strideHeight, strideWidth, filterHeight, filterWidth} = convInfo;\n\n  const dW = new TensorBuffer(convInfo.filterShape, 'float32');\n\n  const leftPad = convInfo.padInfo.left;\n  const topPad = convInfo.padInfo.top;\n  const chMul = convInfo.outChannels / convInfo.inChannels;\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const xBuf = new TensorBuffer(x.shape, x.dtype, xVals);\n  const dyVals = backend.data.get(dy.dataId).values as TypedArray;\n  const dyBuf = new TensorBuffer(dy.shape, dy.dtype, dyVals);\n  for (let wR = 0; wR < filterHeight; ++wR) {\n    const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n    const yRMax = Math.min(\n        convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n\n    for (let wC = 0; wC < filterWidth; ++wC) {\n      const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n      const yCMax = Math.min(\n          convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n\n      for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n        const d1 = Math.trunc(d2 / chMul);\n        const dm = d2 % chMul;\n\n        let dotProd = 0;\n        for (let b = 0; b < convInfo.batchSize; ++b) {\n          for (let yR = yRMin; yR < yRMax; ++yR) {\n            const xR = wR + yR * strideHeight - topPad;\n            for (let yC = yCMin; yC < yCMax; ++yC) {\n              const xC = wC + yC * strideWidth - leftPad;\n              dotProd += (xBuf.get(b, xR, xC, d1) as number) *\n                  (dyBuf.get(b, yR, yC, d2) as number);\n            }\n          }\n        }\n        dW.set(dotProd, wR, wC, d1, dm);\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dW.shape, dW.dtype, dW.values);\n}\n\nexport const depthwiseConv2dNativeBackpropFilterConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropFilter,\n  backendName: 'cpu',\n  kernelFunc: depthwiseConv2dNativeBackpropFilter as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNativeBackpropInput, DepthwiseConv2dNativeBackpropInputAttrs, DepthwiseConv2dNativeBackpropInputInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function depthwiseConv2dNativeBackpropInput(args: {\n  inputs: DepthwiseConv2dNativeBackpropInputInputs,\n  backend: MathBackendCPU,\n  attrs: DepthwiseConv2dNativeBackpropInputAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {strides, dilations, pad, dimRoundingMode, inputShape} = attrs;\n\n  assertNotComplex([dy, filter], 'depthwiseConv2DNativeBackpropInput');\n\n  const dyStrides = util.computeStrides(dy.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  const convInfo = backend_util.computeConv2DInfo(\n      inputShape, filter.shape as [number, number, number, number], strides,\n      dilations, pad, dimRoundingMode, true /* depthwise */);\n\n  const dx = new TensorBuffer(convInfo.inShape, 'float32');\n  const dxValues = dx.values;\n  const [dxS0, dxS1, dxS2] = dx.strides;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const [dyS0, dyS1, dyS2] = dyStrides;\n  const fltValues = backend.data.get(filter.dataId).values as TypedArray;\n  const [fltS0, fltS1, fltS2] = filterStrides;\n  const {\n    batchSize,\n    filterHeight,\n    filterWidth,\n    inChannels,\n    inHeight,\n    inWidth,\n    outChannels,\n    outHeight,\n    outWidth,\n    strideHeight,\n    strideWidth\n  } = convInfo;\n  const topPad = filterHeight - 1 - convInfo.padInfo.top;\n  const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n  const chMul = outChannels / inChannels;\n\n  for (let b = 0; b < batchSize; ++b) {\n    for (let d1 = 0; d1 < inChannels; ++d1) {\n      for (let xR = 0; xR < inHeight; ++xR) {\n        const xRCorner = xR - topPad;\n        const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n        const yRMax =\n            Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n\n        for (let xC = 0; xC < inWidth; ++xC) {\n          const xCCorner = xC - leftPad;\n          const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n          const yCMax =\n              Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n\n          let dotProd = 0;\n          for (let yR = xRMin; yR < yRMax; ++yR) {\n            const wR = yR * strideHeight - xRCorner;\n\n            for (let yC = xCMin; yC < yCMax; ++yC) {\n              const wC = yC * strideWidth - xCCorner;\n              const dyOffset = dyS0 * b + dyS1 * yR + dyS2 * yC;\n              const fltOffset = fltS0 * (filterHeight - 1 - wR) +\n                  fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n\n              for (let dm = 0; dm < chMul; ++dm) {\n                const d2 = d1 * chMul + dm;\n                const pixel = dyValues[dyOffset + d2];\n                const weight = fltValues[fltOffset + dm];\n                dotProd += pixel * weight;\n              }\n            }\n          }\n          dxValues[dxS0 * b + dxS1 * xR + dxS2 * xC + d1] = dotProd;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const depthwiseConv2dNativeBackpropInputConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropInput,\n  backendName: 'cpu',\n  kernelFunc: depthwiseConv2dNativeBackpropInput as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, Diag, DiagInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function diag(args: {inputs: DiagInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  const xSize = util.sizeFromShape(x.shape);\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const outBuf = buffer([xSize, xSize], x.dtype);\n  const vals = outBuf.values;\n  for (let i = 0; i < xVals.length; i++) {\n    vals[i * xSize + i] = xVals[i];\n  }\n\n  const outShape = [...x.shape, ...x.shape];\n\n  return backend.makeTensorInfo(outShape, outBuf.dtype, outBuf.values);\n}\n\nexport const diagConfig: KernelConfig = {\n  kernelName: Diag,\n  backendName: 'cpu',\n  kernelFunc: diag as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2D, Dilation2DAttrs, Dilation2DInputs, KernelConfig, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const dilation2dConfig: KernelConfig = {\n  kernelName: Dilation2D,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    const {x, filter} = inputs as Dilation2DInputs;\n    const {strides, pad, dilations} = attrs as {} as Dilation2DAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const xVals = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const xRank = x.shape.length;\n\n    const filterVals = cpuBackend.data.get(filter.dataId).values as TypedArray;\n    const filterRank = filter.shape.length;\n\n    const {\n      batchSize,\n      inHeight,\n      inWidth,\n      inChannels,\n      outHeight,\n      outWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth,\n      outShape\n    } =\n        backend_util.computeDilation2DInfo(\n            x.shape as [number, number, number, number],\n            filter.shape as [number, number, number], strides, pad,\n            'NHWC' /* dataFormat */, dilations);\n\n    const outSize = util.sizeFromShape(outShape);\n    const outRank = outShape.length;\n    const outputVals = util.getArrayFromDType(x.dtype, outSize);\n\n    // Upsampling the input by fill in `dilation size - 1` values between each\n    // input value.\n    // This implementation follows the TF c++ implementation:\n    // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n    for (let b = 0; b < batchSize; ++b) {\n      for (let hOut = 0; hOut < outHeight; ++hOut) {\n        const hBeg = hOut * strideHeight - padInfo.top;\n        for (let wOut = 0; wOut < outWidth; ++wOut) {\n          const wBeg = wOut * strideWidth - padInfo.left;\n          for (let d = 0; d < inChannels; ++d) {\n            let curVal = Number.MIN_SAFE_INTEGER;\n            for (let h = 0; h < filterHeight; ++h) {\n              const hIn = hBeg + h * dilationHeight;\n              if (hIn >= 0 && hIn < inHeight) {\n                for (let w = 0; w < filterWidth; ++w) {\n                  const wIn = wBeg + w * dilationWidth;\n                  if (wIn >= 0 && wIn < inWidth) {\n                    const xIndex = util.locToIndex(\n                        [b, hIn, wIn, d], xRank, util.computeStrides(x.shape));\n                    const filterIndex = util.locToIndex(\n                        [h, w, d], filterRank,\n                        util.computeStrides(filter.shape));\n                    const val = xVals[xIndex] + filterVals[filterIndex];\n                    if (val > curVal) {\n                      curVal = val;\n                    }\n                  }\n                }\n              }\n            }\n            const outputIndex = util.locToIndex(\n                [b, hOut, wOut, d], outRank, util.computeStrides(outShape));\n            outputVals[outputIndex] = curVal;\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(\n        util.toTypedArray(outputVals, x.dtype), outShape, x.dtype);\n\n    return {dataId, shape: outShape, dtype: x.dtype};\n  }\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2DAttrs, Dilation2DBackpropFilter, Tensor3D, Tensor4D, TypedArray, util} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const dilation2dBackpropFilterConfig: KernelConfig = {\n  kernelName: Dilation2DBackpropFilter,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    const {x, filter, dy} =\n        inputs as {x: Tensor4D, filter: Tensor3D, dy: Tensor4D};\n    const {strides, pad, dilations} = attrs as {} as Dilation2DAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const $x =\n        util.toNestedArray(\n            x.shape, cpuBackend.data.get(x.dataId).values as TypedArray) as\n        number[][][][];\n\n    const $filter = util.toNestedArray(\n                        filter.shape,\n                        cpuBackend.data.get(filter.dataId).values as\n                            TypedArray) as number[][][];\n\n    const {\n      batchSize,\n      inHeight,\n      inWidth,\n      inChannels,\n      outHeight,\n      outWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth,\n      outShape\n    } =\n        backend_util.computeDilation2DInfo(\n            x.shape as [number, number, number, number],\n            filter.shape as [number, number, number], strides, pad,\n            'NHWC' /* dataFormat */, dilations);\n\n    util.assert(\n        dy.rank === outShape.length,\n        () => `Error in ${Dilation2DBackpropFilter}, dy ` +\n            `must have the same rank as output ${outShape.length}, but got ` +\n            `${dy.rank}`);\n\n    const $dy =\n        util.toNestedArray(\n            outShape, cpuBackend.data.get(dy.dataId).values as TypedArray) as\n        number[][][][];\n\n    // The computed filter gradients has the same dimensions as the filter:\n    // [filterHeight, filterWidth, depth]\n    const gradients = util.makeZerosNestedTypedArray(\n                          filter.shape, filter.dtype) as number[][][];\n\n    // In the case of multiple argmax branches, we only back-propagate along the\n    // last branch, i.e., the one with largest value of `h * filter_cols + w`,\n    // similarly to the max-pooling backward routines.\n    // This implementation follows the TF c++ implementation:\n    // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n    for (let b = 0; b < batchSize; ++b) {\n      for (let hOut = 0; hOut < outHeight; ++hOut) {\n        const hBeg = hOut * strideHeight - padInfo.top;\n        for (let wOut = 0; wOut < outWidth; ++wOut) {\n          const wBeg = wOut * strideWidth - padInfo.left;\n          for (let d = 0; d < inChannels; ++d) {\n            let curVal = Number.MIN_SAFE_INTEGER;\n            let hMax = 0;\n            let wMax = 0;\n            for (let h = 0; h < filterHeight; ++h) {\n              const hIn = hBeg + h * dilationHeight;\n              if (hIn >= 0 && hIn < inHeight) {\n                for (let w = 0; w < filterWidth; ++w) {\n                  const wIn = wBeg + w * dilationWidth;\n                  if (wIn >= 0 && wIn < inWidth) {\n                    const val = $x[b][hIn][wIn][d] + $filter[h][w][d];\n                    if (val > curVal) {\n                      curVal = val;\n                      hMax = h;\n                      wMax = w;\n                    }\n                  }\n                }\n              }\n            }\n            gradients[hMax][wMax][d] += $dy[b][hOut][wOut][d];\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(\n        util.toTypedArray(gradients, x.dtype), filter.shape, filter.dtype);\n\n    return {dataId, shape: filter.shape, dtype: filter.dtype};\n  }\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2DAttrs, Dilation2DBackpropInput, Tensor3D, Tensor4D, TypedArray, util} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const dilation2dBackpropInputConfig: KernelConfig = {\n  kernelName: Dilation2DBackpropInput,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    const {x, filter, dy} =\n        inputs as {x: Tensor4D, filter: Tensor3D, dy: Tensor4D};\n    const {strides, pad, dilations} = attrs as {} as Dilation2DAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const $x =\n        util.toNestedArray(\n            x.shape, cpuBackend.data.get(x.dataId).values as TypedArray) as\n        number[][][][];\n\n    const $filter = util.toNestedArray(\n                        filter.shape,\n                        cpuBackend.data.get(filter.dataId).values as\n                            TypedArray) as number[][][];\n\n    const {\n      batchSize,\n      inHeight,\n      inWidth,\n      inChannels,\n      outHeight,\n      outWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth,\n      outShape\n    } =\n        backend_util.computeDilation2DInfo(\n            x.shape as [number, number, number, number],\n            filter.shape as [number, number, number], strides, pad,\n            'NHWC' /* dataFormat */, dilations);\n\n    util.assert(\n        dy.rank === outShape.length,\n        () => `Error in ${Dilation2DBackpropInput}, dy ` +\n            `must have the same rank as output ${outShape.length}, but got ` +\n            `${dy.rank}`);\n\n    const $dy =\n        util.toNestedArray(\n            outShape, cpuBackend.data.get(dy.dataId).values as TypedArray) as\n        number[][][][];\n\n    // The computed gradients has the same dimensions as the input:\n    // [batch, inputHeight, inputCols, inChannel]\n    const gradients =\n        util.makeZerosNestedTypedArray(x.shape, x.dtype) as number[][][][];\n\n    // In the case of multiple argmax branches, we only back-propagate along the\n    // last branch, i.e., the one with largest value of `h * filter_cols + w`,\n    // similarly to the max-pooling backward routines.\n    // This implementation follows the TF c++ implementation:\n    // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n    for (let b = 0; b < batchSize; ++b) {\n      for (let hOut = 0; hOut < outHeight; ++hOut) {\n        const hBeg = hOut * strideHeight - padInfo.top;\n        for (let wOut = 0; wOut < outWidth; ++wOut) {\n          const wBeg = wOut * strideWidth - padInfo.left;\n          for (let d = 0; d < inChannels; ++d) {\n            let curVal = Number.MIN_SAFE_INTEGER;\n            let hInMax = (hBeg < 0) ? 0 : hBeg;\n            let wInMax = (wBeg < 0) ? 0 : wBeg;\n            for (let h = 0; h < filterHeight; ++h) {\n              const hIn = hBeg + h * dilationHeight;\n              if (hIn >= 0 && hIn < inHeight) {\n                for (let w = 0; w < filterWidth; ++w) {\n                  const wIn = wBeg + w * dilationWidth;\n                  if (wIn >= 0 && wIn < inWidth) {\n                    const val = $x[b][hIn][wIn][d] + $filter[h][w][d];\n                    if (val > curVal) {\n                      curVal = val;\n                      hInMax = hIn;\n                      wInMax = wIn;\n                    }\n                  }\n                }\n              }\n            }\n            gradients[b][hInMax][wInMax][d] += $dy[b][hOut][wOut][d];\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(\n        util.toTypedArray(gradients, x.dtype), x.shape, x.dtype);\n\n    return {dataId, shape: x.shape, dtype: x.dtype};\n  }\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Einsum, EinsumAttrs, EinsumInputs, KernelConfig, KernelFunc, Tensor, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {multiply} from './Multiply';\nimport {reshape} from './Reshape';\nimport {sum} from './Sum';\nimport {transpose} from './Transpose';\n\nexport function einsum(\n    args: {inputs: EinsumInputs, backend: MathBackendCPU, attrs: EinsumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {equation} = attrs;\n  const tensors = inputs as Tensor[];\n\n  const {allDims, summedDims, idDims} =\n      backend_util.decodeEinsumEquation(equation, tensors.length);\n  backend_util.checkEinsumDimSizes(allDims.length, idDims, tensors);\n  const {path, steps} = backend_util.getEinsumComputePath(summedDims, idDims);\n\n  const nSteps = steps.length;\n  let out: TensorInfo|null = null;\n  let numDimsRemaining = allDims.length;\n  const tensorsToDispose: TensorInfo[] = [];\n  for (let i = 0; i < nSteps; ++i) {\n    for (const idTerm of steps[i]) {\n      const {permutationIndices: perm, expandDims: dimsToExpand} =\n          backend_util.getEinsumPermutation(numDimsRemaining, idDims[idTerm]);\n      let x: TensorInfo;\n      if (backend_util.isIdentityPermutation(perm)) {\n        x = tensors[idTerm];\n      } else {\n        x = transpose({inputs: {x: tensors[idTerm]}, backend, attrs: {perm}});\n        tensorsToDispose.push(x);\n      }\n      const targetShape: number[] = x.shape.slice();\n      for (let k = 0; k < dimsToExpand.length; ++k) {\n        targetShape.splice(dimsToExpand[k], 0, 1);\n      }\n\n      if (!util.arraysEqual(x.shape, targetShape)) {\n        x = reshape({inputs: {x}, backend, attrs: {shape: targetShape}});\n        tensorsToDispose.push(x);\n      }\n      if (out === null) {\n        out = x;\n      } else {\n        // tslint:disable-next-line: no-unnecessary-type-assertion\n        out = multiply({inputs: {a: x, b: out}, backend}) as TensorInfo;\n        tensorsToDispose.push(out);\n      }\n    }\n    if (i < nSteps - 1) {\n      if (path[i] >= 0) {\n        out = sum({\n          inputs: {x: out},\n          backend,\n          attrs: {\n            axis: path[i] - (allDims.length - numDimsRemaining),\n            keepDims: false\n          }\n        });\n        tensorsToDispose.push(out);\n      }\n      numDimsRemaining--;\n    }\n  }\n\n  // Clean up intermediate tensors.\n  for (const tensorInfo of tensorsToDispose) {\n    if (tensorInfo === out) {\n      continue;\n    }\n    backend.disposeIntermediateTensorInfo(tensorInfo);\n  }\n\n  return out;\n}\n\nexport const einsumConfig: KernelConfig = {\n  kernelName: Einsum,\n  backendName: 'cpu',\n  kernelFunc: einsum as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Sum, SumAttrs, SumInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {zeros} from '../utils/zeros_impl';\nimport {cast} from './Cast';\nimport {identity} from './Identity';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function sum(\n    args: {inputs: SumInputs, backend: MathBackendCPU, attrs: SumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'sum');\n\n  let $x;\n  if (x.dtype === 'bool') {\n    $x = cast({inputs: {x}, backend, attrs: {dtype: 'int32'}});\n  } else {\n    $x = identity({inputs: {x}, backend});\n  }\n\n  const xRank = $x.shape.length;\n  const axes = util.parseAxisParam(axis, $x.shape);\n  const permutation = backend_util.getAxesPermutation(axes, xRank);\n\n  let reductionAxes = axes;\n  let permutedX = $x;\n  if (permutation != null) {\n    permutedX =\n        transpose({inputs: {x: $x}, backend, attrs: {perm: permutation}});\n    reductionAxes = backend_util.getInnerMostAxes(reductionAxes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims(\n      'sum', reductionAxes, permutedX.shape.length);\n\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(permutedX.shape, reductionAxes);\n  const resultDtype = backend_util.upcastType(permutedX.dtype, 'int32');\n  let result = zeros(backend, outShape, resultDtype);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const vals = backend.data.get(result.dataId).values as TypedArray;\n\n  const aVals = backend.data.get(permutedX.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let sum = 0;\n    for (let j = 0; j < reduceSize; ++j) {\n      sum += aVals[offset + j];\n    }\n    vals[i] = sum;\n  }\n\n  if (keepDims) {\n    const newShape = backend_util.expandShapeToKeepDim(result.shape, axes);\n    const oldResult = result;\n    result = reshape({inputs: {x: result}, backend, attrs: {shape: newShape}});\n    backend.disposeIntermediateTensorInfo(oldResult);\n  }\n\n  backend.disposeIntermediateTensorInfo($x);\n\n  if (permutation != null) {\n    backend.disposeIntermediateTensorInfo(permutedX);\n  }\n\n  return result;\n}\n\nexport const sumConfig: KernelConfig = {\n  kernelName: Sum,\n  backendName: 'cpu',\n  kernelFunc: sum as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {EluGrad, EluGradInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function eluGrad(args: {inputs: EluGradInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {dy, y} = inputs;\n\n  assertNotComplex([dy, y], 'eluGrad');\n\n  const resultValues = new Float32Array(util.sizeFromShape(y.shape));\n  const values = backend.data.get(y.dataId).values as TypedArray;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  for (let i = 0; i < values.length; ++i) {\n    const v = values[i];\n    if (v >= 1) {\n      resultValues[i] = dyValues[i];\n    } else {\n      resultValues[i] = dyValues[i] * (v + 1);\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, 'float32', resultValues);\n}\n\nexport const eluGradConfig: KernelConfig = {\n  kernelName: EluGrad,\n  backendName: 'cpu',\n  kernelFunc: eluGrad as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Erf, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nconst p = backend_util.ERF_P;\nconst a1 = backend_util.ERF_A1;\nconst a2 = backend_util.ERF_A2;\nconst a3 = backend_util.ERF_A3;\nconst a4 = backend_util.ERF_A4;\nconst a5 = backend_util.ERF_A5;\n\nexport const erf = unaryKernelFunc(\n    Erf,\n    (xi) => {\n      const sign = Math.sign(xi);\n      const v = Math.abs(xi);\n      const t = 1.0 / (1.0 + p * v);\n      return sign *\n          (1.0 -\n           (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t *\n               Math.exp(-v * v));\n    },\n);\n\nexport const erfConfig: KernelConfig = {\n  kernelName: Erf,\n  backendName: 'cpu',\n  kernelFunc: erf,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ExpandDims, ExpandDimsAttrs, ExpandDimsInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {reshape} from './Reshape';\n\nexport function expandDims(args: {\n  inputs: ExpandDimsInputs,\n  backend: MathBackendCPU,\n  attrs: ExpandDimsAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {input} = inputs;\n  const {dim} = attrs;\n\n  const inputRank = input.shape.length;\n  const newShape = input.shape.slice();\n  let $dim = dim;\n  if (dim < 0) {\n    // Negative value is counted from the tail of rank.\n    util.assert(\n        -(inputRank + 1) <= dim,\n        () => `Axis must be in the interval [${- (inputRank + 1)}, ${\n            inputRank}]`);\n    $dim = inputRank + dim + 1;\n  }\n  newShape.splice($dim, 0, 1);\n\n  return reshape({inputs: {x: input}, backend, attrs: {shape: newShape}});\n}\n\nexport const expandDimsConfig: KernelConfig = {\n  kernelName: ExpandDims,\n  backendName: 'cpu',\n  kernelFunc: expandDims as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FFT, FFTInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {fftBatch} from '../utils/fft_utils';\nimport {reshape} from './Reshape';\n\nexport function fft(args: {inputs: FFTInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  const inputSize = util.sizeFromShape(input.shape);\n\n  // Collapse all outer dimensions to a single batch dimension.\n  const innerDimensionSize = input.shape[input.shape.length - 1];\n  const batch = inputSize / innerDimensionSize;\n\n  const input2D = reshape({\n    inputs: {x: input},\n    backend,\n    attrs: {shape: [batch, innerDimensionSize]}\n  });\n\n  const result = fftBatch(input2D, false, backend);\n\n  const resultReshaped =\n      reshape({inputs: {x: result}, backend, attrs: {shape: input.shape}});\n\n  backend.disposeIntermediateTensorInfo(input2D);\n  backend.disposeIntermediateTensorInfo(result);\n\n  return resultReshaped;\n}\n\nexport const fftConfig: KernelConfig = {\n  kernelName: FFT,\n  backendName: 'cpu',\n  kernelFunc: fft as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Tensor, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {add} from '../kernels/Add';\nimport {complex} from '../kernels/Complex';\nimport {concat} from '../kernels/Concat';\nimport {identity} from '../kernels/Identity';\nimport {imag} from '../kernels/Imag';\nimport {multiply} from '../kernels/Multiply';\nimport {real} from '../kernels/Real';\nimport {realDivConfig} from '../kernels/RealDiv';\nimport {slice} from '../kernels/Slice';\nimport {sub} from '../kernels/Sub';\n\n/**\n * Calculate FFT of inner most elements of batch tensor.\n */\nexport function fftBatch(\n    input: TensorInfo, inverse: boolean,\n    cpuBackend: MathBackendCPU): TensorInfo {\n  const inputShape = input.shape;\n  const batch = inputShape[0];\n  const innerDim = inputShape[1];\n\n  const inputVals = cpuBackend.data.get(input.dataId);\n\n  const real2D = inputVals.complexTensorInfos.real;\n  const imag2D = inputVals.complexTensorInfos.imag;\n\n  // Collects real and imaginary values separately.\n  const resultShape = [batch, innerDim];\n  const resultSize = util.sizeFromShape(resultShape);\n  const resultReal = util.getTypedArrayFromDType('float32', resultSize);\n  const resultImag = util.getTypedArrayFromDType('float32', resultSize);\n\n  for (let b = 0; b < batch; b++) {\n    // TODO: Support slice ops for complex type.\n    const r = slice({\n      inputs: {x: real2D},\n      backend: cpuBackend,\n      attrs: {begin: [b, 0], size: [1, innerDim]}\n    });\n    const i = slice({\n      inputs: {x: imag2D},\n      backend: cpuBackend,\n      attrs: {begin: [b, 0], size: [1, innerDim]}\n    });\n\n    const input = complex({inputs: {real: r, imag: i}, backend: cpuBackend});\n\n    // Run FFT by batch element.\n    const {real, imag} = fftImpl(input, inverse, cpuBackend);\n    const res = backend_util.mergeRealAndImagArrays(real, imag);\n\n    for (let d = 0; d < innerDim; d++) {\n      const c = backend_util.getComplexWithIndex(res, d);\n      resultReal[b * innerDim + d] = c.real;\n      resultImag[b * innerDim + d] = c.imag;\n    }\n\n    cpuBackend.disposeIntermediateTensorInfo(r);\n    cpuBackend.disposeIntermediateTensorInfo(i);\n    cpuBackend.disposeIntermediateTensorInfo(input);\n  }\n\n  const $realInfo: TensorInfo =\n      cpuBackend.makeTensorInfo(resultShape, 'float32', resultReal);\n  const $imagInfo: TensorInfo =\n      cpuBackend.makeTensorInfo(resultShape, 'float32', resultImag);\n\n  const result = complex(\n      {inputs: {real: $realInfo, imag: $imagInfo}, backend: cpuBackend});\n\n  cpuBackend.disposeIntermediateTensorInfo($realInfo);\n  cpuBackend.disposeIntermediateTensorInfo($imagInfo);\n\n  return result;\n}\n\nexport function fftImpl(\n    input: TensorInfo, inverse: boolean,\n    cpuBackend: MathBackendCPU): {real: Float32Array, imag: Float32Array} {\n  const inputSize = util.sizeFromShape(input.shape);\n\n  const inputVals = cpuBackend.data.get(input.dataId);\n\n  const realVals =\n      cpuBackend.data.get(inputVals.complexTensorInfos.real.dataId).values as\n      Float32Array;\n\n  const imagVals =\n      cpuBackend.data.get(inputVals.complexTensorInfos.imag.dataId).values as\n      Float32Array;\n\n  if (isExponentOf2(inputSize)) {\n    const result =\n        fftRadix2(realVals, imagVals, inputSize, inverse, cpuBackend);\n\n    const resultShape = [input.shape[0], input.shape[1]];\n\n    if (inverse) {\n      const realInfo: TensorInfo =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', result.real);\n      const imagInfo: TensorInfo =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', result.imag);\n\n      const sizeInfo: TensorInfo = cpuBackend.makeTensorInfo(\n          [], 'float32',\n          util.createScalarValue(inputSize as {} as 'float32', 'float32'));\n      const sizeInfoCopy =\n          identity({inputs: {x: sizeInfo}, backend: cpuBackend});\n\n      const divRealInfo =\n          realDivConfig.kernelFunc(\n              {inputs: {a: realInfo, b: sizeInfo}, backend: cpuBackend}) as\n          TensorInfo;\n      const divImagInfo =\n          realDivConfig.kernelFunc(\n              {inputs: {a: imagInfo, b: sizeInfoCopy}, backend: cpuBackend}) as\n          TensorInfo;\n\n      const divRealVals =\n          cpuBackend.data.get(divRealInfo.dataId).values as Float32Array;\n      const divImagVals =\n          cpuBackend.data.get(divImagInfo.dataId).values as Float32Array;\n\n      cpuBackend.disposeIntermediateTensorInfo(realInfo);\n      cpuBackend.disposeIntermediateTensorInfo(imagInfo);\n      cpuBackend.disposeIntermediateTensorInfo(sizeInfo);\n      cpuBackend.disposeIntermediateTensorInfo(sizeInfoCopy);\n      cpuBackend.disposeIntermediateTensorInfo(divRealInfo);\n      cpuBackend.disposeIntermediateTensorInfo(divImagInfo);\n\n      return {real: divRealVals, imag: divImagVals};\n    }\n\n    return result;\n  } else {\n    const data = backend_util.mergeRealAndImagArrays(realVals, imagVals);\n\n    const rawOutput =\n        fourierTransformByMatmul(data, inputSize, inverse) as Float32Array;\n\n    return backend_util.splitRealAndImagArrays(rawOutput);\n  }\n}\n\nfunction isExponentOf2(size: number): boolean {\n  return (size & size - 1) === 0;\n}\n\n// FFT using Cooley-Tukey algorithm on radix 2 dimensional input.\nfunction fftRadix2(\n    realVals: Float32Array, imagVals: Float32Array, size: number,\n    inverse: boolean,\n    cpuBackend: MathBackendCPU): {real: Float32Array, imag: Float32Array} {\n  if (size === 1) {\n    return {real: realVals, imag: imagVals};\n  }\n\n  const data = backend_util.mergeRealAndImagArrays(realVals, imagVals);\n\n  const half = size / 2;\n\n  const evenComplex = backend_util.complexWithEvenIndex(data);\n\n  const evenRealVals = evenComplex.real;\n  const evenImagVals = evenComplex.imag;\n\n  const evenShape = [evenRealVals.length];\n\n  const evenRealInfo =\n      cpuBackend.makeTensorInfo(evenShape, 'float32', evenRealVals);\n  const evenImagInfo =\n      cpuBackend.makeTensorInfo(evenShape, 'float32', evenImagVals);\n\n  const evenTensorInfo = complex(\n      {inputs: {real: evenRealInfo, imag: evenImagInfo}, backend: cpuBackend});\n\n  const oddComplex = backend_util.complexWithOddIndex(data);\n\n  const oddRealVals = oddComplex.real;\n  const oddImagVals = oddComplex.imag;\n\n  const oddShape = [oddRealVals.length];\n\n  const oddRealInfo =\n      cpuBackend.makeTensorInfo(oddShape, 'float32', oddRealVals);\n  const oddImagInfo =\n      cpuBackend.makeTensorInfo(oddShape, 'float32', oddImagVals);\n\n  const oddTensorInfo = complex(\n      {inputs: {real: oddRealInfo, imag: oddImagInfo}, backend: cpuBackend});\n\n  // Recursive call for half part of original input.\n  const $evenComplex =\n      fftRadix2(evenRealVals, evenImagVals, half, inverse, cpuBackend);\n\n  const $evenRealVals = $evenComplex.real;\n  const $evenImagVals = $evenComplex.imag;\n\n  const $evenShape = [$evenRealVals.length];\n\n  const $evenRealInfo =\n      cpuBackend.makeTensorInfo($evenShape, 'float32', $evenRealVals);\n  const $evenImagInfo =\n      cpuBackend.makeTensorInfo($evenShape, 'float32', $evenImagVals);\n\n  const $evenTensorInfo = complex({\n    inputs: {real: $evenRealInfo, imag: $evenImagInfo},\n    backend: cpuBackend\n  });\n\n  const $oddComplex =\n      fftRadix2(oddRealVals, oddImagVals, half, inverse, cpuBackend);\n\n  const $oddRealVals = $oddComplex.real;\n  const $oddImagVals = $oddComplex.imag;\n\n  const $oddShape = [$oddRealVals.length];\n\n  const $oddRealInfo =\n      cpuBackend.makeTensorInfo($oddShape, 'float32', $oddRealVals);\n  const $oddImagInfo =\n      cpuBackend.makeTensorInfo($oddShape, 'float32', $oddImagVals);\n\n  const $oddTensorInfo = complex(\n      {inputs: {real: $oddRealInfo, imag: $oddImagInfo}, backend: cpuBackend});\n\n  const e = backend_util.exponents(size, inverse);\n  const eShape = [e.real.length];\n\n  const eRealInfo = cpuBackend.makeTensorInfo(eShape, 'float32', e.real);\n  const eImagInfo = cpuBackend.makeTensorInfo(eShape, 'float32', e.imag);\n\n  const complexInfo = complex(\n      {inputs: {real: eRealInfo, imag: eImagInfo}, backend: cpuBackend});\n\n  const exponentInfo =\n      multiply(\n          {inputs: {a: complexInfo, b: $oddTensorInfo}, backend: cpuBackend}) as\n      TensorInfo;\n\n  const addPart = add({\n                    inputs: {a: $evenTensorInfo, b: exponentInfo},\n                    backend: cpuBackend\n                  }) as TensorInfo;\n  const subPart = sub({\n                    inputs: {a: $evenTensorInfo, b: exponentInfo},\n                    backend: cpuBackend\n                  }) as TensorInfo;\n\n  const addPartReal = real({inputs: {input: addPart}, backend: cpuBackend});\n  const subPartReal = real({inputs: {input: subPart}, backend: cpuBackend});\n\n  const addPartImag = imag({inputs: {input: addPart}, backend: cpuBackend});\n  const subPartImag = imag({inputs: {input: subPart}, backend: cpuBackend});\n\n  const $real = concat({\n    inputs: [addPartReal as Tensor, subPartReal as Tensor],\n    backend: cpuBackend,\n    attrs: {axis: 0}\n  });\n  const $imag = concat({\n    inputs: [addPartImag as Tensor, subPartImag as Tensor],\n    backend: cpuBackend,\n    attrs: {axis: 0}\n  });\n\n  const $realVals = cpuBackend.data.get($real.dataId).values as Float32Array;\n  const $imagVals = cpuBackend.data.get($imag.dataId).values as Float32Array;\n\n  cpuBackend.disposeIntermediateTensorInfo(evenRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo(evenImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo(evenTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo(oddRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo(oddImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo(oddTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo($evenRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo($evenImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo($evenTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo($oddRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo($oddImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo($oddTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo(eRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo(eImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo(complexInfo);\n  cpuBackend.disposeIntermediateTensorInfo(exponentInfo);\n  cpuBackend.disposeIntermediateTensorInfo(addPart);\n  cpuBackend.disposeIntermediateTensorInfo(subPart);\n  cpuBackend.disposeIntermediateTensorInfo(addPartReal);\n  cpuBackend.disposeIntermediateTensorInfo(addPartImag);\n  cpuBackend.disposeIntermediateTensorInfo(subPartReal);\n  cpuBackend.disposeIntermediateTensorInfo(subPartImag);\n  cpuBackend.disposeIntermediateTensorInfo($real);\n  cpuBackend.disposeIntermediateTensorInfo($imag);\n\n  return {real: $realVals, imag: $imagVals};\n}\n\n// Calculate fourier transform by multplying sinusoid matrix.\nfunction fourierTransformByMatmul(\n    data: TypedArray, size: number, inverse: boolean): TypedArray {\n  const ret = new Float32Array(size * 2);\n  // TODO: Use matmul instead once it supports complex64 type.\n  for (let r = 0; r < size; r++) {\n    let real = 0.0;\n    let imag = 0.0;\n    for (let c = 0; c < size; c++) {\n      const e = backend_util.exponent(r * c, size, inverse);\n      const term = backend_util.getComplexWithIndex(data as Float32Array, c);\n      real += term.real * e.real - term.imag * e.imag;\n      imag += term.real * e.imag + term.imag * e.real;\n    }\n    if (inverse) {\n      real /= size;\n      imag /= size;\n    }\n    backend_util.assignToTypedArray(ret, real, imag, r);\n  }\n  return ret;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, RealDiv} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const realDivImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => a / b);\nexport const div = binaryKernelFunc(RealDiv, realDivImpl);\n\nexport const realDivConfig: KernelConfig = {\n  kernelName: RealDiv,\n  backendName: 'cpu',\n  kernelFunc: div\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, DataValues, Fill, FillAttrs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function fill(args: {backend: MathBackendCPU, attrs: FillAttrs}):\n    TensorInfo {\n  const {backend, attrs} = args;\n  const {shape, value, dtype} = attrs;\n\n  const $dtype = dtype || util.inferDtype(value);\n  const values = util.getArrayFromDType($dtype, util.sizeFromShape(shape));\n  fillValues(values, value, $dtype);\n\n  return backend.makeTensorInfo(shape, $dtype, values);\n}\n\nexport const fillConfig: KernelConfig = {\n  kernelName: Fill,\n  backendName: 'cpu',\n  kernelFunc: fill as {} as KernelFunc\n};\n\nfunction fillValues(\n    values: DataValues, value: string|number, dtype: DataType): void {\n  if (dtype === 'string') {\n    (values as string[]).fill(value as string);\n  } else {\n    (values as TypedArray).fill(value as number);\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {FlipLeftRight, FlipLeftRightInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const flipLeftRightConfig: KernelConfig = {\n  kernelName: FlipLeftRight,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {image} = inputs as FlipLeftRightInputs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const output = util.getTypedArrayFromDType(\n        image.dtype as NumericDataType, util.sizeFromShape(image.shape));\n    const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n\n    const imageVals = cpuBackend.data.get(image.dataId).values as TypedArray;\n\n    for (let batchIdx = 0; batchIdx < batch; batchIdx++) {\n      const batchOffset = batchIdx * imageWidth * imageHeight * numChannels;\n\n      for (let row = 0; row < imageHeight; row++) {\n        const rowOffset = row * (imageWidth * numChannels);\n\n        for (let col = 0; col < imageWidth; col++) {\n          const colOffset = col * numChannels;\n\n          for (let channel = 0; channel < numChannels; channel++) {\n            const coordX = Math.round(imageWidth - col - 1);\n            const outIdx = batchOffset + rowOffset + colOffset + channel;\n\n            let outputValue = imageVals[outIdx];\n            // If the coordinate position falls within the image boundaries...\n            if (coordX >= 0 && coordX < imageWidth) {\n              // set the output to the image value at the coordinate position.\n              const rotatedColOffset = coordX * numChannels;\n              const imageIdx =\n                  batchOffset + rowOffset + rotatedColOffset + channel;\n              outputValue = imageVals[imageIdx];\n            }\n            output[outIdx] = outputValue;\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(output, image.shape, image.dtype);\n    return {dataId, shape: image.shape, dtype: image.dtype};\n  }\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FloorDiv, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const floorDivImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => Math.floor(a / b));\nexport const floorDiv =\n    binaryKernelFunc(FloorDiv, floorDivImpl, null /* complexImpl */, 'int32');\n\nexport const floorDivConfig: KernelConfig = {\n  kernelName: FloorDiv,\n  backendName: 'cpu',\n  kernelFunc: floorDiv\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FusedConv2D, FusedConv2DAttrs, FusedConv2DInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {applyActivation} from '../utils/fused_utils';\nimport {add} from './Add';\nimport {conv2D} from './Conv2D';\n\nexport function fusedConv2D(args: {\n  inputs: FusedConv2DInputs,\n  backend: MathBackendCPU,\n  attrs: FusedConv2DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n\n  let result = conv2D({\n    inputs: {x, filter},\n    backend,\n    attrs: {strides, pad, dataFormat, dilations, dimRoundingMode}\n  });\n\n  if (bias) {\n    const resultOld = result;\n    result = add({inputs: {a: result, b: bias}, backend}) as TensorInfo;\n    backend.disposeIntermediateTensorInfo(resultOld);\n  }\n\n  if (activation) {\n    const resultOld = result;\n    result = applyActivation(\n        backend, result, activation, preluActivationWeights, leakyreluAlpha);\n    backend.disposeIntermediateTensorInfo(resultOld);\n  }\n\n  return result;\n}\n\nexport const fusedConv2DConfig: KernelConfig = {\n  kernelName: FusedConv2D,\n  backendName: 'cpu',\n  kernelFunc: fusedConv2D as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FusedDepthwiseConv2D, FusedDepthwiseConv2DAttrs, FusedDepthwiseConv2DInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {applyActivation} from '../utils/fused_utils';\nimport {add} from './Add';\nimport {depthwiseConv2dNative} from './DepthwiseConv2dNative';\n\nexport function fusedDepthwiseConv2D(args: {\n  inputs: FusedDepthwiseConv2DInputs,\n  backend: MathBackendCPU,\n  attrs: FusedDepthwiseConv2DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n\n  let result = depthwiseConv2dNative({\n    inputs: {x, filter},\n    backend,\n    attrs: {strides, pad, dataFormat, dilations, dimRoundingMode}\n  });\n\n  if (bias) {\n    const oldResult = result;\n    result = add({inputs: {a: result, b: bias}, backend}) as TensorInfo;\n    backend.disposeIntermediateTensorInfo(oldResult);\n  }\n  if (activation) {\n    const oldResult = result;\n    result = applyActivation(\n        backend, result, activation, preluActivationWeights, leakyreluAlpha);\n    backend.disposeIntermediateTensorInfo(oldResult);\n  }\n\n  return result;\n}\n\nexport const fusedDepthwiseConv2DConfig: KernelConfig = {\n  kernelName: FusedDepthwiseConv2D,\n  backendName: 'cpu',\n  kernelFunc: fusedDepthwiseConv2D as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, GatherNd, GatherNdInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {gatherNdImpl} from './GatherNd_Impl';\n\nexport function gatherNd(\n    args: {inputs: GatherNdInputs, backend: MathBackendCPU}): TensorInfo {\n  const {inputs, backend} = args;\n  const {params, indices} = inputs;\n\n  const paramsSize = util.sizeFromShape(params.shape);\n\n  const indicesShape = indices.shape;\n  const sliceRank = indicesShape[indicesShape.length - 1];\n\n  const [resultShape, numSlices, sliceSize, strides] =\n      backend_util.prepareAndValidate(params, indices);\n  if (numSlices === 0) {\n    return backend.makeTensorInfo(resultShape, params.dtype, []);\n  }\n\n  const indicesData = backend.data.get(indices.dataId).values as TypedArray;\n  const paramsBuf = backend.bufferSync(params);\n  const outBuf = gatherNdImpl(\n      indicesData, paramsBuf, params.dtype, numSlices, sliceRank, sliceSize,\n      strides, params.shape, paramsSize);\n\n  return backend.makeTensorInfo(resultShape, params.dtype, outBuf.values);\n}\n\nexport const gatherNdConfig: KernelConfig = {\n  kernelName: GatherNd,\n  backendName: 'cpu',\n  kernelFunc: gatherNd as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, GatherV2, GatherV2Attrs, GatherV2Inputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {gatherV2Impl} from './GatherV2_impl';\nimport {reshape} from './Reshape';\n\nexport function gatherV2(args: {\n  inputs: GatherV2Inputs,\n  backend: MathBackendCPU,\n  attrs: GatherV2Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, indices} = inputs;\n  const {axis, batchDims} = attrs;\n\n  assertNotComplex([x, indices], 'gatherV2');\n\n  let $batchDims = batchDims;\n\n  if (batchDims == null) {\n    $batchDims = 0;\n  }\n\n  const indicesSize = util.sizeFromShape(indices.shape);\n\n  const parsedAxis = util.parseAxisParam(axis, x.shape)[0];\n  const shapeInfo = backend_util.segment_util.collectGatherOpShapeInfo(\n      x, indices, parsedAxis, $batchDims);\n\n  const flattenX = reshape({\n    inputs: {x},\n    backend,\n    attrs: {\n      shape: [\n        shapeInfo.batchSize, shapeInfo.outerSize, shapeInfo.dimSize,\n        shapeInfo.sliceSize\n      ]\n    }\n  });\n\n  const flattenIndex = reshape({\n    inputs: {x: indices},\n    backend,\n    attrs: {shape: [shapeInfo.batchSize, indicesSize / shapeInfo.batchSize]}\n  });\n\n  const flattenOutputShape = [\n    shapeInfo.batchSize, shapeInfo.outerSize, indicesSize / shapeInfo.batchSize,\n    shapeInfo.sliceSize\n  ];\n\n  const indicesBuf = backend.bufferSync(flattenIndex);\n  const xBuf = backend.bufferSync(flattenX);\n  const outBuf = gatherV2Impl(xBuf, indicesBuf, flattenOutputShape);\n\n  backend.disposeIntermediateTensorInfo(flattenX);\n  backend.disposeIntermediateTensorInfo(flattenIndex);\n\n  return backend.makeTensorInfo(\n      shapeInfo.outputShape, outBuf.dtype, outBuf.values);\n}\n\nexport const gatherV2Config: KernelConfig = {\n  kernelName: GatherV2,\n  backendName: 'cpu',\n  kernelFunc: gatherV2 as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IFFT, IFFTInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {fftBatch} from '../utils/fft_utils';\nimport {reshape} from './Reshape';\n\nexport function ifft(args: {inputs: IFFTInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  const inputSize = util.sizeFromShape(input.shape);\n\n  // Collapse all outer dimensions to a single batch dimension.\n  const innerDimensionSize = input.shape[input.shape.length - 1];\n  const batch = inputSize / innerDimensionSize;\n\n  const input2D = reshape({\n    inputs: {x: input},\n    backend,\n    attrs: {shape: [batch, innerDimensionSize]}\n  });\n\n  const result = fftBatch(input2D, true, backend);\n\n  const resultReshaped =\n      reshape({inputs: {x: result}, backend, attrs: {shape: input.shape}});\n\n  backend.disposeIntermediateTensorInfo(input2D);\n  backend.disposeIntermediateTensorInfo(result);\n\n  return resultReshaped;\n}\n\nexport const ifftConfig: KernelConfig = {\n  kernelName: IFFT,\n  backendName: 'cpu',\n  kernelFunc: ifft as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsFinite, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const isFinite =\n    unaryKernelFunc(IsFinite, (xi) => Number.isFinite(xi) ? 1 : 0, 'bool');\n\nexport const isFiniteConfig: KernelConfig = {\n  kernelName: IsFinite,\n  backendName: 'cpu',\n  kernelFunc: isFinite,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsInf, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const isInf =\n    unaryKernelFunc(IsInf, (xi) => Math.abs(xi) === Infinity ? 1 : 0, 'bool');\n\nexport const isInfConfig: KernelConfig = {\n  kernelName: IsInf,\n  backendName: 'cpu',\n  kernelFunc: isInf,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsNan, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const isNaN =\n    unaryKernelFunc(IsNan, (xi) => Number.isNaN(xi) ? 1 : 0, 'bool');\n\nexport const isNaNConfig: KernelConfig = {\n  kernelName: IsNan,\n  backendName: 'cpu',\n  kernelFunc: isNaN,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LinSpace, LinSpaceAttrs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {linSpaceImpl} from './LinSpace_impl';\n\nexport function linSpace(args: {backend: MathBackendCPU, attrs: LinSpaceAttrs}):\n    TensorInfo {\n  const {backend, attrs} = args;\n  const {start, stop, num} = attrs;\n\n  const outVals = linSpaceImpl(start, stop, num);\n\n  return backend.makeTensorInfo([outVals.length], 'float32', outVals);\n}\n\nexport const linSpaceConfig: KernelConfig = {\n  kernelName: LinSpace,\n  backendName: 'cpu',\n  kernelFunc: linSpace as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Log1p} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const log1p = unaryKernelFunc(Log1p, (xi) => Math.log1p(xi));\n\nexport const log1pConfig: KernelConfig = {\n  kernelName: Log1p,\n  backendName: 'cpu',\n  kernelFunc: log1p,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LogicalAnd} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const logicalAndImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => a && b);\nexport const logicalAnd = binaryKernelFunc(\n    LogicalAnd, logicalAndImpl, null /* complexImpl */, 'bool');\n\nexport const logicalAndConfig: KernelConfig = {\n  kernelName: LogicalAnd,\n  backendName: 'cpu',\n  kernelFunc: logicalAnd\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LogicalNot} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const logicalNot =\n    unaryKernelFunc(LogicalNot, (xi) => xi ? 0 : 1, 'bool');\n\nexport const logicalNotConfig: KernelConfig = {\n  kernelName: LogicalNot,\n  backendName: 'cpu',\n  kernelFunc: logicalNot,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LogicalOr} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const logicalOrImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => a || b);\nexport const logicalOr =\n    binaryKernelFunc(LogicalOr, logicalOrImpl, null /* complexImpl */, 'bool');\n\nexport const logicalOrConfig: KernelConfig = {\n  kernelName: LogicalOr,\n  backendName: 'cpu',\n  kernelFunc: logicalOr\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LRN, LRNAttrs, LRNInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function lRN(\n    args: {inputs: LRNInputs, backend: MathBackendCPU, attrs: LRNAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {depthRadius, bias, alpha, beta} = attrs;\n\n  assertNotComplex(x, 'LRN');\n\n  const channels = x.shape[3];\n  const maxD = channels - 1;\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const size = util.sizeFromShape(x.shape);\n  const result = new Float32Array(size);\n\n  function sumAcrossChannels(offset: number) {\n    const currentChannel = offset % channels;\n    let beginSumOffset =\n        offset - currentChannel + Math.max(0, currentChannel - depthRadius);\n    const endSumOffset =\n        offset - currentChannel + Math.min(currentChannel + depthRadius, maxD);\n\n    let sum = 0.0;\n    for (; beginSumOffset <= endSumOffset; beginSumOffset++) {\n      const z = xValues[beginSumOffset];\n      sum += z * z;\n    }\n    return sum;\n  }\n\n  for (let offset = 0; offset < size; offset++) {\n    const sum = sumAcrossChannels(offset);\n    const val = xValues[offset] * Math.pow(bias + alpha * sum, -beta);\n    result[offset] = val;\n  }\n\n  return backend.makeTensorInfo(x.shape, x.dtype, result);\n}\n\nexport const lRNConfig: KernelConfig = {\n  kernelName: LRN,\n  backendName: 'cpu',\n  kernelFunc: lRN as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LRNGrad, LRNGradAttrs, LRNGradInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function lRNGrad(\n    args:\n        {inputs: LRNGradInputs, backend: MathBackendCPU, attrs: LRNGradAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, y, dy} = inputs;\n  const {depthRadius, bias, alpha, beta} = attrs;\n\n  assertNotComplex(dy, 'LRNGrad');\n\n  const dySize = util.sizeFromShape(dy.shape);\n\n  const channels = dy.shape[3];\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const yValues = backend.data.get(y.dataId).values as TypedArray;\n  const result = new Float32Array(dySize);\n  const size = dySize;\n\n  for (let offset = 0; offset < size; offset++) {\n    const currentChannel = offset % channels;\n    const depthBegin =\n        (offset - currentChannel) + Math.max(0, currentChannel - depthRadius);\n    const depthEnd = (offset - currentChannel) +\n        Math.min(channels, currentChannel + depthRadius + 1);\n\n    let norm = 0;\n    for (let k = depthBegin; k < depthEnd; k++) {\n      norm += Math.pow(xValues[k], 2);\n    }\n    norm = alpha * norm + bias;\n\n    for (let k = depthBegin; k < depthEnd; k++) {\n      let dyi = -2 * alpha * beta * xValues[k] * yValues[offset] / norm;\n      if (offset === k) {\n        dyi += Math.pow(norm, -beta);\n      }\n      dyi *= dyValues[offset];\n      result[k] += dyi;\n    }\n  }\n\n  return backend.makeTensorInfo(dy.shape, x.dtype, result);\n}\n\nexport const lRNGradConfig: KernelConfig = {\n  kernelName: LRNGrad,\n  backendName: 'cpu',\n  kernelFunc: lRNGrad as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelFunc, Max, MaxAttrs, MaxInputs, TensorInfo} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig} from '@tensorflow/tfjs-core';\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {maxImpl} from './Max_impl';\nimport {transposeImpl} from './Transpose_impl';\n\nexport function max(\n    args: {inputs: MaxInputs, backend: MathBackendCPU, attrs: MaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {reductionIndices, keepDims} = attrs;\n  const cpuBackend = backend;\n  let xShape = x.shape;\n  const xRank = xShape.length;\n\n  const origAxes = util.parseAxisParam(reductionIndices, xShape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let xVals = cpuBackend.data.get(x.dataId).values as TypedArray;\n  if (permutedAxes != null) {\n    const newShape: number[] = new Array(xRank);\n    for (let i = 0; i < newShape.length; i++) {\n      newShape[i] = xShape[permutedAxes[i]];\n    }\n\n    xVals = transposeImpl(xVals, xShape, x.dtype, permutedAxes, newShape);\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n\n    xShape = newShape;\n  }\n\n  assertNotComplex(x, 'max');\n  backend_util.assertAxesAreInnerMostDims('max', axes, xRank);\n  const [maxOutShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(xShape, axes);\n\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  const result = maxImpl(xVals, reduceSize, maxOutShape, x.dtype);\n  const dataId = cpuBackend.write(result, maxOutShape, x.dtype);\n\n  let outShape = maxOutShape;\n  if (keepDims) {\n    // reshape\n    const newShape = backend_util.expandShapeToKeepDim(maxOutShape, origAxes);\n    outShape = newShape;\n  }\n\n  return {dataId, shape: outShape, dtype: x.dtype};\n}\n\nexport const maxConfig: KernelConfig = {\n  kernelName: Max,\n  backendName: 'cpu',\n  kernelFunc: max as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPool, MaxPoolAttrs, MaxPoolInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {pool} from '../utils/pool_utils';\nimport {identity} from './Identity';\n\nexport function maxPool(\n    args:\n        {inputs: MaxPoolInputs, backend: MathBackendCPU, attrs: MaxPoolAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  assertNotComplex(x, 'maxPool');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations = 1;\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in maxPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  let res: TensorInfo;\n\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n      util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    res = identity({inputs: {x}, backend});\n  } else {\n    const xValues = backend.data.get(x.dataId).values as TypedArray;\n    const strides = util.computeStrides(x.shape);\n    const buffer = pool(xValues, x.shape, x.dtype, strides, convInfo, 'max');\n    res = backend.makeTensorInfo(\n        convInfo.outShape, x.dtype, buffer.values as TypedArray);\n  }\n  return res;\n}\n\nexport const maxPoolConfig: KernelConfig = {\n  kernelName: MaxPool,\n  backendName: 'cpu',\n  kernelFunc: maxPool as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, MaxPool3D, MaxPool3DAttrs, MaxPool3DInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {pool3d} from '../utils/pool_utils';\n\nexport function maxPool3D(args: {\n  inputs: MaxPool3DInputs,\n  backend: MathBackendCPU,\n  attrs: MaxPool3DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode, dataFormat} = attrs;\n\n  assertNotComplex(x, 'maxPool3d');\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad, dimRoundingMode, dataFormat);\n\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const outBuf = pool3d(\n      xValues, x.shape, x.dtype, util.computeStrides(x.shape), convInfo, 'max');\n\n  return backend.makeTensorInfo(outBuf.shape, 'float32', outBuf.values);\n}\n\nexport const maxPool3DConfig: KernelConfig = {\n  kernelName: MaxPool3D,\n  backendName: 'cpu',\n  kernelFunc: maxPool3D as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, buffer, KernelConfig, KernelFunc, MaxPool3DGrad, MaxPool3DGradAttrs, MaxPool3DGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {maxPool3dPositions} from '../utils/pool_utils';\n\nexport function maxPool3DGrad(args: {\n  inputs: MaxPool3DGradInputs,\n  backend: MathBackendCPU,\n  attrs: MaxPool3DGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n\n  assertNotComplex([dy, input], 'maxPool3DGrad');\n\n  const convInfo = backend_util.computePool3DInfo(\n      input.shape as [number, number, number, number, number], filterSize,\n      strides, 1 /* dilations */, pad, dimRoundingMode);\n\n  const inputBuf = backend.bufferSync(input);\n  const maxPosBuf = maxPool3dPositions(inputBuf, convInfo);\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx = buffer(input.shape, 'float32');\n\n  const dyBuf = backend.bufferSync(dy);\n\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth) {\n        for (let dxRow = 0; dxRow < convInfo.inHeight; ++dxRow) {\n          for (let dxCol = 0; dxCol < convInfo.inWidth; ++dxCol) {\n            // Shader code begins\n            const dyDepthCorner = dxDepth - padFront;\n            const dyRowCorner = dxRow - padTop;\n            const dyColCorner = dxCol - padLeft;\n            let dotProd = 0;\n            for (let wDepth = 0; wDepth < effectiveFilterDepth;\n                 wDepth += dilationDepth) {\n              const dyDepth = (dyDepthCorner + wDepth) / strideDepth;\n              if (dyDepth < 0 || dyDepth >= convInfo.outDepth ||\n                  Math.floor(dyDepth) !== dyDepth) {\n                continue;\n              }\n              for (let wRow = 0; wRow < effectiveFilterHeight;\n                   wRow += dilationHeight) {\n                const dyRow = (dyRowCorner + wRow) / strideHeight;\n                if (dyRow < 0 || dyRow >= convInfo.outHeight ||\n                    Math.floor(dyRow) !== dyRow) {\n                  continue;\n                }\n                for (let wCol = 0; wCol < effectiveFilterWidth;\n                     wCol += dilationWidth) {\n                  const dyCol = (dyColCorner + wCol) / strideWidth;\n                  if (dyCol < 0 || dyCol >= convInfo.outWidth ||\n                      Math.floor(dyCol) !== dyCol) {\n                    continue;\n                  }\n\n                  const maxPos = effectiveFilterDepth * effectiveFilterHeight *\n                          effectiveFilterWidth -\n                      1 -\n                      (maxPosBuf.get(batch, dyDepth, dyRow, dyCol, channel) as\n                       number);\n                  const curPos =\n                      wDepth * effectiveFilterHeight * effectiveFilterWidth +\n                      wRow * effectiveFilterWidth + wCol;\n\n                  const mask = maxPos === curPos ? 1 : 0;\n                  if (mask === 0) {\n                    continue;\n                  }\n\n                  const pixel =\n                      dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                  dotProd += pixel * mask;\n                }\n              }\n            }\n            dx.set(dotProd, batch, dxDepth, dxRow, dxCol, channel);\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const maxPool3DGradConfig: KernelConfig = {\n  kernelName: MaxPool3DGrad,\n  backendName: 'cpu',\n  kernelFunc: maxPool3DGrad as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, buffer, KernelConfig, KernelFunc, MaxPoolGrad, MaxPoolGradAttrs, MaxPoolGradInputs, Rank, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {maxPoolPositions} from '../utils/pool_utils';\n\nexport function maxPoolGrad(args: {\n  inputs: MaxPoolGradInputs,\n  backend: MathBackendCPU,\n  attrs: MaxPoolGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input, output} = inputs;\n  const x = input;\n  assertNotComplex([input, output], 'maxPoolGrad');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad, dimRoundingMode);\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const maxPosBuf = buffer(\n      convInfo.outShape, x.dtype,\n      maxPoolPositions(xValues, x.shape, x.dtype, convInfo).values);\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx =\n      buffer<Rank.R4>(x.shape as [number, number, number, number], 'float32');\n\n  const dyData = backend.data.get(dy.dataId).values as Float32Array;\n  const dyBuf = buffer<Rank.R4>(\n      dy.shape as [number, number, number, number], 'float32', dyData);\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let dxR = 0; dxR < convInfo.inHeight; ++dxR) {\n        for (let dxC = 0; dxC < convInfo.inWidth; ++dxC) {\n          // Shader code begins.\n          const dyRCorner = dxR - padTop;\n          const dyCCorner = dxC - padLeft;\n          let dotProd = 0;\n          for (let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight) {\n            const dyR = (dyRCorner + wR) / strideHeight;\n            if (dyR < 0 || dyR >= convInfo.outHeight ||\n                Math.floor(dyR) !== dyR) {\n              continue;\n            }\n            for (let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth) {\n              const dyC = (dyCCorner + wC) / strideWidth;\n              if (dyC < 0 || dyC >= convInfo.outWidth ||\n                  Math.floor(dyC) !== dyC) {\n                continue;\n              }\n              const maxPos = effectiveFilterHeight * effectiveFilterWidth - 1 -\n                  (maxPosBuf.get(b, dyR, dyC, d) as number);\n              const curPos = wR * effectiveFilterWidth + wC;\n\n              const mask = maxPos === curPos ? 1 : 0;\n              if (mask === 0) {\n                continue;\n              }\n\n              const pixel = dyBuf.get(b, dyR, dyC, d);\n              dotProd += pixel * mask;\n            }\n          }\n          dx.set(dotProd, b, dxR, dxC, d);\n        }\n      }\n    }\n  }\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const maxPoolGradConfig: KernelConfig = {\n  kernelName: MaxPoolGrad,\n  backendName: 'cpu',\n  kernelFunc: maxPoolGrad as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {MaxPoolWithArgmax, MaxPoolWithArgmaxAttrs, MaxPoolWithArgmaxInputs} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig, TypedArray} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {maxPoolWithArgmaxImpl} from './MaxPoolWithArgmax_impl';\n\nexport const maxPoolWithArgmaxConfig: KernelConfig = {\n  kernelName: MaxPoolWithArgmax,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {x} = inputs as MaxPoolWithArgmaxInputs;\n    const {filterSize, strides, pad, includeBatchInIndex} =\n        attrs as {} as MaxPoolWithArgmaxAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n    assertNotComplex(x, 'MaxPoolWithArgmax');\n\n    const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const convInfo = backend_util.computePool2DInfo(\n        x.shape as [number, number, number, number], filterSize, strides,\n        [1, 1], pad);\n    const [pooled, indexes] = maxPoolWithArgmaxImpl(\n        values, x.shape, x.dtype, includeBatchInIndex, convInfo);\n\n    const pooledDataId =\n        cpuBackend.write(pooled as Float32Array, convInfo.outShape, x.dtype);\n    const indexesDataId =\n        cpuBackend.write(indexes as Int32Array, convInfo.outShape, x.dtype);\n    return [\n      {dataId: pooledDataId, shape: convInfo.outShape, dtype: x.dtype},\n      {dataId: indexesDataId, shape: convInfo.outShape, dtype: 'int32'}\n    ];\n  }\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {maxPoolPositions, pool} from '../utils/pool_utils';\nexport function maxPoolWithArgmaxImpl(\n    xValues: TypedArray, xShape: number[], dtype: DataType,\n    includeBatchInIndex: boolean, convInfo: backend_util.Conv2DInfo) {\n  const strides = util.computeStrides(xShape);\n  const maxPools = pool(xValues, xShape, dtype, strides, convInfo, 'max');\n  const maxPositions = maxPoolPositions(\n      xValues, xShape, dtype, convInfo, true, includeBatchInIndex);\n\n  return [maxPools.values, maxPositions.values];\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Mean, MeanAttrs, MeanInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {cast} from './Cast';\nimport {div} from './RealDiv';\nimport {sum} from './Sum';\n\nexport function mean(\n    args: {inputs: MeanInputs, backend: MathBackendCPU, attrs: MeanAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  const axes = util.parseAxisParam(axis, x.shape);\n  const shapes = backend_util.computeOutAndReduceShapes(x.shape, axes);\n  const reduceShape = shapes[1];\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const toDispose = [];\n  const reduceSizeScalar =\n      backend.makeTensorInfo([], 'float32', new Float32Array([reduceSize]));\n  toDispose.push(reduceSizeScalar);\n\n  const $x = cast({inputs: {x}, backend, attrs: {dtype: 'float32'}});\n  toDispose.push($x);\n\n  const res =\n      div({inputs: {a: $x, b: reduceSizeScalar}, backend}) as TensorInfo;\n  toDispose.push(res);\n\n  const result = sum({inputs: {x: res}, backend, attrs: {axis, keepDims}});\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const meanConfig: KernelConfig = {\n  kernelName: Mean,\n  backendName: 'cpu',\n  kernelFunc: mean as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Min, MinAttrs, MinInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function min(\n    args: {inputs: MinInputs, backend: MathBackendCPU, attrs: MinAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'min');\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('min', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const vals = util.makeZerosTypedArray(util.sizeFromShape(outShape), $x.dtype);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let min = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (Number.isNaN(value) ||\n          value < min) {  // comparison with NaN always return false\n        min = value;\n      }\n    }\n    vals[i] = min;\n  }\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo($x);\n  }\n\n  const result = backend.makeTensorInfo(outShape, $x.dtype, vals);\n\n  if (keepDims) {\n    const expandedShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    const reshapedResult =\n        reshape({inputs: {x: result}, backend, attrs: {shape: expandedShape}});\n\n    backend.disposeIntermediateTensorInfo(result);\n\n    return reshapedResult;\n  }\n\n  return result;\n}\n\nexport const minConfig: KernelConfig = {\n  kernelName: Min,\n  backendName: 'cpu',\n  kernelFunc: min as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, MirrorPad, MirrorPadAttrs, MirrorPadInputs, NumericDataType, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function mirrorPad(args: {\n  inputs: MirrorPadInputs,\n  backend: MathBackendCPU,\n  attrs: MirrorPadAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {paddings, mode} = attrs;\n\n  assertNotComplex(x, 'mirrorPad');\n\n  const outShape = paddings.map(\n      (p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n\n  const start = paddings.map(p => p[0]);\n  const end = paddings.map((p, i) => p[0] + x.shape[i]);\n  const offset = mode === 'reflect' ? 0 : 1;\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const xRank = x.shape.length;\n  const xStrides = util.computeStrides(x.shape);\n\n  const resultSize = util.sizeFromShape(outShape);\n  const resultRank = outShape.length;\n  const resultStrides = util.computeStrides(outShape);\n  const resVals =\n      util.getTypedArrayFromDType(x.dtype as NumericDataType, resultSize);\n\n  for (let i = 0; i < resultSize; i++) {\n    let coords = util.indexToLoc(i, resultRank, resultStrides);\n    for (let i = 0; i < resultRank; i++) {\n      if (coords[i] < start[i]) {\n        coords[i] = start[i] * 2 - coords[i] - offset;\n      } else if (coords[i] >= end[i]) {\n        coords[i] = (end[i] - 1) * 2 - coords[i] + offset;\n      }\n    }\n    coords = coords.map((c, i) => c - start[i]);\n\n    const inIndex = util.locToIndex(coords, xRank, xStrides);\n\n    resVals[i] = xVals[inIndex];\n  }\n\n  const outId = backend.write(resVals, outShape, x.dtype);\n\n  return {dataId: outId, shape: outShape, dtype: x.dtype};\n}\n\nexport const mirrorPadConfig: KernelConfig = {\n  kernelName: MirrorPad,\n  backendName: 'cpu',\n  kernelFunc: mirrorPad as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Mod} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const modImpl =\n    createSimpleBinaryKernelImpl(((aValue: number, bValue: number) => {\n      const rem = aValue % bValue;\n      if ((aValue < 0 && bValue < 0) || (aValue >= 0 && bValue >= 0)) {\n        return rem;\n      } else {\n        return (rem + bValue) % bValue;\n      }\n    }));\n\nexport const mod = binaryKernelFunc(Mod, modImpl);\n\nexport const modConfig: KernelConfig = {\n  kernelName: Mod,\n  backendName: 'cpu',\n  kernelFunc: mod\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Multinomial, MultinomialAttrs, MultinomialInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\nimport * as seedrandom from 'seedrandom';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {softmax} from './Softmax';\n\nexport function multinomial(args: {\n  inputs: MultinomialInputs,\n  backend: MathBackendCPU,\n  attrs: MultinomialAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {logits} = inputs;\n  const {numSamples, seed, normalized} = attrs;\n\n  assertNotComplex(logits, 'multinomial');\n\n  const probabilities = normalized ?\n      logits :\n      softmax({inputs: {logits}, backend, attrs: {dim: -1}});\n\n  const batchSize = probabilities.shape[0];\n  const numEvents = probabilities.shape[1];\n  const probVals = backend.data.get(probabilities.dataId).values as TypedArray;\n  const resShape = [batchSize, numSamples];\n  const resVals =\n      util.makeZerosTypedArray(util.sizeFromShape(resShape), 'int32');\n\n  for (let b = 0; b < batchSize; ++b) {\n    const offset = b * numEvents;\n    // The cdf won't include the last event. It will be implicit if no other\n    // event happened.\n    const cdf = new Float32Array(numEvents - 1);\n    cdf[0] = probVals[offset];\n    for (let event = 1; event < cdf.length; ++event) {\n      cdf[event] = cdf[event - 1] + probVals[offset + event];\n    }\n\n    const random = seedrandom.alea(seed.toString());\n    const outOffset = b * numSamples;\n    for (let sampleId = 0; sampleId < numSamples; ++sampleId) {\n      const r = random();\n\n      // Assume last event happened by default.\n      resVals[outOffset + sampleId] = cdf.length;\n\n      for (let event = 0; event < cdf.length; event++) {\n        if (r < cdf[event]) {\n          resVals[outOffset + sampleId] = event;\n          break;\n        }\n      }\n    }\n  }\n\n  if (!normalized) {\n    backend.disposeIntermediateTensorInfo(probabilities);\n  }\n\n  return backend.makeTensorInfo(resShape, 'int32', resVals);\n}\n\nexport const multinomialConfig: KernelConfig = {\n  kernelName: Multinomial,\n  backendName: 'cpu',\n  kernelFunc: multinomial as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Softmax, SoftmaxAttrs, SoftmaxInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {exp} from './Exp';\nimport {max} from './Max';\nimport {div} from './RealDiv';\nimport {reshape} from './Reshape';\nimport {sub} from './Sub';\nimport {sum} from './Sum';\n\nexport function softmax(\n    args:\n        {inputs: SoftmaxInputs, backend: MathBackendCPU, attrs: SoftmaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {logits} = inputs;\n  const {dim} = attrs;\n\n  const logitsRank = logits.shape.length;\n\n  let $dim = dim;\n  if ($dim === -1) {\n    $dim = logitsRank - 1;\n  }\n  if ($dim !== logitsRank - 1) {\n    throw Error(\n        'Softmax along a non-last dimension is not yet supported. ' +\n        `Logits was rank ${logitsRank} and dim was ${$dim}`);\n  }\n\n  const axes = util.parseAxisParam([$dim], logits.shape);\n  const maxLogit = max({\n    inputs: {x: logits},\n    backend,\n    attrs: {reductionIndices: axes, keepDims: false}\n  });\n  const expandedShape = backend_util.expandShapeToKeepDim(maxLogit.shape, axes);\n\n  const maxLogitReshaped =\n      reshape({inputs: {x: maxLogit}, backend, attrs: {shape: expandedShape}});\n  const a =\n      sub({inputs: {a: logits, b: maxLogitReshaped}, backend}) as TensorInfo;\n  const b = exp({inputs: {x: a}, backend}) as TensorInfo;\n  const sumExp =\n      sum({inputs: {x: b}, backend, attrs: {axis: axes, keepDims: false}});\n  const sumReshaped =\n      reshape({inputs: {x: sumExp}, backend, attrs: {shape: expandedShape}});\n\n  const result = div({inputs: {a: b, b: sumReshaped}, backend}) as TensorInfo;\n\n  backend.disposeIntermediateTensorInfo(maxLogit);\n  backend.disposeIntermediateTensorInfo(maxLogitReshaped);\n  backend.disposeIntermediateTensorInfo(a);\n  backend.disposeIntermediateTensorInfo(b);\n  backend.disposeIntermediateTensorInfo(sumExp);\n  backend.disposeIntermediateTensorInfo(sumReshaped);\n\n  return result;\n}\n\nexport const softmaxConfig: KernelConfig = {\n  kernelName: Softmax,\n  backendName: 'cpu',\n  kernelFunc: softmax as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV3, NonMaxSuppressionV3Attrs, NonMaxSuppressionV3Inputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV3Impl = kernel_impls.nonMaxSuppressionV3Impl;\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function nonMaxSuppressionV3(args: {\n  inputs: NonMaxSuppressionV3Inputs,\n  backend: MathBackendCPU,\n  attrs: NonMaxSuppressionV3Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold} = attrs;\n\n  assertNotComplex(boxes, 'NonMaxSuppression');\n\n  const boxesVals = backend.data.get(boxes.dataId).values as TypedArray;\n  const scoresVals = backend.data.get(scores.dataId).values as TypedArray;\n\n  const {selectedIndices} = nonMaxSuppressionV3Impl(\n      boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);\n\n  return backend.makeTensorInfo(\n      [selectedIndices.length], 'int32', new Int32Array(selectedIndices));\n}\n\nexport const nonMaxSuppressionV3Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV3,\n  backendName: 'cpu',\n  kernelFunc: nonMaxSuppressionV3 as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV4, NonMaxSuppressionV4Attrs, NonMaxSuppressionV4Inputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV4Impl = kernel_impls.nonMaxSuppressionV4Impl;\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function nonMaxSuppressionV4(args: {\n  inputs: NonMaxSuppressionV4Inputs,\n  backend: MathBackendCPU,\n  attrs: NonMaxSuppressionV4Attrs\n}): [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize} =\n      attrs;\n\n  assertNotComplex(boxes, 'NonMaxSuppressionPadded');\n\n  const boxesVals = backend.data.get(boxes.dataId).values as TypedArray;\n  const scoresVals = backend.data.get(scores.dataId).values as TypedArray;\n\n  const {selectedIndices, validOutputs} = nonMaxSuppressionV4Impl(\n      boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold,\n      padToMaxOutputSize);\n\n  return [\n    backend.makeTensorInfo(\n        [selectedIndices.length], 'int32', new Int32Array(selectedIndices)),\n    backend.makeTensorInfo([], 'int32', new Int32Array([validOutputs]))\n  ];\n}\nexport const nonMaxSuppressionV4Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV4,\n  backendName: 'cpu',\n  kernelFunc: nonMaxSuppressionV4 as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV5, NonMaxSuppressionV5Attrs, NonMaxSuppressionV5Inputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV5Impl = kernel_impls.nonMaxSuppressionV5Impl;\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function nonMaxSuppressionV5(args: {\n  inputs: NonMaxSuppressionV5Inputs,\n  backend: MathBackendCPU,\n  attrs: NonMaxSuppressionV5Attrs\n}): [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma} = attrs;\n\n  assertNotComplex(boxes, 'NonMaxSuppressionWithScore');\n\n  const boxesVals = backend.data.get(boxes.dataId).values as TypedArray;\n  const scoresVals = backend.data.get(scores.dataId).values as TypedArray;\n\n  const maxOutputSizeVal = maxOutputSize;\n  const iouThresholdVal = iouThreshold;\n  const scoreThresholdVal = scoreThreshold;\n  const softNmsSigmaVal = softNmsSigma;\n\n  const {selectedIndices, selectedScores} = nonMaxSuppressionV5Impl(\n      boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal,\n      scoreThresholdVal, softNmsSigmaVal);\n\n  return [\n    backend.makeTensorInfo(\n        [selectedIndices.length], 'int32', new Int32Array(selectedIndices)),\n    backend.makeTensorInfo(\n        [selectedScores.length], 'float32', new Float32Array(selectedScores))\n  ];\n}\n\nexport const nonMaxSuppressionV5Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV5,\n  backendName: 'cpu',\n  kernelFunc: nonMaxSuppressionV5 as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, OneHot, OneHotAttrs, OneHotInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function oneHot(\n    args: {inputs: OneHotInputs, backend: MathBackendCPU, attrs: OneHotAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {indices} = inputs;\n  const {depth, onValue, offValue} = attrs;\n\n  assertNotComplex(indices, 'oneHot');\n\n  const indicesSize = util.sizeFromShape(indices.shape);\n\n  const res = new Float32Array(indicesSize * depth);\n  res.fill(offValue);\n  const indicesVal = backend.data.get(indices.dataId).values as TypedArray;\n\n  for (let event = 0; event < indicesSize; ++event) {\n    if (indicesVal[event] >= 0 && indicesVal[event] < depth) {\n      res[event * depth + indicesVal[event]] = onValue;\n    }\n  }\n\n  return backend.makeTensorInfo([...indices.shape, depth], 'int32', res);\n}\n\nexport const oneHotConfig: KernelConfig = {\n  kernelName: OneHot,\n  backendName: 'cpu',\n  kernelFunc: oneHot as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, OnesLike, OnesLikeInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {complex} from './Complex';\nimport {fill} from './Fill';\nimport {imag} from './Imag';\nimport {real} from './Real';\nimport {zerosLike} from './ZerosLike';\n\nexport function onesLike(\n    args: {inputs: OnesLikeInputs, backend: MathBackendCPU}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (x.dtype === 'string') {\n    throw new Error('onesLike is not supported for string tensors');\n  } else if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const r = onesLike({inputs: {x: realPart}, backend});\n    const imagPart = imag({inputs: {input: x}, backend});\n    const i = zerosLike({inputs: {x: imagPart}, backend});\n\n    const result = complex({inputs: {real: r, imag: i}, backend});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(r);\n    backend.disposeIntermediateTensorInfo(imagPart);\n    backend.disposeIntermediateTensorInfo(i);\n\n    return result;\n  } else {\n    return fill({backend, attrs: {shape: x.shape, value: 1, dtype: x.dtype}});\n  }\n}\n\nexport const onesLikeConfig: KernelConfig = {\n  kernelName: OnesLike,\n  backendName: 'cpu',\n  kernelFunc: onesLike as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, ZerosLike, ZerosLikeInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {complex} from './Complex';\nimport {fill} from './Fill';\nimport {imag} from './Imag';\nimport {real} from './Real';\n\nexport function zerosLike(\n    args: {inputs: ZerosLikeInputs, backend: MathBackendCPU}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (x.dtype === 'string') {\n    throw new Error('zerosLike is not supported for string tensors');\n  } else if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const r = zerosLike({inputs: {x: realPart}, backend});\n    const imagPart = imag({inputs: {input: x}, backend});\n    const i = zerosLike({inputs: {x: imagPart}, backend});\n\n    const result = complex({inputs: {real: r, imag: i}, backend});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(r);\n    backend.disposeIntermediateTensorInfo(imagPart);\n    backend.disposeIntermediateTensorInfo(i);\n\n    return result;\n  } else {\n    return fill({backend, attrs: {shape: x.shape, value: 0, dtype: x.dtype}});\n  }\n}\n\nexport const zerosLikeConfig: KernelConfig = {\n  kernelName: ZerosLike,\n  backendName: 'cpu',\n  kernelFunc: zerosLike as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Pack, PackAttrs, PackInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {concat} from './Concat';\nimport {expandDims} from './ExpandDims';\n\nexport function pack(\n    args: {inputs: PackInputs, backend: MathBackendCPU, attrs: PackAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {axis} = attrs;\n\n  if (inputs.length === 1) {\n    return expandDims(\n        {inputs: {input: inputs[0]}, backend, attrs: {dim: axis}});\n  }\n\n  const shape = inputs[0].shape;\n  const dtype = inputs[0].dtype;\n\n  inputs.forEach(t => {\n    util.assertShapesMatch(\n        shape, t.shape,\n        'All tensors passed to stack must have matching shapes');\n    util.assert(\n        dtype === t.dtype,\n        () => 'All tensors passed to stack must have matching dtypes');\n  });\n\n  const intermediateTensorInfos: TensorInfo[] = [];\n  const expandedTensors = inputs.map(t => {\n    const expandedT =\n        expandDims({inputs: {input: t}, backend, attrs: {dim: axis}});\n    intermediateTensorInfos.push(expandedT);\n    return expandedT;\n  });\n\n  const result = concat({inputs: expandedTensors, backend, attrs: {axis}});\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const packConfig: KernelConfig = {\n  kernelName: Pack,\n  backendName: 'cpu',\n  kernelFunc: pack as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, NumericDataType, PadV2, PadV2Attrs, PadV2Inputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function padV2(\n    args: {inputs: PadV2Inputs, backend: MathBackendCPU, attrs: PadV2Attrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {paddings, constantValue} = attrs;\n\n  assertNotComplex(x, 'pad');\n\n  const outShape = paddings.map(\n      (p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n\n  const start = paddings.map(p => p[0]);\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const xSize = util.sizeFromShape(x.shape);\n  const xRank = x.shape.length;\n  const xStrides = util.computeStrides(x.shape);\n\n  const resultSize = util.sizeFromShape(outShape);\n  const resultRank = outShape.length;\n  const resultStrides = util.computeStrides(outShape);\n  const resVals =\n      util.getTypedArrayFromDType(x.dtype as NumericDataType, resultSize);\n\n  if (constantValue !== 0) {\n    resVals.fill(constantValue);\n  }\n\n  for (let i = 0; i < xSize; i++) {\n    const coords = util.indexToLoc(i, xRank, xStrides);\n    const outCoords = coords.map((c, i) => c + start[i]);\n    const outIndex = util.locToIndex(outCoords, resultRank, resultStrides);\n\n    resVals[outIndex] = xVals[i];\n  }\n\n  const outId = backend.write(resVals, outShape, x.dtype);\n\n  return {dataId: outId, shape: outShape, dtype: x.dtype};\n}\n\nexport const padV2Config: KernelConfig = {\n  kernelName: PadV2,\n  backendName: 'cpu',\n  kernelFunc: padV2 as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Pow} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const powImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => Math.pow(a, b));\nexport const pow = binaryKernelFunc(Pow, powImpl);\n\nexport const powConfig: KernelConfig = {\n  kernelName: Pow,\n  backendName: 'cpu',\n  kernelFunc: pow\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Range, RangeAttrs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {rangeImpl} from './Range_impl';\n\nexport function range(args: {backend: MathBackendCPU, attrs: RangeAttrs}):\n    TensorInfo {\n  const {backend, attrs} = args;\n  const {start, stop, dtype, step} = attrs;\n\n  const values = rangeImpl(start, stop, step, dtype);\n  return backend.makeTensorInfo([values.length], dtype, values);\n}\n\nexport const rangeConfig: KernelConfig = {\n  kernelName: Range,\n  backendName: 'cpu',\n  kernelFunc: range as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Reciprocal} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const reciprocal = unaryKernelFunc(Reciprocal, (xi) => 1 / xi);\n\nexport const reciprocalConfig: KernelConfig = {\n  kernelName: Reciprocal,\n  backendName: 'cpu',\n  kernelFunc: reciprocal,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeBilinear, ResizeBilinearAttrs, ResizeBilinearInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function resizeBilinear(args: {\n  inputs: ResizeBilinearInputs,\n  backend: MathBackendCPU,\n  attrs: ResizeBilinearAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images} = inputs;\n  const {alignCorners, halfPixelCenters, size} = attrs;\n\n  assertNotComplex(images, 'resizeBilinear');\n\n  const imagesStrides = util.computeStrides(images.shape);\n  const [newHeight, newWidth] = size;\n\n  const [batch, oldHeight, oldWidth, numChannels] = images.shape;\n  const xValues = backend.data.get(images.dataId).values as TypedArray;\n  const result = new Float32Array(\n      util.sizeFromShape([batch, newHeight, newWidth, numChannels]));\n\n  const effectiveInputSize: [number, number] = [\n    (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n    (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n  ];\n\n  const effectiveOutputSize: [number, number] = [\n    (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n    (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n  ];\n  let outputIdx = 0;\n  const effectiveRowSizeRatio = effectiveInputSize[0] / effectiveOutputSize[0];\n  const effectiveColSizeRatio = effectiveInputSize[1] / effectiveOutputSize[1];\n  for (let b = 0; b < batch; b++) {\n    for (let r = 0; r < newHeight; r++) {\n      let sourceFracRow: number;\n      if (halfPixelCenters) {\n        sourceFracRow = effectiveRowSizeRatio * (r + 0.5) - 0.5;\n      } else {\n        sourceFracRow = effectiveRowSizeRatio * r;\n      }\n\n      const sourceRowFloor = Math.max(0, Math.floor(sourceFracRow));\n      const rowFrac = sourceFracRow - sourceRowFloor;\n      const sourceRowCeil = Math.min(oldHeight - 1, Math.ceil(sourceFracRow));\n      const topRowOffset =\n          b * imagesStrides[0] + sourceRowFloor * imagesStrides[1];\n      const botRowOffset =\n          b * imagesStrides[0] + sourceRowCeil * imagesStrides[1];\n      for (let c = 0; c < newWidth; c++) {\n        let sourceFracCol: number;\n        if (halfPixelCenters) {\n          sourceFracCol = effectiveColSizeRatio * (c + 0.5) - 0.5;\n        } else {\n          sourceFracCol = effectiveColSizeRatio * c;\n        }\n        const sourceColFloor = Math.max(0, Math.floor(sourceFracCol));\n        const colFrac = sourceFracCol - sourceColFloor;\n        const sourceColCeil = Math.min(oldWidth - 1, Math.ceil(sourceFracCol));\n        const topLeftOffest = topRowOffset + sourceColFloor * imagesStrides[2];\n        const botLeftOffset = botRowOffset + sourceColFloor * imagesStrides[2];\n        const topRightOffset = topRowOffset + sourceColCeil * imagesStrides[2];\n        const botRightOffest = botRowOffset + sourceColCeil * imagesStrides[2];\n        for (let d = 0; d < numChannels; d++) {\n          // Begin shader.\n\n          // Compute the fractional index of the source.\n          const topLeft = xValues[topLeftOffest + d];\n          const bottomLeft = xValues[botLeftOffset + d];\n          const topRight = xValues[topRightOffset + d];\n          const bottomRight = xValues[botRightOffest + d];\n\n          const top = topLeft + (topRight - topLeft) * colFrac;\n          const bottom = bottomLeft + (bottomRight - bottomLeft) * colFrac;\n          const newValue = top + (bottom - top) * rowFrac;\n\n          result[outputIdx++] = newValue;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(\n      [batch, newHeight, newWidth, numChannels], 'float32', result);\n}\n\nexport const resizeBilinearConfig: KernelConfig = {\n  kernelName: ResizeBilinear,\n  backendName: 'cpu',\n  kernelFunc: resizeBilinear as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeBilinearGrad, ResizeBilinearGradAttrs, ResizeBilinearGradInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function resizeBilinearGrad(args: {\n  inputs: ResizeBilinearGradInputs,\n  backend: MathBackendCPU,\n  attrs: ResizeBilinearGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images, dy} = inputs;\n  const {alignCorners} = attrs;\n\n  assertNotComplex([dy, images], 'resizeBilinearGrad');\n\n  const imagesStrides = util.computeStrides(images.shape);\n\n  const [batch, xHeight, xWidth, depth] = images.shape;\n  const [, yHeight, yWidth] = dy.shape;\n\n  const output = new Float32Array(batch * xHeight * xWidth * depth);\n\n  // In the backwards pass, we want to find the pixels that were generated\n  // for each pixel in the input image the forward pass and add the\n  // corresponding coefficient from dy to the gradient (with some\n  // interpolation).\n\n  const effectiveXSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n    (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n  ];\n\n  const effectiveYSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n    (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n  ];\n\n  const heightScale = effectiveXSize[0] / effectiveYSize[0];\n  const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n  // Reference implementation\n  // tslint:disable-next-line:max-line-length\n  // https://github.com/tensorflow/tensorflow/blob/3039375c86a5bbc9610c7725dcaa95d635f87ba2/tensorflow/core/kernels/resize_bilinear_op.cc#L275\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  let offset = 0;\n  for (let b = 0; b < batch; b++) {\n    const bOffset = b * imagesStrides[0];\n    for (let r = 0; r < yHeight; r++) {\n      const dxR = r * heightScale;\n      const topDxRIndex = Math.floor(dxR);\n      const bottomDxRIndex = Math.min(Math.ceil(dxR), xHeight - 1);\n\n      const topDxROffset = bOffset + topDxRIndex * imagesStrides[1];\n      const bottomDxROffset = bOffset + bottomDxRIndex * imagesStrides[1];\n\n      const dxRLerp = dxR - topDxRIndex;\n      const inverseDxRLerp = 1.0 - dxRLerp;\n      for (let c = 0; c < yWidth; c++) {\n        const dxC = c * widthScale;\n        const leftDxCIndex = Math.floor(dxC);\n        const rightDxCIndex = Math.min(Math.ceil(dxC), xWidth - 1);\n        const dxCLerp = dxC - leftDxCIndex;\n        const inverseDxCLerp = 1.0 - dxCLerp;\n\n        const topLeftRCOffset = topDxROffset + leftDxCIndex * imagesStrides[2];\n        const topRightRCOffset =\n            topDxROffset + rightDxCIndex * imagesStrides[2];\n        const bottomLeftRCOffset =\n            bottomDxROffset + leftDxCIndex * imagesStrides[2];\n        const bottomRightRCOffset =\n            bottomDxROffset + rightDxCIndex * imagesStrides[2];\n\n        const inverseDxRLerpTimesInverseDxCLerp =\n            inverseDxRLerp * inverseDxCLerp;\n        const inverseDxRLerpTimesDxCLerp = inverseDxRLerp * dxCLerp;\n        const dxRLerpTimesInverseDxCLerp = dxRLerp * inverseDxCLerp;\n        const dxRLerpTimesDxCLerp = dxRLerp * dxCLerp;\n        for (let d = 0; d < depth; d++) {\n          const dyVal = dyValues[offset++];\n          output[topLeftRCOffset + d] +=\n              dyVal * inverseDxRLerpTimesInverseDxCLerp;\n          output[topRightRCOffset + d] += dyVal * inverseDxRLerpTimesDxCLerp;\n          output[bottomLeftRCOffset + d] += dyVal * dxRLerpTimesInverseDxCLerp;\n          output[bottomRightRCOffset + d] += dyVal * dxRLerpTimesDxCLerp;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(\n      [batch, xWidth, xHeight, depth], 'float32', output);\n}\n\nexport const resizeBilinearGradConfig: KernelConfig = {\n  kernelName: ResizeBilinearGrad,\n  backendName: 'cpu',\n  kernelFunc: resizeBilinearGrad as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeNearestNeighbor, ResizeNearestNeighborAttrs, ResizeNearestNeighborInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function resizeNearestNeighbor(args: {\n  inputs: ResizeNearestNeighborInputs,\n  backend: MathBackendCPU,\n  attrs: ResizeNearestNeighborAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images} = inputs;\n  const {alignCorners, halfPixelCenters, size} = attrs;\n\n  assertNotComplex(images, 'resizeNearestNeighbor');\n\n  const imagesStrides = util.computeStrides(images.shape);\n  const [newHeight, newWidth] = size;\n\n  const [batch, oldHeight, oldWidth, numChannels] = images.shape;\n  const xValues = backend.data.get(images.dataId).values as TypedArray;\n  const output = new Float32Array(batch * newHeight * newWidth * numChannels);\n\n  const effectiveInputSize: [number, number] = [\n    (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n    (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n  ];\n\n  const effectiveOutputSize: [number, number] = [\n    (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n    (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n  ];\n\n  const effectiveRowSizeRatio = effectiveInputSize[0] / effectiveOutputSize[0];\n  const effectiveColSizeRatio = effectiveInputSize[1] / effectiveOutputSize[1];\n\n  let outputOffset = 0;\n  for (let b = 0; b < batch; b++) {\n    const batchOffset = b * imagesStrides[0];\n    for (let r = 0; r < newHeight; r++) {\n      const sourceFracRow = halfPixelCenters ?\n          effectiveRowSizeRatio * (r + 0.5) :\n          effectiveRowSizeRatio * r;\n      let sourceNearestRow = Math.min(\n          oldHeight - 1,\n          alignCorners ? Math.round(sourceFracRow) : Math.floor(sourceFracRow));\n      if (halfPixelCenters) {\n        sourceNearestRow = Math.max(0, sourceNearestRow);\n      }\n      const rowOffset = batchOffset + sourceNearestRow * imagesStrides[1];\n      for (let c = 0; c < newWidth; c++) {\n        const sourceFracCol = halfPixelCenters ?\n            effectiveColSizeRatio * (c + 0.5) :\n            effectiveColSizeRatio * c;\n        let sourceNearestCol = Math.min(\n            oldWidth - 1,\n            alignCorners ? Math.round(sourceFracCol) :\n                           Math.floor(sourceFracCol));\n        if (halfPixelCenters) {\n          sourceNearestCol = Math.max(0, sourceNearestCol);\n        }\n        const colOffset = rowOffset + sourceNearestCol * imagesStrides[2];\n        for (let d = 0; d < numChannels; d++) {\n          // Begin shader.\n          // Compute the fractional index of the source.\n          const newVal = xValues[colOffset + d];\n          output[outputOffset++] = newVal;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(\n      [batch, newHeight, newWidth, numChannels], images.dtype, output);\n}\n\nexport const resizeNearestNeighborConfig: KernelConfig = {\n  kernelName: ResizeNearestNeighbor,\n  backendName: 'cpu',\n  kernelFunc: resizeNearestNeighbor as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeNearestNeighborGrad, ResizeNearestNeighborGradAttrs, ResizeNearestNeighborGradInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function resizeNearestNeighborGrad(args: {\n  inputs: ResizeNearestNeighborGradInputs,\n  backend: MathBackendCPU,\n  attrs: ResizeNearestNeighborGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images, dy} = inputs;\n  const {alignCorners} = attrs;\n\n  assertNotComplex([dy, images], 'resizeNearestNeighborGrad');\n\n  const imagesStrides = util.computeStrides(images.shape);\n  const dyStrides = util.computeStrides(dy.shape);\n  const [batch, xHeight, xWidth, depth] = images.shape;\n  const [, yHeight, yWidth] = dy.shape;\n\n  const output = new Float32Array(batch * xHeight * xWidth * depth);\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n\n  // In the backwards pass, we want to find the pixels that were generated\n  // for each pixel in the input image the forward pass\n\n  const effectiveXSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n    (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n  ];\n\n  const effectiveYSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n    (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n  ];\n\n  const heightScale = effectiveXSize[0] / effectiveYSize[0];\n  const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n  const invHeightScale = 1 / heightScale;\n  const invWidthScale = 1 / widthScale;\n\n  // This defines the size of the window of values around a particular\n  // index in dy that we want to search for contributions to dx.\n  const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n  const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n\n  // Loop over the output space.\n  for (let b = 0; b < batch; b++) {\n    const batchOffset = b * imagesStrides[0];\n    for (let r = 0; r < xHeight; r++) {\n      const rowOffset = batchOffset + r * imagesStrides[1];\n\n      // Compute bounds for where in dy we will look\n      const startRLerp = Math.floor(r * invHeightScale);\n      const startDyR = Math.floor(startRLerp - (winHeight / 2));\n      for (let c = 0; c < xWidth; c++) {\n        const colOffset = rowOffset + c * imagesStrides[2];\n\n        // Compute bounds for where in dy we will look\n        const startCLerp = Math.floor(c * invWidthScale);\n        const startDyC = Math.floor(startCLerp - (winWidth / 2));\n\n        for (let d = 0; d < depth; d++) {\n          let accum = 0;\n          // loop over dy\n\n          for (let dyRIndex = 0; dyRIndex < winHeight; dyRIndex++) {\n            const dyR = dyRIndex + startDyR;\n            // Guard against the window exceeding the bounds of dy\n            if (dyR < 0 || dyR >= yHeight) {\n              continue;\n            }\n\n            const dyROffset = batchOffset + dyR * dyStrides[1];\n            const sourceFracRow = dyR * heightScale;\n            const sourceNearestRow = Math.min(\n                xHeight - 1,\n                alignCorners ? Math.round(sourceFracRow) :\n                               Math.floor(sourceFracRow));\n            if (r !== sourceNearestRow) {\n              continue;\n            }\n            for (let dyCIndex = 0; dyCIndex < winWidth; dyCIndex++) {\n              const dyC = dyCIndex + startDyC;\n              // Guard against the window exceeding the bounds of dy\n              if (dyC < 0 || dyC >= yWidth) {\n                continue;\n              }\n\n              const dyCOffset = dyROffset + dyC * dyStrides[2];\n              const sourceFracCol = dyC * widthScale;\n              const sourceNearestCol = Math.min(\n                  xWidth - 1,\n                  alignCorners ? Math.round(sourceFracCol) :\n                                 Math.floor(sourceFracCol));\n\n              if (c === sourceNearestCol) {\n                accum += dyValues[dyCOffset + d];\n              }\n            }\n          }\n          output[colOffset + d] = accum;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(images.shape, images.dtype, output);\n}\n\nexport const resizeNearestNeighborGradConfig: KernelConfig = {\n  kernelName: ResizeNearestNeighborGrad,\n  backendName: 'cpu',\n  kernelFunc: resizeNearestNeighborGrad as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Reverse, ReverseAttrs, ReverseInputs, TensorBuffer, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {identity} from './Identity';\n\nexport function reverse(\n    args:\n        {inputs: ReverseInputs, backend: MathBackendCPU, attrs: ReverseAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dims} = attrs;\n\n  assertNotComplex(x, 'reverse');\n\n  const xRank = x.shape.length;\n\n  const $dims = util.parseAxisParam(dims, x.shape);\n  if (xRank === 0) {\n    return identity({inputs: {x}, backend});\n  }\n\n  const outBuf = new TensorBuffer(x.shape, x.dtype);\n  const xBuf = backend.bufferSync(x);\n\n  for (let i = 0; i < outBuf.size; i++) {\n    const outLoc = outBuf.indexToLoc(i);\n    const inLoc = outLoc.slice();\n    $dims.forEach(d => inLoc[d] = x.shape[d] - 1 - inLoc[d]);\n    outBuf.set(xBuf.get(...inLoc), ...outLoc);\n  }\n\n  return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n}\n\nexport const reverseConfig: KernelConfig = {\n  kernelName: Reverse,\n  backendName: 'cpu',\n  kernelFunc: reverse as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {backend_util, RotateWithOffset, RotateWithOffsetAttrs, RotateWithOffsetInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const rotateWithOffsetConfig: KernelConfig = {\n  kernelName: RotateWithOffset,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {image} = inputs as RotateWithOffsetInputs;\n    const {radians, fillValue, center} = attrs as {} as RotateWithOffsetAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const output = util.getTypedArrayFromDType(\n        image.dtype as NumericDataType, util.sizeFromShape(image.shape));\n    const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n\n    const [centerX, centerY] =\n        backend_util.getImageCenter(center, imageHeight, imageWidth);\n    const fullOpacityValue = 255;\n\n    const sinFactor = Math.sin(radians);\n    const cosFactor = Math.cos(radians);\n    const imageVals = cpuBackend.data.get(image.dataId).values as TypedArray;\n\n    for (let batchIdx = 0; batchIdx < batch; batchIdx++) {\n      const batchOffset = batchIdx * imageWidth * imageHeight * numChannels;\n\n      for (let row = 0; row < imageHeight; row++) {\n        const rowOffset = row * (imageWidth * numChannels);\n\n        for (let col = 0; col < imageWidth; col++) {\n          const colOffset = col * numChannels;\n\n          for (let channel = 0; channel < numChannels; channel++) {\n            const coords = [batch, row, col, channel];\n\n            const x = coords[2];\n            const y = coords[1];\n\n            // coordX/coordY are the result of rotating and translating x/y.\n            let coordX = (x - centerX) * cosFactor - (y - centerY) * sinFactor;\n            let coordY = (x - centerX) * sinFactor + (y - centerY) * cosFactor;\n            coordX = Math.round(coordX + centerX);\n            coordY = Math.round(coordY + centerY);\n\n            let outputValue = fillValue;\n            if (typeof fillValue !== 'number') {\n              if (channel === 3) {\n                outputValue = fullOpacityValue;\n              } else {\n                outputValue = fillValue[channel];\n              }\n            }\n\n            // If the coordinate position falls within the image boundaries...\n            if (coordX >= 0 && coordX < imageWidth && coordY >= 0 &&\n                coordY < imageHeight) {\n              // set the output to the image value at the coordinate position.\n              const rotatedRowOffset = coordY * (imageWidth * numChannels);\n              const rotatedColOffset = coordX * numChannels;\n              const imageIdx =\n                  batchOffset + rotatedRowOffset + rotatedColOffset + channel;\n              outputValue = imageVals[imageIdx];\n            }\n\n            const outIdx = batchOffset + rowOffset + colOffset + channel;\n            output[outIdx] = outputValue as number;\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(output, image.shape, image.dtype);\n    return {dataId, shape: image.shape, dtype: image.dtype};\n  }\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Round} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const round = unaryKernelFunc(Round, (xi) => {\n  // The algorithm is based on banker's rounding.\n  const base = Math.floor(xi);\n  if (xi - base < 0.5) {\n    return Math.floor(xi);\n  } else if (xi - base > 0.5) {\n    return Math.ceil(xi);\n  } else {\n    if (base % 2.0 === 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n});\n\nexport const roundConfig: KernelConfig = {\n  kernelName: Round,\n  backendName: 'cpu',\n  kernelFunc: round,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, ScatterNd, ScatterNdAttrs, ScatterNdInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {scatterImpl} from './Scatter_impl';\n\nexport function scatterNd(args: {\n  inputs: ScatterNdInputs,\n  backend: MathBackendCPU,\n  attrs: ScatterNdAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {indices, updates} = inputs;\n  const {shape} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(updates, indices, shape);\n  const sumDupeIndices = true;\n\n  const indicesBuf = backend.bufferSync(indices);\n  const updatesBuf = backend.bufferSync(updates);\n\n  const outBuf = scatterImpl(\n      indicesBuf, updatesBuf, shape, outputSize, sliceSize, numUpdates,\n      sliceRank, strides, 0 /* defaultValue */, sumDupeIndices);\n\n  return backend.makeTensorInfo(shape, outBuf.dtype, outBuf.values);\n}\n\nexport const scatterNdConfig: KernelConfig = {\n  kernelName: ScatterNd,\n  backendName: 'cpu',\n  kernelFunc: scatterNd as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {buffer, Rank, ShapeMap, TensorBuffer, TypedArray} from '@tensorflow/tfjs-core';\n\nexport function scatterImpl<R extends Rank>(\n    indices: TensorBuffer<R>, updates: TensorBuffer<R>, shape: number[],\n    outputSize: number, sliceSize: number, numUpdates: number,\n    sliceRank: number, strides: number[], defaultValue: number,\n    sumDupeIndices: boolean): TensorBuffer<R> {\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n\n  const indicesData = indices.values as TypedArray;\n  const updatesData = updates.values as TypedArray;\n\n  if (outputSize === 0) {\n    return buffer(shape as ShapeMap[R], updates.dtype);\n  }\n\n  const outBuf = buffer(flattenShape, updates.dtype);\n  (outBuf.values as TypedArray).fill(defaultValue);\n\n  for (let i = 0; i < numUpdates; i++) {\n    const index = [];\n    let flattenIndex = 0;\n    for (let j = 0; j < sliceRank; j++) {\n      const dim = indicesData[i * sliceRank + j];\n      index.push(dim);\n      flattenIndex += dim * strides[j];\n    }\n\n    if (flattenIndex < 0 || flattenIndex >= outputSize / sliceSize) {\n      throw new Error(`Invalid indices: ${index} does not index into ${shape}`);\n    }\n\n    for (let k = 0; k < sliceSize; k++) {\n      if (sumDupeIndices) {\n        outBuf.values[flattenIndex * sliceSize + k] +=\n            updatesData[i * sliceSize + k];\n      } else {\n        outBuf.values[flattenIndex * sliceSize + k] = updates.rank === 0 ?\n            updatesData[0] :\n            updatesData[i * sliceSize + k];\n      }\n    }\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Select, SelectInputs, TensorInfo, TypedArray, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function select(args: {inputs: SelectInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {condition, t, e} = inputs;\n\n  assertNotComplex([condition, t, e], 'select');\n  const conditionRank = condition.shape.length;\n\n  const values = backend.data.get(condition.dataId).values as TypedArray;\n  const tValues = backend.data.get(t.dataId).values as TypedArray;\n  const eValues = backend.data.get(e.dataId).values as TypedArray;\n  const resultDtype = upcastType(t.dtype, e.dtype);\n  const newValues =\n      util.makeZerosTypedArray(util.sizeFromShape(t.shape), resultDtype);\n\n  let index = 0;\n  const offset =\n      conditionRank === 0 || conditionRank > 1 || t.shape.length === 1 ?\n      1 :\n      util.sizeFromShape(t.shape.slice(1));\n\n  for (let i = 0; i < values.length; i++) {\n    for (let j = 0; j < offset; j++) {\n      if (values[i] === 1) {\n        newValues[index++] = tValues[i];\n      } else {\n        newValues[index++] = eValues[i];\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(t.shape, resultDtype, newValues);\n}\n\nexport const selectConfig: KernelConfig = {\n  kernelName: Select,\n  backendName: 'cpu',\n  kernelFunc: select as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, Selu} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nconst scaleAlpha = backend_util.SELU_SCALEALPHA;\nconst scale = backend_util.SELU_SCALE;\n\nexport const selu = unaryKernelFunc(Selu, (xi) => {\n  if (xi >= 0) {\n    return scale * xi;\n  } else {\n    return scaleAlpha * (Math.exp(xi) - 1);\n  }\n});\n\nexport const seluConfig: KernelConfig = {\n  kernelName: Selu,\n  backendName: 'cpu',\n  kernelFunc: selu,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sign} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sign = unaryKernelFunc(Sign, (xi) => {\n  if (xi < 0) {\n    return -1;\n  } else if (xi > 0) {\n    return 1;\n  } else {\n    return 0;\n  }\n});\n\nexport const signConfig: KernelConfig = {\n  kernelName: Sign,\n  backendName: 'cpu',\n  kernelFunc: sign,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sin} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sin = unaryKernelFunc(Sin, (xi) => Math.sin(xi));\n\nexport const sinConfig: KernelConfig = {\n  kernelName: Sin,\n  backendName: 'cpu',\n  kernelFunc: sin,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sinh} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sinh = unaryKernelFunc(Sinh, (xi) => Math.sinh(xi));\n\nexport const sinhConfig: KernelConfig = {\n  kernelName: Sinh,\n  backendName: 'cpu',\n  kernelFunc: sinh,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Softplus} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\n// mirrors the implementation of tf.nn.softplus: https://goo.gl/vkcvwX\n\n// epsilon is the difference between 1.0 and the next representable float.\n// For a single precision 32 bit float this should be 2^-23, see:\n// https://math.byu.edu/~schow/work/IEEEFloatingPoint.htm\nconst epsilon = 1.1920928955078125e-7;\nconst threshold = Math.log(epsilon) + 2.0;\n\nexport const softplus = unaryKernelFunc(Softplus, (xi) => {\n  // Value above which exp(x) may overflow, but softplus(x) == x\n  // is within machine epsilon.\n  const tooLarge = xi > -threshold;\n\n  // Value below which exp(x) may underflow, but softplus(x) == exp(x)\n  // is within machine epsilon.\n  const tooSmall = xi < threshold;\n\n  const expX = Math.exp(xi);\n  let result;\n\n  if (tooSmall) {\n    result = expX;\n  } else if (tooLarge) {\n    result = xi;\n  } else {\n    result = Math.log(1.0 + expX);\n  }\n  return result;\n});\n\nexport const softplusConfig: KernelConfig = {\n  kernelName: Softplus,\n  backendName: 'cpu',\n  kernelFunc: softplus,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, ReshapeAttrs, ReshapeInputs, SpaceToBatchND, SpaceToBatchNDAttrs, SpaceToBatchNDInputs, TensorInfo, TransposeAttrs, TransposeInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {padV2Config} from './PadV2';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function spaceToBatchND(args: {\n  inputs: SpaceToBatchNDInputs,\n  backend: MathBackendCPU,\n  attrs: SpaceToBatchNDAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, paddings} = attrs;\n\n  assertNotComplex([x], 'spaceToBatchND');\n\n  const prod = util.sizeFromShape(blockShape);\n\n  const completePaddings: Array<[number, number]> = [[0, 0]];\n  completePaddings.push(...(paddings as Array<[number, number]>));\n\n  for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n    completePaddings.push([0, 0]);\n  }\n\n  const paddedX = padV2Config.kernelFunc({\n    inputs: {x},\n    backend,\n    attrs: {paddings: completePaddings, constantValue: 0}\n  }) as TensorInfo;\n\n  const reshapedPaddedShape =\n      backend_util.getReshaped(paddedX.shape, blockShape, prod, false);\n\n  const permutedReshapedPaddedPermutation = backend_util.getPermuted(\n      reshapedPaddedShape.length, blockShape.length, false);\n\n  const flattenShape =\n      backend_util.getReshapedPermuted(paddedX.shape, blockShape, prod, false);\n\n  const reshapeInputs: ReshapeInputs = {x: paddedX};\n  const reshapeAttrs: ReshapeAttrs = {shape: reshapedPaddedShape};\n  const paddedXReshaped =\n      reshape({inputs: reshapeInputs, backend, attrs: reshapeAttrs});\n\n  const transposeInputs: TransposeInputs = {x: paddedXReshaped};\n  const transposeAttrs:\n      TransposeAttrs = {perm: permutedReshapedPaddedPermutation};\n  const paddedXT =\n      transpose({inputs: transposeInputs, backend, attrs: transposeAttrs});\n\n  const resultReshapeInputs: ReshapeInputs = {x: paddedXT};\n  const resultReshapeAttrs: ReshapeAttrs = {shape: flattenShape};\n  const result = reshape(\n      {inputs: resultReshapeInputs, backend, attrs: resultReshapeAttrs});\n\n  backend.disposeIntermediateTensorInfo(paddedX);\n  backend.disposeIntermediateTensorInfo(paddedXReshaped);\n  backend.disposeIntermediateTensorInfo(paddedXT);\n\n  return result;\n}\n\nexport const spaceToBatchNDConfig: KernelConfig = {\n  kernelName: SpaceToBatchND,\n  backendName: 'cpu',\n  kernelFunc: spaceToBatchND as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, SparseFillEmptyRows, SparseFillEmptyRowsInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {sparseFillEmptyRowsImpl} from './SparseFillEmptyRows_impl';\n\nexport function sparseFillEmptyRows(args: {\n  inputs: SparseFillEmptyRowsInputs,\n  backend: MathBackendCPU\n}): [TensorInfo, TensorInfo, TensorInfo, TensorInfo] {\n  const {inputs, backend} = args;\n  const {indices, values, denseShape, defaultValue} = inputs;\n  if (denseShape.shape.length !== 1) {\n    throw new Error(`Dense shape must be a vector, saw:\n        ${denseShape.shape}`);\n  }\n  if (indices.shape.length !== 2) {\n    throw new Error(`Indices must be a matrix, saw:\n        ${indices.shape}`);\n  }\n  if (values.shape.length !== 1) {\n    throw new Error(`Values must be a vector, saw:\n        ${values.shape}`);\n  }\n  if (defaultValue.shape.length !== 0) {\n    throw new Error(`Default value must be a scalar, saw:\n        ${defaultValue.shape}`);\n  }\n\n  const $indices = backend.data.get(indices.dataId).values as TypedArray;\n  const $values = backend.data.get(values.dataId).values as TypedArray;\n  const $denseShape = backend.data.get(denseShape.dataId).values as TypedArray;\n  const $defaultValue =\n      backend.data.get(defaultValue.dataId).values[0] as number;\n\n  const [outputIndices, outputIndicesShape, outputValues,\n         emptyRowIndicator, reverseIndexMap] =\n      sparseFillEmptyRowsImpl(\n          $indices, indices.shape, indices.dtype, $values, values.dtype,\n          $denseShape, $defaultValue);\n  return [\n    backend.makeTensorInfo(outputIndicesShape, indices.dtype, outputIndices),\n    backend.makeTensorInfo(\n        [outputIndicesShape[0]], values.dtype, outputValues),\n    backend.makeTensorInfo(\n        [emptyRowIndicator.length], 'bool',\n        new Uint8Array(\n            emptyRowIndicator.map((value: boolean) => Number(value)))),\n    backend.makeTensorInfo(\n        [reverseIndexMap.length], indices.dtype,\n        new Int32Array(reverseIndexMap)),\n  ];\n}\n\nexport const sparseFillEmptyRowsConfig: KernelConfig = {\n  kernelName: SparseFillEmptyRows,\n  backendName: 'cpu',\n  kernelFunc: sparseFillEmptyRows as {} as KernelFunc,\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SparseReshape, SparseReshapeInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {sparseReshapeImpl} from './SparseReshape_impl';\n\nexport function sparseReshape(\n    args: {inputs: SparseReshapeInputs, backend: MathBackendCPU}):\n    [TensorInfo, TensorInfo] {\n  const {inputs, backend} = args;\n  const {inputIndices, inputShape, newShape} = inputs;\n  if (inputIndices.shape.length !== 2) {\n    throw new Error(`Input indices should be a matrix but received shape\n        ${inputIndices.shape}`);\n  }\n  if (inputShape.shape.length !== 1) {\n    throw new Error(`Input shape should be a vector but received shape\n        ${inputShape.shape}`);\n  }\n\n  if (newShape.shape.length !== 1) {\n    throw new Error(\n        `Target shape should be a vector but received shape ${newShape.shape}`);\n  }\n\n  const $inputShape =\n      Array.from(backend.data.get(inputShape.dataId).values as TypedArray);\n  const $inputIndices =\n      backend.data.get(inputIndices.dataId).values as TypedArray;\n  const targetShape =\n      Array.from(backend.data.get(newShape.dataId).values as TypedArray);\n\n  const [newIndices, indicesShape, outputShape] = sparseReshapeImpl(\n      $inputIndices, inputIndices.shape, inputIndices.dtype, $inputShape,\n      targetShape);\n  return [\n    backend.makeTensorInfo(indicesShape, inputIndices.dtype, newIndices),\n    backend.makeTensorInfo(\n        [outputShape.length], newShape.dtype, new Int32Array(outputShape)),\n  ];\n}\n\nexport const sparseReshapeConfig: KernelConfig = {\n  kernelName: SparseReshape,\n  backendName: 'cpu',\n  kernelFunc: sparseReshape,\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SparseSegmentMean, SparseSegmentMeanInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {sparseSegmentReductionImpl} from './SparseSegmentReduction_impl';\n\nexport function sparseSegmentMean(\n    args: {inputs: SparseSegmentMeanInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {data, indices, segmentIds} = inputs;\n  if (data.shape.length < 1) {\n    throw new Error(\n        `Data should be at least 1 dimensional but received scalar`);\n  }\n  if (indices.shape.length !== 1) {\n    throw new Error(`Indices should be a vector but received shape\n          ${indices.shape}`);\n  }\n  if (segmentIds.shape.length !== 1) {\n    throw new Error(`Segment ids should be a vector but received shape\n          ${segmentIds.shape}`);\n  }\n\n  const $data = backend.data.get(data.dataId).values as TypedArray;\n  const $indices = backend.data.get(indices.dataId).values as TypedArray;\n  const $segmentIds = backend.data.get(segmentIds.dataId).values as TypedArray;\n\n  const [outputData, outputDataShape] = sparseSegmentReductionImpl(\n      $data, data.shape, data.dtype, $indices, $segmentIds, true);\n  return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\n\nexport const sparseSegmentMeanConfig: KernelConfig = {\n  kernelName: SparseSegmentMean,\n  backendName: 'cpu',\n  kernelFunc: sparseSegmentMean,\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SparseSegmentSum, SparseSegmentSumInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {sparseSegmentReductionImpl} from './SparseSegmentReduction_impl';\n\nexport function sparseSegmentSum(\n    args: {inputs: SparseSegmentSumInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {data, indices, segmentIds} = inputs;\n  if (data.shape.length < 1) {\n    throw new Error(\n        `Data should be at least 1 dimensional but received scalar`);\n  }\n  if (indices.shape.length !== 1) {\n    throw new Error(`Indices should be a vector but received shape\n         ${indices.shape}`);\n  }\n  if (segmentIds.shape.length !== 1) {\n    throw new Error(`Segment ids should be a vector but received shape\n         ${segmentIds.shape}`);\n  }\n\n  const $data = backend.data.get(data.dataId).values as TypedArray;\n  const $indices = backend.data.get(indices.dataId).values as TypedArray;\n  const $segmentIds = backend.data.get(segmentIds.dataId).values as TypedArray;\n\n  const [outputData, outputDataShape] = sparseSegmentReductionImpl(\n      $data, data.shape, data.dtype, $indices, $segmentIds);\n  return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\n\nexport const sparseSegmentSumConfig: KernelConfig = {\n  kernelName: SparseSegmentSum,\n  backendName: 'cpu',\n  kernelFunc: sparseSegmentSum,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, SparseToDense, SparseToDenseAttrs, SparseToDenseInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {scatterImpl} from './Scatter_impl';\n\nexport function sparseToDense(args: {\n  inputs: SparseToDenseInputs,\n  backend: MathBackendCPU,\n  attrs: SparseToDenseAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {sparseIndices, sparseValues, defaultValue} = inputs;\n  const {outputShape} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);\n  const sumDupeIndices = false;\n\n  const indicesBuf = backend.bufferSync(sparseIndices);\n  const updatesBuf = backend.bufferSync(sparseValues);\n  const $defaultValue =\n      backend.data.get(defaultValue.dataId).values[0] as number;\n\n  const outBuf = scatterImpl(\n      indicesBuf, updatesBuf, outputShape, outputSize, sliceSize, numUpdates,\n      sliceRank, strides, $defaultValue, sumDupeIndices);\n\n  return backend.makeTensorInfo(outputShape, outBuf.dtype, outBuf.values);\n}\n\nexport const sparseToDenseConfig: KernelConfig = {\n  kernelName: SparseToDense,\n  backendName: 'cpu',\n  kernelFunc: sparseToDense as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, SplitVAttrs, SplitVInputs} from '@tensorflow/tfjs-core';\nimport {KernelConfig, KernelFunc, SplitV, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {slice} from './Slice';\n\nexport function splitV(\n    args: {inputs: SplitVInputs, backend: MathBackendCPU, attrs: SplitVAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {numOrSizeSplits, axis} = attrs;\n\n  const $axis = util.parseAxisParam(axis, x.shape)[0];\n  const splitSizes = backend_util.prepareSplitSize(x, numOrSizeSplits, $axis);\n\n  const begin = new Array(x.shape.length).fill(0);\n  const size = x.shape.slice();\n  return splitSizes.map(s => {\n    const sliceSize = [...size];\n    sliceSize[$axis] = s;\n    const sliceT =\n        slice({inputs: {x}, backend, attrs: {begin, size: sliceSize}});\n    begin[$axis] += s;\n    return sliceT;\n  });\n}\n\nexport const splitVConfig: KernelConfig = {\n  kernelName: SplitV,\n  backendName: 'cpu',\n  kernelFunc: splitV as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Square, SquareInputs} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport const squareConfig: KernelConfig = {\n  kernelName: Square,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend}) => {\n    const {x} = inputs as SquareInputs;\n    const cpuBackend = backend as MathBackendCPU;\n    assertNotComplex(x, 'square');\n\n    const values = cpuBackend.data.get(x.dataId).values as Float32Array;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      const value = values[i];\n      newValues[i] = value * value;\n    }\n    const dataId = cpuBackend.write(newValues, x.shape, x.dtype);\n    return {dataId, shape: x.shape, dtype: x.dtype};\n  }\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Step, StepAttrs} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const step = unaryKernelFunc(Step, (xi, attrs) => {\n  const stepAttrs = attrs as {} as StepAttrs;\n  if (isNaN(xi)) {\n    return NaN;\n  } else {\n    return xi > 0 ? 1 : stepAttrs.alpha;\n  }\n});\n\nexport const stepConfig: KernelConfig = {\n  kernelName: Step,\n  backendName: 'cpu',\n  kernelFunc: step,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, slice_util, StridedSlice, StridedSliceAttrs, StridedSliceInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\nimport {stridedSliceImpl} from './StridedSlice_impl';\n\nexport function stridedSlice(args: {\n  inputs: StridedSliceInputs,\n  backend: MathBackendCPU,\n  attrs: StridedSliceAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {\n    begin,\n    end,\n    strides,\n    beginMask,\n    endMask,\n    ellipsisMask,\n    newAxisMask,\n    shrinkAxisMask\n  } = attrs;\n\n  assertNotComplex(x, 'stridedSlice');\n\n  const {nonStrided, $begin, $strides, size, newShape, outShape} =\n      slice_util.sliceInfo(\n          x.shape, begin, end, strides, beginMask, endMask, ellipsisMask,\n          newAxisMask, shrinkAxisMask);\n\n  const $x = reshape({inputs: {x}, backend, attrs: {shape: newShape}});\n\n  let result;\n  if (nonStrided) {\n    const sliced =\n        slice({inputs: {x: $x}, backend, attrs: {begin: $begin, size}});\n    result = reshape({inputs: {x: sliced}, backend, attrs: {shape: outShape}});\n\n    backend.disposeIntermediateTensorInfo(sliced);\n  } else if (outShape.some(axis => axis === 0)) {\n    result = backend.makeTensorInfo(outShape, x.dtype, []);\n  } else {\n    const xBuf = backend.bufferSync($x);\n    const outBuf = stridedSliceImpl(outShape, xBuf, $strides, $begin);\n\n    result = backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n  }\n\n  const resultReshaped =\n      reshape({inputs: {x: result}, backend, attrs: {shape: outShape}});\n\n  backend.disposeIntermediateTensorInfo($x);\n  backend.disposeIntermediateTensorInfo(result);\n\n  return resultReshaped;\n}\n\nexport const stridedSliceConfig: KernelConfig = {\n  kernelName: StridedSlice,\n  backendName: 'cpu',\n  kernelFunc: stridedSlice as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringNGrams, StringNGramsAttrs, StringNGramsInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {stringNGramsImpl} from './StringNGrams_impl';\n\nexport function stringNGrams(args: {\n  inputs: StringNGramsInputs,\n  backend: MathBackendCPU,\n  attrs: StringNGramsAttrs\n}): [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {\n    separator,\n    nGramWidths,\n    leftPad,\n    rightPad,\n    padWidth,\n    preserveShortSequences\n  } = attrs;\n  const {data, dataSplits} = inputs;\n  const $data = backend.data.get(data.dataId).values as Uint8Array[];\n  const $dataSplits = backend.data.get(dataSplits.dataId).values as Int32Array;\n\n  const [nGrams, nGramsSplits] = stringNGramsImpl(\n      $data, $dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth,\n      preserveShortSequences);\n  return [\n    backend.makeTensorInfo([nGrams.length], 'string', nGrams),\n    backend.makeTensorInfo(dataSplits.shape, 'int32', nGramsSplits),\n  ];\n}\n\nexport const stringNGramsConfig: KernelConfig = {\n  kernelName: StringNGrams,\n  backendName: 'cpu',\n  kernelFunc: stringNGrams as {} as KernelFunc,\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringSplit, StringSplitAttrs, StringSplitInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {stringSplitImpl} from './StringSplit_impl';\n\nexport function stringSplit(args: {\n  inputs: StringSplitInputs,\n  backend: MathBackendCPU,\n  attrs: StringSplitAttrs\n}): [TensorInfo, TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {skipEmpty} = attrs;\n  const {input, delimiter} = inputs;\n\n  if (input.dtype !== 'string') {\n    throw new Error('Input must be of datatype string');\n  }\n  if (input.shape.length !== 1) {\n    throw new Error(`Input must be a vector, got shape: ${input.shape}`);\n  }\n  if (delimiter.shape.length !== 0) {\n    throw new Error(\n        `Delimiter must be a scalar, got shape: ${delimiter.shape}`);\n  }\n\n  const $input = backend.data.get(input.dataId).values as Uint8Array[];\n  const $delimiter = backend.data.get(delimiter.dataId).values[0] as Uint8Array;\n\n  const [indices, values, shape] =\n      stringSplitImpl($input, $delimiter, skipEmpty);\n  const outputSize = values.length;\n  return [\n    backend.makeTensorInfo([outputSize, 2], 'int32', indices),\n    backend.makeTensorInfo([outputSize], 'string', values),\n    backend.makeTensorInfo([2], 'int32', new Int32Array(shape))\n  ];\n}\n\nexport const stringSplitConfig: KernelConfig = {\n  kernelName: StringSplit,\n  backendName: 'cpu',\n  kernelFunc: stringSplit as {} as KernelFunc,\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringToHashBucketFast, StringToHashBucketFastAttrs, StringToHashBucketFastInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {stringToHashBucketFastImpl} from './StringToHashBucketFast_impl';\n\nexport function stringToHashBucketFast(args: {\n  inputs: StringToHashBucketFastInputs,\n  backend: MathBackendCPU,\n  attrs: StringToHashBucketFastAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {numBuckets} = attrs;\n  const {input} = inputs;\n\n  if (input.dtype !== 'string') {\n    throw new Error('Input must be of datatype string');\n  }\n  if (numBuckets <= 0) {\n    throw new Error(`Number of buckets must be at least 1`);\n  }\n\n  const $input = backend.data.get(input.dataId).values as Uint8Array[];\n\n  const output = stringToHashBucketFastImpl($input, numBuckets);\n  return backend.makeTensorInfo(input.shape, 'int32', output);\n}\n\nexport const stringToHashBucketFastConfig: KernelConfig = {\n  kernelName: StringToHashBucketFast,\n  backendName: 'cpu',\n  kernelFunc: stringToHashBucketFast as {} as KernelFunc,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tan} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const tan = unaryKernelFunc(Tan, (xi) => Math.tan(xi));\n\nexport const tanConfig: KernelConfig = {\n  kernelName: Tan,\n  backendName: 'cpu',\n  kernelFunc: tan,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tanh} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const tanh = unaryKernelFunc(Tanh, (xi) => Math.tanh(xi));\n\nexport const tanhConfig: KernelConfig = {\n  kernelName: Tanh,\n  backendName: 'cpu',\n  kernelFunc: tanh,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Tile, TileAttrs, TileInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {tileImpl} from './Tile_impl';\n\nexport function tile(\n    args: {inputs: TileInputs, backend: MathBackendCPU, attrs: TileAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {reps} = attrs;\n\n  assertNotComplex(x, 'tile');\n  const outBuf = tileImpl(backend.bufferSync(x), reps);\n\n  return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n}\n\nexport const tileConfig: KernelConfig = {\n  kernelName: Tile,\n  backendName: 'cpu',\n  kernelFunc: tile as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, NumericDataType, TensorInfo, TopK, TopKAttrs, TopKInputs, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {topKImpl} from './TopK_impl';\n\nexport function topK(\n    args: {inputs: TopKInputs, backend: MathBackendCPU, attrs: TopKAttrs}):\n    [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {k, sorted} = attrs;\n\n  assertNotComplex(x, 'topk');\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const [allTopKVals, allTopKIndices] =\n      topKImpl(xVals, x.shape, x.dtype as NumericDataType, k, sorted);\n\n  return [\n    backend.makeTensorInfo(\n        allTopKVals.shape, allTopKVals.dtype, allTopKVals.values),\n    backend.makeTensorInfo(\n        allTopKIndices.shape, allTopKIndices.dtype, allTopKIndices.values)\n  ];\n}\n\nexport const topKConfig: KernelConfig = {\n  kernelName: TopK,\n  backendName: 'cpu',\n  kernelFunc: topK as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, NumericDataType, TensorInfo, Transform, TransformAttrs, TransformInputs, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function transform(args: {\n  inputs: TransformInputs,\n  attrs: TransformAttrs,\n  backend: MathBackendCPU\n}): TensorInfo {\n  const {inputs, attrs, backend} = args;\n  const {image, transforms} = inputs;\n  const {interpolation, fillMode, fillValue, outputShape} = attrs;\n\n  const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n  const [outHeight, outWidth] =\n      outputShape != null ? outputShape : [imageHeight, imageWidth];\n  const outShape = [batch, outHeight, outWidth, numChannels];\n\n  const strides = util.computeStrides(image.shape);\n  const batchStride = strides[0];\n  const rowStride = strides[1];\n  const colStride = strides[2];\n\n  const outVals = util.getTypedArrayFromDType(\n      image.dtype as NumericDataType, util.sizeFromShape(outShape));\n\n  outVals.fill(fillValue);\n\n  const imageVals = backend.data.get(image.dataId).values as TypedArray;\n  const transformVals =\n      backend.data.get(transforms.dataId).values as TypedArray;\n\n  // Ref TF implementation:\n  // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/image/image_ops.h\n  for (let b = 0; b < batch; ++b) {\n    const transform = transforms.shape[0] === 1 ?\n        transformVals :\n        transformVals.subarray(b * 8, b * 8 + 8);\n\n    for (let outY = 0; outY < outHeight; ++outY) {\n      for (let outX = 0; outX < outWidth; ++outX) {\n        for (let channel = 0; channel < numChannels; ++channel) {\n          let val;\n\n          const projection = transform[6] * outX + transform[7] * outY + 1;\n\n          if (projection === 0) {\n            // Return the fill value for infinite coordinates,\n            // which are outside the input image\n            continue;\n          }\n\n          const inX =\n              (transform[0] * outX + transform[1] * outY + transform[2]) /\n              projection;\n          const inY =\n              (transform[3] * outX + transform[4] * outY + transform[5]) /\n              projection;\n\n          const x = mapCoord(inX, imageWidth, fillMode);\n          const y = mapCoord(inY, imageHeight, fillMode);\n\n          switch (interpolation) {\n            case 'nearest':\n              val = nearestInterpolation(\n                  imageVals, imageHeight, imageWidth, batchStride, rowStride,\n                  colStride, b, y, x, channel, fillValue);\n              break;\n            case 'bilinear':\n              val = bilinearInterpolation(\n                  imageVals, imageHeight, imageWidth, batchStride, rowStride,\n                  colStride, b, y, x, channel, fillValue);\n              break;\n            default:\n              throw new Error(\n                  `Error in Transform: Expect 'nearest' or ` +\n                  `'bilinear', but got ${interpolation}`);\n          }\n\n          const ind =\n              b * batchStride + outY * rowStride + outX * colStride + channel;\n\n          outVals[ind] = val;\n        }\n      }\n    }\n\n    return backend.makeTensorInfo(outShape, image.dtype, outVals);\n  }\n\n  const dataId = backend.write(outVals, outShape, image.dtype);\n  return {dataId, shape: image.shape, dtype: image.dtype};\n}\n\nexport const transformConfig: KernelConfig = {\n  kernelName: Transform,\n  backendName: 'cpu',\n  kernelFunc: transform as {} as KernelFunc\n};\n\nfunction mapCoord(\n    outCoord: number, len: number,\n    mode: 'constant'|'reflect'|'wrap'|'nearest') {\n  switch (mode) {\n    case 'reflect':\n      return mapCoordReflect(outCoord, len);\n    case 'wrap':\n      return mapCoordWrap(outCoord, len);\n    case 'nearest':\n      return mapCoordNearest(outCoord, len);\n    case 'constant':\n    default:\n      return mapCoordConstant(outCoord, len);\n  }\n}\n\nfunction mapCoordReflect(outCoord: number, len: number): number {\n  // Reflect [abcd] to [dcba|abcd|dcba].\n  let inCoord = outCoord;\n  if (inCoord < 0) {\n    if (len <= 1) {\n      inCoord = 0;\n    } else {\n      const sz2 = 2 * len;\n      if (inCoord < sz2) {\n        inCoord = sz2 * Math.trunc(-inCoord / sz2) + inCoord;\n      }\n      inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1;\n    }\n  } else if (inCoord > len - 1) {\n    if (len <= 1) {\n      inCoord = 0;\n    } else {\n      const sz2 = 2 * len;\n      inCoord -= sz2 * Math.trunc(inCoord / sz2);\n      if (inCoord >= len) {\n        inCoord = sz2 - inCoord - 1;\n      }\n    }\n  }\n  // clamp is necessary because when outCoord = 3.5 and len = 4,\n  // inCoord = 3.5 and will be rounded to 4 in nearest interpolation.\n  return util.clamp(0, inCoord, len - 1);\n}\n\nfunction mapCoordWrap(outCoord: number, len: number): number {\n  // Wrap [abcd] to [abcd|abcd|abcd].\n  let inCoord = outCoord;\n  if (inCoord < 0) {\n    if (len <= 1) {\n      inCoord = 0;\n    } else {\n      const sz = len - 1;\n      inCoord += len * (Math.trunc(-inCoord / sz) + 1);\n    }\n  } else if (inCoord > len - 1) {\n    if (len <= 1) {\n      inCoord = 0;\n    } else {\n      const sz = len - 1;\n      inCoord -= len * Math.trunc(inCoord / sz);\n    }\n  }\n  // clamp is necessary because when outCoord = -0.5 and len = 4,\n  // inCoord = 3.5 and will be rounded to 4 in nearest interpolation.\n  return util.clamp(0, inCoord, len - 1);\n}\n\nfunction mapCoordConstant(outCoord: number, len: number): number {\n  return outCoord;\n}\n\nfunction mapCoordNearest(outCoord: number, len: number): number {\n  return util.clamp(0, outCoord, len - 1);\n}\n\nfunction readWithFillValue(\n    imageVals: TypedArray, imageHeight: number, imageWidth: number,\n    batchStride: number, rowStride: number, colStride: number, batch: number,\n    y: number, x: number, channel: number, fillValue: number): number {\n  const ind = batch * batchStride + y * rowStride + x * colStride + channel;\n  if (0 <= y && y < imageHeight && 0 <= x && x < imageWidth) {\n    return imageVals[ind];\n  } else {\n    return fillValue;\n  }\n}\n\nfunction nearestInterpolation(\n    imageVals: TypedArray, imageHeight: number, imageWidth: number,\n    batchStride: number, rowStride: number, colStride: number, batch: number,\n    y: number, x: number, channel: number, fillValue: number): number {\n  const $y = Math.round(y);\n  const $x = Math.round(x);\n\n  return readWithFillValue(\n      imageVals, imageHeight, imageWidth, batchStride, rowStride, colStride,\n      batch, $y, $x, channel, fillValue);\n}\n\nfunction bilinearInterpolation(\n    imageVals: TypedArray, imageHeight: number, imageWidth: number,\n    batchStride: number, rowStride: number, colStride: number, batch: number,\n    y: number, x: number, channel: number, fillValue: number) {\n  const yFloor = Math.floor(y);\n  const xFloor = Math.floor(x);\n  const yCeil = yFloor + 1;\n  const xCeil = xFloor + 1;\n  // f(x, yFloor) = (xCeil - x) / (xCeil - xFloor) * f(xFloor, yFloor)\n  //               + (x - xFloor) / (xCeil - xFloor) * f(xCeil, yFloor)\n  const valueYFloor =\n      (xCeil - x) *\n          readWithFillValue(\n              imageVals, imageHeight, imageWidth, batchStride, rowStride,\n              colStride, batch, yFloor, xFloor, channel, fillValue) +\n      (x - xFloor) *\n          readWithFillValue(\n              imageVals, imageHeight, imageWidth, batchStride, rowStride,\n              colStride, batch, yFloor, xCeil, channel, fillValue);\n  // f(x, yCeil) = (xCeil - x) / (xCeil - xFloor) * f(xFloor, yCeil)\n  //             + (x - xFloor) / (xCeil - xFloor) * f(xCeil, yCeil)\n  const valueYCeil =\n      (xCeil - x) *\n          readWithFillValue(\n              imageVals, imageHeight, imageWidth, batchStride, rowStride,\n              colStride, batch, yCeil, xFloor, channel, fillValue) +\n      (x - xFloor) *\n          readWithFillValue(\n              imageVals, imageHeight, imageWidth, batchStride, rowStride,\n              colStride, batch, yCeil, xCeil, channel, fillValue);\n  // f(x, y) = (yCeil - y) / (yCeil - yFloor) * f(x, yFloor)\n  //         + (y - yFloor) / (yCeil - yFloor) * f(x, yCeil)\n  return (yCeil - y) * valueYFloor + (y - yFloor) * valueYCeil;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Unique, UniqueAttrs, UniqueInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {uniqueImpl} from './Unique_impl';\n\nexport function unique(\n    args: {inputs: UniqueInputs, attrs: UniqueAttrs, backend: MathBackendCPU}):\n    TensorInfo[] {\n  const {inputs, attrs, backend} = args;\n  const {axis} = attrs;\n  const {x} = inputs;\n  assertNotComplex(x, 'unique');\n\n  const values = backend.data.get(x.dataId).values;\n  const {outputValues, outputShape, indices} =\n      uniqueImpl(values, axis, x.shape, x.dtype);\n  return [\n    backend.makeTensorInfo(outputShape, x.dtype, outputValues),\n    backend.makeTensorInfo([indices.length], 'int32', indices),\n  ];\n}\n\nexport const uniqueConfig: KernelConfig = {\n  kernelName: Unique,\n  backendName: 'cpu',\n  kernelFunc: unique as {} as KernelFunc,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Unpack, UnpackAttrs, UnpackInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\n\nexport function unpack(\n    args: {inputs: UnpackInputs, backend: MathBackendCPU, attrs: UnpackAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {value} = inputs;\n  let {axis} = attrs;\n\n  if (axis < 0) {\n    axis += value.shape.length;\n  }\n\n  const valueRank = value.shape.length;\n\n  const num = value.shape[axis];\n  const outShape: number[] = new Array(valueRank - 1);\n  let outIndex = 0;\n  for (let i = 0; i < valueRank; i++) {\n    if (i !== axis) {\n      outShape[outIndex++] = value.shape[i];\n    }\n  }\n\n  const begin = new Array(valueRank).fill(0);\n  const size = value.shape.slice();\n  size[axis] = 1;\n  const res = new Array(num);\n  for (let i = 0; i < res.length; i++) {\n    begin[axis] = i;\n    const tempRes = slice({inputs: {x: value}, backend, attrs: {begin, size}});\n    res[i] = reshape({inputs: {x: tempRes}, backend, attrs: {shape: outShape}});\n    backend.disposeIntermediateTensorInfo(tempRes);\n  }\n\n  return res;\n}\n\nexport const unpackConfig: KernelConfig = {\n  kernelName: Unpack,\n  backendName: 'cpu',\n  kernelFunc: unpack as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, UnsortedSegmentSum, UnsortedSegmentSumAttrs, UnsortedSegmentSumInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {cast} from './Cast';\nimport {equal} from './Equal';\nimport {expandDims} from './ExpandDims';\nimport {multiply} from './Multiply';\nimport {pack} from './Pack';\nimport {sum} from './Sum';\n\nexport function unsortedSegmentSum(args: {\n  inputs: UnsortedSegmentSumInputs,\n  backend: MathBackendCPU,\n  attrs: UnsortedSegmentSumAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, segmentIds} = inputs;\n  const {numSegments} = attrs;\n\n  assertNotComplex(x, 'unsortedSegmentSum');\n\n  const xRank = x.shape.length;\n  const segmentIdsRank = segmentIds.shape.length;\n  const res = [];\n  const intermediates: TensorInfo[] = [];\n\n  // Reshape the segment id's so that they can be broadcast with\n  // x. The new shape should be [segmentIds.shape, 1, ..., 1]\n  const numIters = xRank - segmentIdsRank;\n  let $segmentIds = segmentIds;\n\n  for (let i = 0; i < numIters; ++i) {\n    const expanded = expandDims(\n        {inputs: {input: $segmentIds}, backend, attrs: {dim: i + 1}});\n    $segmentIds = expanded;\n    intermediates.push(expanded);\n  }\n\n  for (let i = 0; i < numSegments; ++i) {\n    const scalarValue = util.createScalarValue(i as {} as 'int32', 'int32');\n    const segmentId = backend.makeTensorInfo([], 'int32', scalarValue);\n    const mask =\n        equal({inputs: {a: segmentId, b: $segmentIds}, backend}) as TensorInfo;\n    const maskCasted =\n        cast({inputs: {x: mask}, backend, attrs: {dtype: 'float32'}});\n    const mul =\n        multiply({inputs: {a: maskCasted, b: x}, backend}) as TensorInfo;\n    const sumTensorInfo =\n        sum({inputs: {x: mul}, backend, attrs: {axis: 0, keepDims: false}});\n    res.push(sumTensorInfo);\n    intermediates.push(segmentId);\n    intermediates.push(mask);\n    intermediates.push(maskCasted);\n    intermediates.push(mul);\n    intermediates.push(sumTensorInfo);\n  }\n\n  const result = pack({inputs: res, backend, attrs: {axis: 0}});\n\n  intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const unsortedSegmentSumConfig: KernelConfig = {\n  kernelName: UnsortedSegmentSum,\n  backendName: 'cpu',\n  kernelFunc: unsortedSegmentSum as {} as KernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// All exports from this package should be in base.\nexport * from './base';\nimport './register_all_kernels';\n"],
  "mappings": "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AiB,GAAG;AAEpB,QAAM,QAAQ,EAAE,MAAM;AACtB,QAAM,iBAAiB,WAAW,MAAM;AACxC,QAAM,MAAM;AACZ,QAAM,gBAA8B;AAIpC,QAAM,WAAW,QAAQ;AACzB,MAAI,cAAc;AAElB,WAAS,IAAI,GAAG,IAAI,UAAU,EAAE,GAAG;AACjC,UAAM,WAAW,WACb,EAAC,QAAQ,EAAC,OAAO,eAAc,SAAS,OAAO,EAAC,KAAK,IAAI;AAC7D,kBAAc;AACd,kBAAc,KAAK;;AAGrB,WAAS,IAAI,GAAG,IAAI,aAAa,EAAE,GAAG;AACpC,UAAM,cAAc,aAAK,kBAAkB,GAAoB;AAC/D,UAAM,YAAY,QAAQ,eAAe,IAAI,SAAS;AACtD,UAAM,OACF,MAAM,EAAC,QAAQ,EAAC,GAAG,WAAW,GAAG,eAAc;AACnD,UAAM,aACF,KAAK,EAAC,QAAQ,EAAC,GAAG,QAAO,SAAS,OAAO,EAAC,OAAO;AACrD,UAAM,MACF,SAAS,EAAC,QAAQ,EAAC,GAAG,YAAY,GAAG,KAAI;AAC7C,UAAM,gBACF,IAAI,EAAC,QAAQ,EAAC,GAAG,OAAM,SAAS,OAAO,EAAC,MAAM,GAAG,UAAU;AAC/D,QAAI,KAAK;AACT,kBAAc,KAAK;AACnB,kBAAc,KAAK;AACnB,kBAAc,KAAK;AACnB,kBAAc,KAAK;AACnB,kBAAc,KAAK;;AAGrB,QAAM,SAAS,KAAK,EAAC,QAAQ,KAAK,SAAS,OAAO,EAAC,MAAM;AAEzD,gBAAc,QAAQ,OAAK,QAAQ,8BAA8B;AAEjE,SAAO;;AAGF,IAAM,2BAAyC;EACpD,YAAY;EACZ,aAAa;EACb,YAAY;;;;A3IrFd,AA0LA,IAAM,gBAAgC;EACpC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;AAGF,WAAW,gBAAgB,eAAe;AACxC,iBAAe;;A4IjWjB",
  "names": []
}
